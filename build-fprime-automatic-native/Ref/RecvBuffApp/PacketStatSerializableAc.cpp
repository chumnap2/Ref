// ======================================================================
// \title  PacketStatSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for PacketStat struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Ref/RecvBuffApp/PacketStatSerializableAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  PacketStat ::
    PacketStat() :
      Serializable(),
      m_BuffRecv(0),
      m_BuffErr(0),
      m_PacketStatus(Ref::PacketRecvStatus::PACKET_STATE_NO_PACKETS)
  {

  }

  PacketStat ::
    PacketStat(
        U32 BuffRecv,
        U32 BuffErr,
        Ref::PacketRecvStatus::T PacketStatus
    ) :
      Serializable(),
      m_BuffRecv(BuffRecv),
      m_BuffErr(BuffErr),
      m_PacketStatus(PacketStatus)
  {

  }

  PacketStat ::
    PacketStat(const PacketStat& obj) :
      Serializable(),
      m_BuffRecv(obj.m_BuffRecv),
      m_BuffErr(obj.m_BuffErr),
      m_PacketStatus(obj.m_PacketStatus)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  PacketStat& PacketStat ::
    operator=(const PacketStat& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.m_BuffRecv, obj.m_BuffErr, obj.m_PacketStatus);
    return *this;
  }

  bool PacketStat ::
    operator==(const PacketStat& obj) const
  {
    if (this == &obj) { return true; }
    return (
      (this->m_BuffRecv == obj.m_BuffRecv) &&
      (this->m_BuffErr == obj.m_BuffErr) &&
      (this->m_PacketStatus == obj.m_PacketStatus)
    );
  }

  bool PacketStat ::
    operator!=(const PacketStat& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const PacketStat& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus PacketStat ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serializeFrom(this->m_BuffRecv);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_BuffErr);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_PacketStatus);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus PacketStat ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserializeTo(this->m_BuffRecv);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_BuffErr);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_PacketStatus);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  FwSizeType PacketStat ::
    serializedSize() const
  {
    FwSizeType size = 0;
    size += sizeof(U32);
    size += sizeof(U32);
    size += Ref::PacketRecvStatus::SERIALIZED_SIZE;
    return size;
  }

#if FW_SERIALIZABLE_TO_STRING

  void PacketStat ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String tmp;
    sb = "( ";

    // Format BuffRecv
    sb += "BuffRecv = ";
    tmp.format("%" PRIu32 "", this->m_BuffRecv);
    sb += tmp;
    sb += ", ";

    // Format BuffErr
    sb += "BuffErr = ";
    tmp.format("%" PRIu32 "", this->m_BuffErr);
    sb += tmp;
    sb += ", ";

    // Format PacketStatus
    sb += "PacketStatus = ";
    this->m_PacketStatus.toString(tmp);
    sb += tmp;
    sb += " )";
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void PacketStat ::
    set(
        U32 BuffRecv,
        U32 BuffErr,
        Ref::PacketRecvStatus::T PacketStatus
    )
  {
    this->m_BuffRecv = BuffRecv;
    this->m_BuffErr = BuffErr;
    this->m_PacketStatus = PacketStatus;
  }

  void PacketStat ::
    set_BuffRecv(U32 BuffRecv)
  {
    this->m_BuffRecv = BuffRecv;
  }

  void PacketStat ::
    set_BuffErr(U32 BuffErr)
  {
    this->m_BuffErr = BuffErr;
  }

  void PacketStat ::
    set_PacketStatus(Ref::PacketRecvStatus::T PacketStatus)
  {
    this->m_PacketStatus = PacketStatus;
  }

}
