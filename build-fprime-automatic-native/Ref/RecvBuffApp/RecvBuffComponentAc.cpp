// ======================================================================
// \title  RecvBuffComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for RecvBuff component base class
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif
#include "Ref/RecvBuffApp/RecvBuffComponentAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void RecvBuffComponentBase ::
    init(FwEnumStoreType instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect input port CmdDisp
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_CmdDisp_InputPorts());
      port++
    ) {
      this->m_CmdDisp_InputPort[port].init();
      this->m_CmdDisp_InputPort[port].addCallComp(
        this,
        m_p_CmdDisp_in
      );
      this->m_CmdDisp_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_CmdDisp_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_CmdDisp_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port Data
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Data_InputPorts());
      port++
    ) {
      this->m_Data_InputPort[port].init();
      this->m_Data_InputPort[port].addCallComp(
        this,
        m_p_Data_in
      );
      this->m_Data_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Data_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Data_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port CmdReg
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_CmdReg_OutputPorts());
      port++
    ) {
      this->m_CmdReg_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_CmdReg_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_CmdReg_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port CmdStatus
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_CmdStatus_OutputPorts());
      port++
    ) {
      this->m_CmdStatus_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_CmdStatus_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_CmdStatus_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port Log
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Log_OutputPorts());
      port++
    ) {
      this->m_Log_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Log_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Log_OutputPort[port].setObjName(portName.toChar());
#endif
    }

#if FW_ENABLE_TEXT_LOGGING == 1
    // Connect output port LogText
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_LogText_OutputPorts());
      port++
    ) {
      this->m_LogText_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_LogText_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_LogText_OutputPort[port].setObjName(portName.toChar());
#endif
    }
#endif

    // Connect output port ParamGet
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_ParamGet_OutputPorts());
      port++
    ) {
      this->m_ParamGet_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_ParamGet_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_ParamGet_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port ParamSet
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_ParamSet_OutputPorts());
      port++
    ) {
      this->m_ParamSet_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_ParamSet_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_ParamSet_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port Time
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Time_OutputPorts());
      port++
    ) {
      this->m_Time_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Time_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Time_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port Tlm
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Tlm_OutputPorts());
      port++
    ) {
      this->m_Tlm_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Tlm_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Tlm_OutputPort[port].setObjName(portName.toChar());
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Getters for special input ports
  // ----------------------------------------------------------------------

  Fw::InputCmdPort* RecvBuffComponentBase ::
    get_CmdDisp_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdDisp_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_CmdDisp_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Drv::InputDataBufferPort* RecvBuffComponentBase ::
    get_Data_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Data_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_Data_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect input ports to special output ports
  // ----------------------------------------------------------------------

  void RecvBuffComponentBase ::
    set_CmdReg_OutputPort(
        FwIndexType portNum,
        Fw::InputCmdRegPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdReg_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_CmdReg_OutputPort[portNum].addCallPort(port);
  }

  void RecvBuffComponentBase ::
    set_CmdStatus_OutputPort(
        FwIndexType portNum,
        Fw::InputCmdResponsePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdStatus_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_CmdStatus_OutputPort[portNum].addCallPort(port);
  }

  void RecvBuffComponentBase ::
    set_Log_OutputPort(
        FwIndexType portNum,
        Fw::InputLogPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Log_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Log_OutputPort[portNum].addCallPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void RecvBuffComponentBase ::
    set_LogText_OutputPort(
        FwIndexType portNum,
        Fw::InputLogTextPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_LogText_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_LogText_OutputPort[portNum].addCallPort(port);
  }

#endif

  void RecvBuffComponentBase ::
    set_ParamGet_OutputPort(
        FwIndexType portNum,
        Fw::InputPrmGetPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_ParamGet_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_ParamGet_OutputPort[portNum].addCallPort(port);
  }

  void RecvBuffComponentBase ::
    set_ParamSet_OutputPort(
        FwIndexType portNum,
        Fw::InputPrmSetPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_ParamSet_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_ParamSet_OutputPort[portNum].addCallPort(port);
  }

  void RecvBuffComponentBase ::
    set_Time_OutputPort(
        FwIndexType portNum,
        Fw::InputTimePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Time_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Time_OutputPort[portNum].addCallPort(port);
  }

  void RecvBuffComponentBase ::
    set_Tlm_OutputPort(
        FwIndexType portNum,
        Fw::InputTlmPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Tlm_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Tlm_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to special output ports
  // ----------------------------------------------------------------------

  void RecvBuffComponentBase ::
    set_CmdReg_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdReg_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_CmdReg_OutputPort[portNum].registerSerialPort(port);
  }

  void RecvBuffComponentBase ::
    set_CmdStatus_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdStatus_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_CmdStatus_OutputPort[portNum].registerSerialPort(port);
  }

  void RecvBuffComponentBase ::
    set_Log_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Log_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Log_OutputPort[portNum].registerSerialPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void RecvBuffComponentBase ::
    set_LogText_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_LogText_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_LogText_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  void RecvBuffComponentBase ::
    set_ParamSet_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_ParamSet_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_ParamSet_OutputPort[portNum].registerSerialPort(port);
  }

  void RecvBuffComponentBase ::
    set_Time_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Time_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Time_OutputPort[portNum].registerSerialPort(port);
  }

  void RecvBuffComponentBase ::
    set_Tlm_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Tlm_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Tlm_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Command registration
  // ----------------------------------------------------------------------

  void RecvBuffComponentBase ::
    regCommands()
  {
    FW_ASSERT(this->m_CmdReg_OutputPort[0].isConnected());

    this->m_CmdReg_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_PARAMETER1_SET
    );

    this->m_CmdReg_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_PARAMETER1_SAVE
    );

    this->m_CmdReg_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_PARAMETER2_SET
    );

    this->m_CmdReg_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_PARAMETER2_SAVE
    );
  }

  // ----------------------------------------------------------------------
  // Parameter loading
  // ----------------------------------------------------------------------

  void RecvBuffComponentBase ::
    loadParameters()
  {
    Fw::ParamBuffer _buff;
    Fw::SerializeStatus _stat = Fw::FW_SERIALIZE_OK;
    const FwPrmIdType _baseId = static_cast<FwPrmIdType>(this->getIdBase());
    FW_ASSERT(this->m_ParamGet_OutputPort[0].isConnected());

    FwPrmIdType _id{};

    _id = _baseId + PARAMID_PARAMETER1;

    // Get parameter parameter1
    this->m_param_parameter1_valid =
      this->m_ParamGet_OutputPort[0].invoke(
        _id,
        _buff
      );

    // Deserialize value
    this->m_paramLock.lock();

    // If there was a deserialization issue, mark it invalid
    if (this->m_param_parameter1_valid == Fw::ParamValid::VALID) {
      _stat = _buff.deserializeTo(this->m_parameter1);
      if (_stat != Fw::FW_SERIALIZE_OK) {
        this->m_param_parameter1_valid = Fw::ParamValid::DEFAULT;
        // Set default value
        this->m_parameter1 = 10;
      }
    }
    else {
      // Set default value
      this->m_param_parameter1_valid = Fw::ParamValid::DEFAULT;
      this->m_parameter1 = 10;
    }

    this->m_paramLock.unLock();

    _id = _baseId + PARAMID_PARAMETER2;

    // Get parameter parameter2
    this->m_param_parameter2_valid =
      this->m_ParamGet_OutputPort[0].invoke(
        _id,
        _buff
      );

    // Deserialize value
    this->m_paramLock.lock();

    // If there was a deserialization issue, mark it invalid
    if (this->m_param_parameter2_valid == Fw::ParamValid::VALID) {
      _stat = _buff.deserializeTo(this->m_parameter2);
      if (_stat != Fw::FW_SERIALIZE_OK) {
        this->m_param_parameter2_valid = Fw::ParamValid::DEFAULT;
        // Set default value
        this->m_parameter2 = 11;
      }
    }
    else {
      // Set default value
      this->m_param_parameter2_valid = Fw::ParamValid::DEFAULT;
      this->m_parameter2 = 11;
    }

    this->m_paramLock.unLock();

    // Call notifier
    this->parametersLoaded();
  }

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  RecvBuffComponentBase ::
    RecvBuffComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {
    // Write telemetry channel Parameter1
    this->m_first_update_Parameter1 = true;
    this->m_last_Parameter1 = 0;

    // Write telemetry channel Parameter2
    this->m_first_update_Parameter2 = true;
    this->m_last_Parameter2 = 0;

    this->m_param_parameter1_valid = Fw::ParamValid::UNINIT;
    this->m_param_parameter2_valid = Fw::ParamValid::UNINIT;
  }

  RecvBuffComponentBase ::
    ~RecvBuffComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special input ports
  // ----------------------------------------------------------------------

  FwIndexType RecvBuffComponentBase ::
    getNum_CmdDisp_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_CmdDisp_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType RecvBuffComponentBase ::
    getNum_Data_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Data_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special output ports
  // ----------------------------------------------------------------------

  FwIndexType RecvBuffComponentBase ::
    getNum_CmdReg_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_CmdReg_OutputPort));
  }

  FwIndexType RecvBuffComponentBase ::
    getNum_CmdStatus_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_CmdStatus_OutputPort));
  }

  FwIndexType RecvBuffComponentBase ::
    getNum_Log_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Log_OutputPort));
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  FwIndexType RecvBuffComponentBase ::
    getNum_LogText_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_LogText_OutputPort));
  }

#endif

  FwIndexType RecvBuffComponentBase ::
    getNum_ParamGet_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_ParamGet_OutputPort));
  }

  FwIndexType RecvBuffComponentBase ::
    getNum_ParamSet_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_ParamSet_OutputPort));
  }

  FwIndexType RecvBuffComponentBase ::
    getNum_Time_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Time_OutputPort));
  }

  FwIndexType RecvBuffComponentBase ::
    getNum_Tlm_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Tlm_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for special output ports
  // ----------------------------------------------------------------------

  bool RecvBuffComponentBase ::
    isConnected_CmdReg_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdReg_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_CmdReg_OutputPort[portNum].isConnected();
  }

  bool RecvBuffComponentBase ::
    isConnected_CmdStatus_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdStatus_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_CmdStatus_OutputPort[portNum].isConnected();
  }

  bool RecvBuffComponentBase ::
    isConnected_Log_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Log_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Log_OutputPort[portNum].isConnected();
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  bool RecvBuffComponentBase ::
    isConnected_LogText_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_LogText_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_LogText_OutputPort[portNum].isConnected();
  }

#endif

  bool RecvBuffComponentBase ::
    isConnected_ParamGet_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_ParamGet_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_ParamGet_OutputPort[portNum].isConnected();
  }

  bool RecvBuffComponentBase ::
    isConnected_ParamSet_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_ParamSet_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_ParamSet_OutputPort[portNum].isConnected();
  }

  bool RecvBuffComponentBase ::
    isConnected_Time_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Time_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Time_OutputPort[portNum].isConnected();
  }

  bool RecvBuffComponentBase ::
    isConnected_Tlm_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Tlm_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Tlm_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void RecvBuffComponentBase ::
    Data_handlerBase(
        FwIndexType portNum,
        Drv::DataBuffer& buff
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Data_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->Data_handler(
      portNum,
      buff
    );
  }

  // ----------------------------------------------------------------------
  // Command response
  // ----------------------------------------------------------------------

  void RecvBuffComponentBase ::
    cmdResponse_out(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdResponse response
    )
  {
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
  }

  // ----------------------------------------------------------------------
  // Event logging functions
  // ----------------------------------------------------------------------

  void RecvBuffComponentBase ::
    log_ACTIVITY_LO_FirstPacketReceived(U32 id) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_Time_OutputPort[0].isConnected()) {
      this->m_Time_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_FIRSTPACKETRECEIVED;

    // Emit the event on the log port
    if (this->m_Log_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(id);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_Log_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_LogText_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: First packet ID %" PRIu32 " received";
#else
      const char* _formatString =
        "%s: First packet ID %" PRIu32 " received";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "FirstPacketReceived ",
        id
      );

      this->m_LogText_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logString
      );
    }
#endif
  }

  void RecvBuffComponentBase ::
    log_WARNING_HI_PacketChecksumError(U32 id) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_Time_OutputPort[0].isConnected()) {
      this->m_Time_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_PACKETCHECKSUMERROR;

    // Emit the event on the log port
    if (this->m_Log_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(id);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_Log_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_LogText_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Packet ID %" PRIu32 " had checksum error";
#else
      const char* _formatString =
        "%s: Packet ID %" PRIu32 " had checksum error";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "PacketChecksumError ",
        id
      );

      this->m_LogText_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logString
      );
    }
#endif
  }

  void RecvBuffComponentBase ::
    log_ACTIVITY_LO_BuffRecvParameterUpdated(U32 id) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_Time_OutputPort[0].isConnected()) {
      this->m_Time_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_BUFFRECVPARAMETERUPDATED;

    // Emit the event on the log port
    if (this->m_Log_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(id);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_Log_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_LogText_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: BuffRecv Parameter %" PRIu32 " was updated";
#else
      const char* _formatString =
        "%s: BuffRecv Parameter %" PRIu32 " was updated";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "BuffRecvParameterUpdated ",
        id
      );

      this->m_LogText_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logString
      );
    }
#endif
  }

  // ----------------------------------------------------------------------
  // Telemetry write functions
  // ----------------------------------------------------------------------

  void RecvBuffComponentBase ::
    tlmWrite_PktState(
        const Ref::PacketStat& arg,
        Fw::Time _tlmTime
    ) const
  {
    if (this->m_Tlm_OutputPort[0].isConnected()) {
      if (
        this->m_Time_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_Time_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serializeFrom(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_PKTSTATE;

      this->m_Tlm_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void RecvBuffComponentBase ::
    tlmWrite_Sensor1(
        F32 arg,
        Fw::Time _tlmTime
    ) const
  {
    if (this->m_Tlm_OutputPort[0].isConnected()) {
      if (
        this->m_Time_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_Time_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serializeFrom(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_SENSOR1;

      this->m_Tlm_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void RecvBuffComponentBase ::
    tlmWrite_Sensor2(
        F32 arg,
        Fw::Time _tlmTime
    ) const
  {
    if (this->m_Tlm_OutputPort[0].isConnected()) {
      if (
        this->m_Time_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_Time_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serializeFrom(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_SENSOR2;

      this->m_Tlm_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void RecvBuffComponentBase ::
    tlmWrite_Parameter1(
        U32 arg,
        Fw::Time _tlmTime
    )
  {
    // Check to see if it is the first time
    if (not this->m_first_update_Parameter1) {
      // Check to see if value has changed. If not, don't write it.
      if (arg == this->m_last_Parameter1) {
        return;
      }
      else {
        this->m_last_Parameter1 = arg;
      }
    }
    else {
      this->m_first_update_Parameter1 = false;
      this->m_last_Parameter1 = arg;
    }

    if (this->m_Tlm_OutputPort[0].isConnected()) {
      if (
        this->m_Time_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_Time_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serializeFrom(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_PARAMETER1;

      this->m_Tlm_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void RecvBuffComponentBase ::
    tlmWrite_Parameter2(
        I16 arg,
        Fw::Time _tlmTime
    )
  {
    // Check to see if it is the first time
    if (not this->m_first_update_Parameter2) {
      // Check to see if value has changed. If not, don't write it.
      if (arg == this->m_last_Parameter2) {
        return;
      }
      else {
        this->m_last_Parameter2 = arg;
      }
    }
    else {
      this->m_first_update_Parameter2 = false;
      this->m_last_Parameter2 = arg;
    }

    if (this->m_Tlm_OutputPort[0].isConnected()) {
      if (
        this->m_Time_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_Time_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serializeFrom(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_PARAMETER2;

      this->m_Tlm_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  // ----------------------------------------------------------------------
  // Parameter update hook
  // ----------------------------------------------------------------------

  void RecvBuffComponentBase ::
    parameterUpdated(FwPrmIdType id)
  {
    // Do nothing by default
  }

  void RecvBuffComponentBase ::
    parametersLoaded()
  {
    // Do nothing by default
  }

  // ----------------------------------------------------------------------
  // Parameter get functions
  // ----------------------------------------------------------------------

  U32 RecvBuffComponentBase ::
    paramGet_parameter1(Fw::ParamValid& valid)
  {
    U32 _local{};
    this->m_paramLock.lock();
    valid = this->m_param_parameter1_valid;
    _local = this->m_parameter1;
    this->m_paramLock.unLock();
    return _local;
  }

  I16 RecvBuffComponentBase ::
    paramGet_parameter2(Fw::ParamValid& valid)
  {
    I16 _local{};
    this->m_paramLock.lock();
    valid = this->m_param_parameter2_valid;
    _local = this->m_parameter2;
    this->m_paramLock.unLock();
    return _local;
  }

  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time RecvBuffComponentBase ::
    getTime() const
  {
    if (this->m_Time_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_Time_OutputPort[0].invoke(_time);
      return _time;
    }
    else {
      return Fw::Time(TimeBase::TB_NONE, 0, 0);
    }
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on special input ports
  // ----------------------------------------------------------------------

  void RecvBuffComponentBase ::
    m_p_CmdDisp_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    FW_ASSERT(callComp);
    RecvBuffComponentBase* compPtr = static_cast<RecvBuffComponentBase*>(callComp);

    const U32 idBase = callComp->getIdBase();
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));

    // Select base class function based on opcode
    switch (opCode - idBase) {
      case OPCODE_PARAMETER1_SET: {
        Fw::CmdResponse _cstat = compPtr->paramSet_parameter1(args);
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_PARAMETER1_SAVE: {
        Fw::CmdResponse _cstat = compPtr->paramSave_parameter1();
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_PARAMETER2_SET: {
        Fw::CmdResponse _cstat = compPtr->paramSet_parameter2(args);
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_PARAMETER2_SAVE: {
        Fw::CmdResponse _cstat = compPtr->paramSave_parameter2();
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }
    }
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void RecvBuffComponentBase ::
    m_p_Data_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Drv::DataBuffer& buff
    )
  {
    FW_ASSERT(callComp);
    RecvBuffComponentBase* compPtr = static_cast<RecvBuffComponentBase*>(callComp);
    compPtr->Data_handlerBase(
      portNum,
      buff
    );
  }

  // ----------------------------------------------------------------------
  // Parameter set functions
  // ----------------------------------------------------------------------

  Fw::CmdResponse RecvBuffComponentBase ::
    paramSet_parameter1(Fw::SerializeBufferBase& val)
  {
    U32 _localVal{};
    const Fw::SerializeStatus _stat = val.deserializeTo(_localVal);
    if (_stat != Fw::FW_SERIALIZE_OK) {
      return Fw::CmdResponse::VALIDATION_ERROR;
    }

    // Assign value only if successfully deserialized
    this->m_paramLock.lock();
    this->m_parameter1 = _localVal;
    this->m_param_parameter1_valid = Fw::ParamValid::VALID;
    this->m_paramLock.unLock();

    // Call notifier
    this->parameterUpdated(PARAMID_PARAMETER1);
    return Fw::CmdResponse::OK;
  }

  Fw::CmdResponse RecvBuffComponentBase ::
    paramSet_parameter2(Fw::SerializeBufferBase& val)
  {
    I16 _localVal{};
    const Fw::SerializeStatus _stat = val.deserializeTo(_localVal);
    if (_stat != Fw::FW_SERIALIZE_OK) {
      return Fw::CmdResponse::VALIDATION_ERROR;
    }

    // Assign value only if successfully deserialized
    this->m_paramLock.lock();
    this->m_parameter2 = _localVal;
    this->m_param_parameter2_valid = Fw::ParamValid::VALID;
    this->m_paramLock.unLock();

    // Call notifier
    this->parameterUpdated(PARAMID_PARAMETER2);
    return Fw::CmdResponse::OK;
  }

  // ----------------------------------------------------------------------
  // Parameter save functions
  // ----------------------------------------------------------------------

  Fw::CmdResponse RecvBuffComponentBase ::
    paramSave_parameter1()
  {
    Fw::ParamBuffer _saveBuff;
    FwPrmIdType _id;
    Fw::SerializeStatus _stat;
    if (this->m_ParamSet_OutputPort[0].isConnected()) {
      this->m_paramLock.lock();

      _stat = _saveBuff.serializeFrom(m_parameter1);

      this->m_paramLock.unLock();
      if (_stat != Fw::FW_SERIALIZE_OK) {
        return Fw::CmdResponse::VALIDATION_ERROR;
      }

      _id = static_cast<FwPrmIdType>(this->getIdBase() + PARAMID_PARAMETER1);

      // Save the parameter
      this->m_ParamSet_OutputPort[0].invoke(
        _id,
        _saveBuff
      );

      return Fw::CmdResponse::OK;
    }

    return Fw::CmdResponse::EXECUTION_ERROR;
  }

  Fw::CmdResponse RecvBuffComponentBase ::
    paramSave_parameter2()
  {
    Fw::ParamBuffer _saveBuff;
    FwPrmIdType _id;
    Fw::SerializeStatus _stat;
    if (this->m_ParamSet_OutputPort[0].isConnected()) {
      this->m_paramLock.lock();

      _stat = _saveBuff.serializeFrom(m_parameter2);

      this->m_paramLock.unLock();
      if (_stat != Fw::FW_SERIALIZE_OK) {
        return Fw::CmdResponse::VALIDATION_ERROR;
      }

      _id = static_cast<FwPrmIdType>(this->getIdBase() + PARAMID_PARAMETER2);

      // Save the parameter
      this->m_ParamSet_OutputPort[0].invoke(
        _id,
        _saveBuff
      );

      return Fw::CmdResponse::OK;
    }

    return Fw::CmdResponse::EXECUTION_ERROR;
  }

}
