// ======================================================================
// \title  SignalGenComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for SignalGen component base class
// ======================================================================

#ifndef Ref_SignalGenComponentAc_HPP
#define Ref_SignalGenComponentAc_HPP

#include <atomic>

#include "Fw/Cmd/CmdPortAc.hpp"
#include "Fw/Cmd/CmdRegPortAc.hpp"
#include "Fw/Cmd/CmdResponsePortAc.hpp"
#include "Fw/Cmd/CmdString.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Dp/DpContainer.hpp"
#include "Fw/Dp/DpGetPortAc.hpp"
#include "Fw/Dp/DpRequestPortAc.hpp"
#include "Fw/Dp/DpResponsePortAc.hpp"
#include "Fw/Dp/DpSendPortAc.hpp"
#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Log/LogString.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Fw/Tlm/TlmPortAc.hpp"
#include "Fw/Tlm/TlmString.hpp"
#include "Ref/SignalGen/SignalGen_DpReqTypeEnumAc.hpp"
#include "Ref/SignalGen/SignalInfoSerializableAc.hpp"
#include "Ref/SignalGen/SignalPairSerializableAc.hpp"
#include "Ref/SignalGen/SignalPairSetArrayAc.hpp"
#include "Ref/SignalGen/SignalSetArrayAc.hpp"
#include "Ref/SignalGen/SignalTypeEnumAc.hpp"
#include "Svc/Sched/SchedPortAc.hpp"

namespace Ref {

  //! \class SignalGenComponentBase
  //! \brief Auto-generated base for SignalGen component
  //!
  //! A component for generating periodic signals
  class SignalGenComponentBase :
    public Fw::QueuedComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class tester to support autocoded test harness
      friend class SignalGenTesterBase;
      //! Friend class tester implementation to support white-box testing
      friend class SignalGenTester;

    protected:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of special input ports
      enum {
        NUM_CMDIN_INPUT_PORTS = 1,
        NUM_PRODUCTRECVIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_SCHEDIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of special output ports
      enum {
        NUM_CMDREGOUT_OUTPUT_PORTS = 1,
        NUM_CMDRESPONSEOUT_OUTPUT_PORTS = 1,
        NUM_LOGOUT_OUTPUT_PORTS = 1,
        NUM_LOGTEXTOUT_OUTPUT_PORTS = 1,
        NUM_PRODUCTGETOUT_OUTPUT_PORTS = 1,
        NUM_PRODUCTREQUESTOUT_OUTPUT_PORTS = 1,
        NUM_PRODUCTSENDOUT_OUTPUT_PORTS = 1,
        NUM_TIMECALLER_OUTPUT_PORTS = 1,
        NUM_TLMOUT_OUTPUT_PORTS = 1,
      };

      //! Command opcodes
      enum {
        OPCODE_SETTINGS = 0x0, //!< Signal Generator Settings
        OPCODE_TOGGLE = 0x1, //!< Toggle Signal Generator On/Off.
        OPCODE_SKIP = 0x2, //!< Skip next sample
        OPCODE_DP = 0x3, //!< Signal Generator Settings
      };

      //! Event IDs
      enum {
        EVENTID_SETTINGSCHANGED = 0x0, //!< Signal Generator Settings Changed
        EVENTID_DPSTARTED = 0x1,
        EVENTID_DPCOMPLETE = 0x2,
        EVENTID_DPRECORDFULL = 0x3,
        EVENTID_DPSNOTCONNECTED = 0x4,
        EVENTID_DPMEMORYFAIL = 0x5,
        EVENTID_INSUFFICIENTDPRECORDS = 0x6,
        EVENTID_DPMEMREQUESTED = 0x7,
        EVENTID_DPMEMRECEIVED = 0x8,
      };

      //! Channel IDs
      enum {
        CHANNELID_TYPE = 0x0, //!< Channel ID for Type
        CHANNELID_OUTPUT = 0x1, //!< Channel ID for Output
        CHANNELID_PAIROUTPUT = 0x2, //!< Channel ID for PairOutput
        CHANNELID_HISTORY = 0x3, //!< Channel ID for History
        CHANNELID_PAIRHISTORY = 0x4, //!< Channel ID for PairHistory
        CHANNELID_INFO = 0x5, //!< Channel ID for Info
        CHANNELID_DPBYTES = 0x6, //!< Channel ID for DpBytes
        CHANNELID_DPRECORDS = 0x7, //!< Channel ID for DpRecords
      };

      //! Record sizes
      static constexpr FwSizeType SIZE_OF_DataRecord_RECORD =
        sizeof(FwDpIdType) + Ref::SignalInfo::SERIALIZED_SIZE;

    protected:

      // ----------------------------------------------------------------------
      // Types for data products
      // ----------------------------------------------------------------------

      //! The container ids
      struct ContainerId {
        enum T : FwDpIdType {
          DataContainer = 0,
        };
      };

      //! The container default priorities
      struct ContainerPriority {
        enum T : FwDpPriorityType {
          DataContainer = 10,
        };
      };

      //! The record ids
      struct RecordId {
        enum T : FwDpIdType {
          DataRecord = 0,
        };
      };

      //! A data product container
      class DpContainer :
        public Fw::DpContainer
      {

        public:

          //! Constructor with custom initialization
          DpContainer(
              FwDpIdType id, //!< The container id
              const Fw::Buffer& buffer, //!< The packet buffer
              FwDpIdType baseId //!< The component base id
          );

          //! Constructor with default initialization
          DpContainer();

        public:

          //! Serialize a DataRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_DataRecord(
              const Ref::SignalInfo& elt //!< The element
          );

          FwDpIdType getBaseId() const { return this->m_baseId; }

          void setBaseId(FwDpIdType baseId) { this->m_baseId = baseId; }

        private:

          //! The component base id
          FwDpIdType m_baseId;

      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize SignalGenComponentBase object
      void init(
          FwSizeType queueDepth, //!< The queue depth
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for special input ports
      // ----------------------------------------------------------------------

      //! Get special input port at index
      //!
      //! \return cmdIn[portNum]
      Fw::InputCmdPort* get_cmdIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get special input port at index
      //!
      //! \return productRecvIn[portNum]
      Fw::InputDpResponsePort* get_productRecvIn_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return schedIn[portNum]
      Svc::InputSchedPort* get_schedIn_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegOut[portNum]
      void set_cmdRegOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdRegPort* port //!< The input port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdResponsePort* port //!< The input port
      );

      //! Connect port to logOut[portNum]
      void set_logOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogPort* port //!< The input port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to logTextOut[portNum]
      void set_logTextOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogTextPort* port //!< The input port
      );

#endif

      //! Connect port to productGetOut[portNum]
      void set_productGetOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputDpGetPort* port //!< The input port
      );

      //! Connect port to productRequestOut[portNum]
      void set_productRequestOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputDpRequestPort* port //!< The input port
      );

      //! Connect port to productSendOut[portNum]
      void set_productSendOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputDpSendPort* port //!< The input port
      );

      //! Connect port to timeCaller[portNum]
      void set_timeCaller_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTimePort* port //!< The input port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTlmPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegOut[portNum]
      void set_cmdRegOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to logOut[portNum]
      void set_logOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to logTextOut[portNum]
      void set_logTextOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

      //! Connect port to productRequestOut[portNum]
      void set_productRequestOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to productSendOut[portNum]
      void set_productSendOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to timeCaller[portNum]
      void set_timeCaller_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Command registration
      // ----------------------------------------------------------------------

      //! \brief Register commands with the Command Dispatcher
      //!
      //! Connect the dispatcher first
      void regCommands();

    protected:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct SignalGenComponentBase object
      SignalGenComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy SignalGenComponentBase object
      virtual ~SignalGenComponentBase();

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of special input ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdIn input ports
      //!
      //! \return The number of cmdIn input ports
      FwIndexType getNum_cmdIn_InputPorts() const;

      //! Get the number of productRecvIn input ports
      //!
      //! \return The number of productRecvIn input ports
      FwIndexType getNum_productRecvIn_InputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of schedIn input ports
      //!
      //! \return The number of schedIn input ports
      FwIndexType getNum_schedIn_InputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of special output ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdRegOut output ports
      //!
      //! \return The number of cmdRegOut output ports
      FwIndexType getNum_cmdRegOut_OutputPorts() const;

      //! Get the number of cmdResponseOut output ports
      //!
      //! \return The number of cmdResponseOut output ports
      FwIndexType getNum_cmdResponseOut_OutputPorts() const;

      //! Get the number of logOut output ports
      //!
      //! \return The number of logOut output ports
      FwIndexType getNum_logOut_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get the number of logTextOut output ports
      //!
      //! \return The number of logTextOut output ports
      FwIndexType getNum_logTextOut_OutputPorts() const;

#endif

      //! Get the number of productGetOut output ports
      //!
      //! \return The number of productGetOut output ports
      FwIndexType getNum_productGetOut_OutputPorts() const;

      //! Get the number of productRequestOut output ports
      //!
      //! \return The number of productRequestOut output ports
      FwIndexType getNum_productRequestOut_OutputPorts() const;

      //! Get the number of productSendOut output ports
      //!
      //! \return The number of productSendOut output ports
      FwIndexType getNum_productSendOut_OutputPorts() const;

      //! Get the number of timeCaller output ports
      //!
      //! \return The number of timeCaller output ports
      FwIndexType getNum_timeCaller_OutputPorts() const;

      //! Get the number of tlmOut output ports
      //!
      //! \return The number of tlmOut output ports
      FwIndexType getNum_tlmOut_OutputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Connection status queries for special output ports
      // ----------------------------------------------------------------------

      //! Check whether port cmdRegOut is connected
      //!
      //! \return Whether port cmdRegOut is connected
      bool isConnected_cmdRegOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port cmdResponseOut is connected
      //!
      //! \return Whether port cmdResponseOut is connected
      bool isConnected_cmdResponseOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port logOut is connected
      //!
      //! \return Whether port logOut is connected
      bool isConnected_logOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Check whether port logTextOut is connected
      //!
      //! \return Whether port logTextOut is connected
      bool isConnected_logTextOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#endif

      //! Check whether port productGetOut is connected
      //!
      //! \return Whether port productGetOut is connected
      bool isConnected_productGetOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port productRequestOut is connected
      //!
      //! \return Whether port productRequestOut is connected
      bool isConnected_productRequestOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port productSendOut is connected
      //!
      //! \return Whether port productSendOut is connected
      bool isConnected_productSendOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port timeCaller is connected
      //!
      //! \return Whether port timeCaller is connected
      bool isConnected_timeCaller_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port tlmOut is connected
      //!
      //! \return Whether port tlmOut is connected
      bool isConnected_tlmOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

    protected:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for special input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port productRecvIn
      void productRecvIn_handlerBase(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          const Fw::Buffer& buffer, //!< The buffer
          const Fw::Success& status //!< The status
      );

    protected:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port schedIn
      virtual void schedIn_handler(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      ) = 0;

    protected:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port schedIn
      void schedIn_handlerBase(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    protected:

      // ----------------------------------------------------------------------
      // Pre-message hooks for special async input ports
      //
      // Each of these functions is invoked just before processing a message
      // on the corresponding port. By default, they do nothing. You can
      // override them to provide specific pre-message behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for async input port productRecvIn
      virtual void productRecvIn_preMsgHook(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          const Fw::Buffer& buffer, //!< The buffer
          const Fw::Success& status //!< The status
      );

    protected:

      // ----------------------------------------------------------------------
      // Invocation functions for special output ports
      // ----------------------------------------------------------------------

      //! Invoke output port productGetOut
      Fw::Success productGetOut_out(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID (input)
          FwSizeType dataSize, //!< The data size of the requested buffer (input)
          Fw::Buffer& buffer //!< The buffer (output)
      );

      //! Invoke output port productRequestOut
      void productRequestOut_out(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          FwSizeType dataSize //!< The data size of the requested buffer
      );

      //! Invoke output port productSendOut
      void productSendOut_out(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          const Fw::Buffer& buffer //!< The buffer
      );

    protected:

      // ----------------------------------------------------------------------
      // Command response
      // ----------------------------------------------------------------------

      //! Emit command response
      void cmdResponse_out(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdResponse response //!< The command response
      );

    protected:

      // ----------------------------------------------------------------------
      // Command handlers to implement
      // ----------------------------------------------------------------------

      //! Handler for command Settings
      //!
      //! Signal Generator Settings
      virtual void Settings_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          U32 Frequency,
          F32 Amplitude,
          F32 Phase,
          Ref::SignalType SigType
      ) = 0;

      //! Handler for command Toggle
      //!
      //! Toggle Signal Generator On/Off.
      virtual void Toggle_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      ) = 0;

      //! Handler for command Skip
      //!
      //! Skip next sample
      virtual void Skip_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      ) = 0;

      //! Handler for command Dp
      //!
      //! Signal Generator Settings
      virtual void Dp_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Ref::SignalGen_DpReqType reqType,
          U32 records,
          U32 priority
      ) = 0;

    protected:

      // ----------------------------------------------------------------------
      // Command handler base-class functions
      //
      // Call these functions directly to bypass the command input port
      // ----------------------------------------------------------------------

      //! Base-class handler function for command Settings
      //!
      //! Signal Generator Settings
      void Settings_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command Toggle
      //!
      //! Toggle Signal Generator On/Off.
      void Toggle_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command Skip
      //!
      //! Skip next sample
      void Skip_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command Dp
      //!
      //! Signal Generator Settings
      void Dp_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

    protected:

      // ----------------------------------------------------------------------
      // Pre-message hooks for async commands
      //
      // Each of these functions is invoked just before processing the
      // corresponding command. By default they do nothing. You can
      // override them to provide specific pre-command behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for command Settings
      virtual void Settings_preMsgHook(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      );

      //! Pre-message hook for command Toggle
      virtual void Toggle_preMsgHook(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      );

      //! Pre-message hook for command Skip
      virtual void Skip_preMsgHook(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      );

      //! Pre-message hook for command Dp
      virtual void Dp_preMsgHook(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      );

    protected:

      // ----------------------------------------------------------------------
      // Event logging functions
      // ----------------------------------------------------------------------

      //! Log event SettingsChanged
      //!
      //! Signal Generator Settings Changed
      void log_ACTIVITY_LO_SettingsChanged(
          U32 Frequency,
          F32 Amplitude,
          F32 Phase,
          Ref::SignalType SignalType
      ) const;

      //! Log event DpStarted
      void log_ACTIVITY_LO_DpStarted(U32 records) const;

      //! Log event DpComplete
      void log_ACTIVITY_LO_DpComplete(
          U32 records,
          U32 bytes
      ) const;

      //! Log event DpRecordFull
      void log_WARNING_LO_DpRecordFull(
          U32 records,
          U32 bytes
      ) const;

      //! Log event DpsNotConnected
      void log_WARNING_HI_DpsNotConnected() const;

      //! Log event DpMemoryFail
      void log_WARNING_HI_DpMemoryFail() const;

      //! Log event InSufficientDpRecords
      void log_WARNING_HI_InSufficientDpRecords() const;

      //! Log event DpMemRequested
      void log_ACTIVITY_LO_DpMemRequested(U32 size) const;

      //! Log event DpMemReceived
      void log_ACTIVITY_LO_DpMemReceived(U32 size) const;

    protected:

      // ----------------------------------------------------------------------
      // Telemetry write functions
      // ----------------------------------------------------------------------

      //! Write telemetry channel Type
      //!
      //! Type of the output signal: SINE, TRIANGLE, etc.
      void tlmWrite_Type(
          const Ref::SignalType& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel Output
      //!
      //! Single Y value of the output
      void tlmWrite_Output(
          F32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel PairOutput
      //!
      //! Single (time, value) pair of the signal
      void tlmWrite_PairOutput(
          const Ref::SignalPair& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel History
      //!
      //! Last 10 Y values of the signal
      void tlmWrite_History(
          const Ref::SignalSet& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel PairHistory
      //!
      //! Last 10 (time, value) pairs of the signal
      void tlmWrite_PairHistory(
          const Ref::SignalPairSet& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel Info
      //!
      //! Composite field of signal information, containing histories, pairs etc
      void tlmWrite_Info(
          const Ref::SignalInfo& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel DpBytes
      //!
      //! DP bytes written
      void tlmWrite_DpBytes(
          U32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel DpRecords
      //!
      //! DP records written
      void tlmWrite_DpRecords(
          U32 arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

    protected:

      // ----------------------------------------------------------------------
      // Functions for managing data products
      // ----------------------------------------------------------------------

      //! Get a buffer and use it to initialize container DataContainer
      //! \return The status of the buffer request
      Fw::Success::T dpGet_DataContainer(
          FwSizeType dataSize, //!< The data size (input)
          DpContainer& container //!< The container (output)
      ) {
        return this->dpGet(
          ContainerId::DataContainer,
          dataSize,
          ContainerPriority::DataContainer,
          container
        );
      }

      //! Request a DataContainer container
      void dpRequest_DataContainer(
          FwSizeType size //!< The buffer size (input)
      ) {
        return this->dpRequest(ContainerId::DataContainer, size);
      }

      //! Send a data product
      void dpSend(
          DpContainer& container, //!< The data product container
          Fw::Time timeTag = Fw::ZERO_TIME //!< The time tag
      );

    protected:

      // ----------------------------------------------------------------------
      // Handlers to implement for data products
      // ----------------------------------------------------------------------

      //! Receive a container of type DataContainer
      virtual void dpRecv_DataContainer_handler(
          DpContainer& container, //!< The container
          Fw::Success::T status //!< The container status
      ) = 0;

    protected:

      // ----------------------------------------------------------------------
      // Time
      // ----------------------------------------------------------------------

      //! Get the time
      //!
      //! \\return The current time
      Fw::Time getTime() const;

    protected:

      // ----------------------------------------------------------------------
      // Message dispatch functions
      // ----------------------------------------------------------------------

      //! Called in the message loop to dispatch a message from the queue
      virtual MsgDispatchStatus doDispatch();

    protected:

      // ----------------------------------------------------------------------
      // Helper functions for dispatching current messages
      // ----------------------------------------------------------------------

      //! Dispatch all current messages unless ERROR or EXIT occurs
      MsgDispatchStatus dispatchCurrentMessages();

    private:

      // ----------------------------------------------------------------------
      // Calls for messages received on special input ports
      // ----------------------------------------------------------------------

      //! Callback for port cmdIn
      static void m_p_cmdIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          Fw::CmdArgBuffer& args //!< Buffer containing arguments
      );

      //! Callback for port productRecvIn
      static void m_p_productRecvIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          const Fw::Buffer& buffer, //!< The buffer
          const Fw::Success& status //!< The status
      );

    private:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port schedIn
      static void m_p_schedIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    private:

      // ----------------------------------------------------------------------
      // Private data product handling functions
      // ----------------------------------------------------------------------

      //! Get a buffer and use it to initialize a data product container
      //! \return The status of the buffer request
      Fw::Success::T dpGet(
          ContainerId::T containerId, //!< The component-local container id (input)
          FwSizeType dataSize, //!< The data size (input)
          FwDpPriorityType priority, //!< The priority (input)
          DpContainer& container //!< The container (output)
      );

      //! Request a data product container
      void dpRequest(
          ContainerId::T containerId, //!< The component-local container id
          FwSizeType dataSize //!< The data size
      );

      //! Handler implementation for productRecvIn
      void productRecvIn_handler(
          const FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container id
          const Fw::Buffer& buffer, //!< The buffer
          const Fw::Success& status //!< The buffer status
      );

    private:

      // ----------------------------------------------------------------------
      // Special input ports
      // ----------------------------------------------------------------------

      //! Input port cmdIn
      Fw::InputCmdPort m_cmdIn_InputPort[NUM_CMDIN_INPUT_PORTS];

      //! Input port productRecvIn
      Fw::InputDpResponsePort m_productRecvIn_InputPort[NUM_PRODUCTRECVIN_INPUT_PORTS];

    private:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port schedIn
      Svc::InputSchedPort m_schedIn_InputPort[NUM_SCHEDIN_INPUT_PORTS];

    private:

      // ----------------------------------------------------------------------
      // Special output ports
      // ----------------------------------------------------------------------

      //! Output port cmdRegOut
      Fw::OutputCmdRegPort m_cmdRegOut_OutputPort[NUM_CMDREGOUT_OUTPUT_PORTS];

      //! Output port cmdResponseOut
      Fw::OutputCmdResponsePort m_cmdResponseOut_OutputPort[NUM_CMDRESPONSEOUT_OUTPUT_PORTS];

      //! Output port logOut
      Fw::OutputLogPort m_logOut_OutputPort[NUM_LOGOUT_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Output port logTextOut
      Fw::OutputLogTextPort m_logTextOut_OutputPort[NUM_LOGTEXTOUT_OUTPUT_PORTS];

#endif

      //! Output port productGetOut
      Fw::OutputDpGetPort m_productGetOut_OutputPort[NUM_PRODUCTGETOUT_OUTPUT_PORTS];

      //! Output port productRequestOut
      Fw::OutputDpRequestPort m_productRequestOut_OutputPort[NUM_PRODUCTREQUESTOUT_OUTPUT_PORTS];

      //! Output port productSendOut
      Fw::OutputDpSendPort m_productSendOut_OutputPort[NUM_PRODUCTSENDOUT_OUTPUT_PORTS];

      //! Output port timeCaller
      Fw::OutputTimePort m_timeCaller_OutputPort[NUM_TIMECALLER_OUTPUT_PORTS];

      //! Output port tlmOut
      Fw::OutputTlmPort m_tlmOut_OutputPort[NUM_TLMOUT_OUTPUT_PORTS];

  };

}

#endif
