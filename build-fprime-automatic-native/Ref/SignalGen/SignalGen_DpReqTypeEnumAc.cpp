// ======================================================================
// \title  SignalGen_DpReqTypeEnumAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for SignalGen_DpReqType enum
// ======================================================================

#include <cstring>
#include <limits>

#include "Fw/Types/Assert.hpp"
#include "Ref/SignalGen/SignalGen_DpReqTypeEnumAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  SignalGen_DpReqType& SignalGen_DpReqType ::
    operator=(const SignalGen_DpReqType& obj)
  {
    this->e = obj.e;
    return *this;
  }

  SignalGen_DpReqType& SignalGen_DpReqType ::
    operator=(T e1)
  {
    this->e = e1;
    return *this;
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const SignalGen_DpReqType& obj) {
    Fw::String s;
    obj.toString(s);
    os << s;
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  bool SignalGen_DpReqType ::
    isValid() const
  {
    return ((e >= IMMEDIATE) && (e <= ASYNC));
  }

  Fw::SerializeStatus SignalGen_DpReqType ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    const Fw::SerializeStatus status = buffer.serializeFrom(
        static_cast<SerialType>(this->e)
    );
    return status;
  }

  Fw::SerializeStatus SignalGen_DpReqType ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    SerialType es;
    Fw::SerializeStatus status = buffer.deserializeTo(es);
    if (status == Fw::FW_SERIALIZE_OK) {
      this->e = static_cast<T>(es);
      if (!this->isValid()) {
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }

#if FW_SERIALIZABLE_TO_STRING

  void SignalGen_DpReqType ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String s;
    switch (e) {
      case IMMEDIATE:
        s = "IMMEDIATE";
        break;
      case ASYNC:
        s = "ASYNC";
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIi32 ")", s.toChar(), e);
  }

#elif FW_ENABLE_TEXT_LOGGING

  void SignalGen_DpReqType ::
    toString(Fw::StringBase& sb) const
  {
    sb.format("%" PRIi32 "", e);
  }

#endif

}
