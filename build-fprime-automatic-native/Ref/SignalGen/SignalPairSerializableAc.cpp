// ======================================================================
// \title  SignalPairSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for SignalPair struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Ref/SignalGen/SignalPairSerializableAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  SignalPair ::
    SignalPair() :
      Serializable(),
      m_time(0.0f),
      m_value(0.0f)
  {

  }

  SignalPair ::
    SignalPair(
        F32 time,
        F32 value
    ) :
      Serializable(),
      m_time(time),
      m_value(value)
  {

  }

  SignalPair ::
    SignalPair(const SignalPair& obj) :
      Serializable(),
      m_time(obj.m_time),
      m_value(obj.m_value)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  SignalPair& SignalPair ::
    operator=(const SignalPair& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.m_time, obj.m_value);
    return *this;
  }

  bool SignalPair ::
    operator==(const SignalPair& obj) const
  {
    if (this == &obj) { return true; }
    return (
      (this->m_time == obj.m_time) &&
      (this->m_value == obj.m_value)
    );
  }

  bool SignalPair ::
    operator!=(const SignalPair& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const SignalPair& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus SignalPair ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serializeFrom(this->m_time);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_value);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus SignalPair ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserializeTo(this->m_time);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_value);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  FwSizeType SignalPair ::
    serializedSize() const
  {
    FwSizeType size = 0;
    size += sizeof(F32);
    size += sizeof(F32);
    return size;
  }

#if FW_SERIALIZABLE_TO_STRING

  void SignalPair ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String tmp;
    sb = "( ";

    // Format time
    sb += "time = ";
    tmp.format("%f", static_cast<F64>(this->m_time));
    sb += tmp;
    sb += ", ";

    // Format value
    sb += "value = ";
    tmp.format("%f", static_cast<F64>(this->m_value));
    sb += tmp;
    sb += " )";
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void SignalPair ::
    set(
        F32 time,
        F32 value
    )
  {
    this->m_time = time;
    this->m_value = value;
  }

  void SignalPair ::
    set_time(F32 time)
  {
    this->m_time = time;
  }

  void SignalPair ::
    set_value(F32 value)
  {
    this->m_value = value;
  }

}
