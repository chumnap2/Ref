// ======================================================================
// \title  SignalInfoSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for SignalInfo struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Ref/SignalGen/SignalInfoSerializableAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  SignalInfo ::
    SignalInfo() :
      Serializable(),
      m_type(Ref::SignalType::TRIANGLE),
      m_history(Ref::SignalSet(0.0f, 0.0f, 0.0f, 0.0f)),
      m_pairHistory(Ref::SignalPairSet(Ref::SignalPair(0.0f, 0.0f), Ref::SignalPair(0.0f, 0.0f), Ref::SignalPair(0.0f, 0.0f), Ref::SignalPair(0.0f, 0.0f)))
  {

  }

  SignalInfo ::
    SignalInfo(
        Ref::SignalType::T type,
        const Ref::SignalSet& history,
        const Ref::SignalPairSet& pairHistory
    ) :
      Serializable(),
      m_type(type),
      m_history(history),
      m_pairHistory(pairHistory)
  {

  }

  SignalInfo ::
    SignalInfo(const SignalInfo& obj) :
      Serializable(),
      m_type(obj.m_type),
      m_history(obj.m_history),
      m_pairHistory(obj.m_pairHistory)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  SignalInfo& SignalInfo ::
    operator=(const SignalInfo& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.m_type, obj.m_history, obj.m_pairHistory);
    return *this;
  }

  bool SignalInfo ::
    operator==(const SignalInfo& obj) const
  {
    if (this == &obj) { return true; }
    return (
      (this->m_type == obj.m_type) &&
      (this->m_history == obj.m_history) &&
      (this->m_pairHistory == obj.m_pairHistory)
    );
  }

  bool SignalInfo ::
    operator!=(const SignalInfo& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const SignalInfo& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus SignalInfo ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serializeFrom(this->m_type);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_history);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_pairHistory);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus SignalInfo ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserializeTo(this->m_type);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_history);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_pairHistory);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  FwSizeType SignalInfo ::
    serializedSize() const
  {
    FwSizeType size = 0;
    size += Ref::SignalType::SERIALIZED_SIZE;
    size += this->m_history.serializedSize();
    size += this->m_pairHistory.serializedSize();
    return size;
  }

#if FW_SERIALIZABLE_TO_STRING

  void SignalInfo ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String tmp;
    sb = "( ";

    // Format type
    sb += "type = ";
    this->m_type.toString(tmp);
    sb += tmp;
    sb += ", ";

    // Format history
    sb += "history = ";
    this->m_history.toString(tmp);
    sb += tmp;
    sb += ", ";

    // Format pairHistory
    sb += "pairHistory = ";
    this->m_pairHistory.toString(tmp);
    sb += tmp;
    sb += " )";
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void SignalInfo ::
    set(
        Ref::SignalType::T type,
        const Ref::SignalSet& history,
        const Ref::SignalPairSet& pairHistory
    )
  {
    this->m_type = type;
    this->m_history = history;
    this->m_pairHistory = pairHistory;
  }

  void SignalInfo ::
    set_type(Ref::SignalType::T type)
  {
    this->m_type = type;
  }

  void SignalInfo ::
    set_history(const Ref::SignalSet& history)
  {
    this->m_history = history;
  }

  void SignalInfo ::
    set_pairHistory(const Ref::SignalPairSet& pairHistory)
  {
    this->m_pairHistory = pairHistory;
  }

}
