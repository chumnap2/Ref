// ======================================================================
// \title  SendBuffComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for SendBuff component base class
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif
#include "Ref/SendBuffApp/SendBuffComponentAc.hpp"

namespace Ref {

  namespace {
    enum MsgTypeEnum {
      SENDBUFF_COMPONENT_EXIT = Fw::ActiveComponentBase::ACTIVE_COMPONENT_EXIT,
      CMD_SB_START_PKTS,
      CMD_SB_INJECT_PKT_ERROR,
      CMD_SB_GEN_FATAL,
      CMD_SB_GEN_ASSERT,
    };

    // Get the max size by constructing a union of the async input, command, and
    // internal port serialization sizes
    union BuffUnion {
      BYTE cmdPortSize[Fw::InputCmdPort::SERIALIZED_SIZE];
    };

    // Define a message buffer class large enough to handle all the
    // asynchronous inputs to the component
    class ComponentIpcSerializableBuffer :
      public Fw::SerializeBufferBase
    {

      public:

        enum {
          // Offset into data in buffer: Size of message ID and port number
          DATA_OFFSET = sizeof(FwEnumStoreType) + sizeof(FwIndexType),
          // Max data size
          MAX_DATA_SIZE = sizeof(BuffUnion),
          // Max message size: Size of message id + size of port + max data size
          SERIALIZATION_SIZE = DATA_OFFSET + MAX_DATA_SIZE
        };

        Fw::Serializable::SizeType getBuffCapacity() const {
          return sizeof(m_buff);
        }

        U8* getBuffAddr() {
          return m_buff;
        }

        const U8* getBuffAddr() const {
          return m_buff;
        }

      private:
        // Should be the max of all the input ports serialized sizes...
        U8 m_buff[SERIALIZATION_SIZE];

    };
  }

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    init(
        FwSizeType queueDepth,
        FwEnumStoreType instance
    )
  {
    // Initialize base class
    Fw::QueuedComponentBase::init(instance);

    // Connect input port CmdDisp
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_CmdDisp_InputPorts());
      port++
    ) {
      this->m_CmdDisp_InputPort[port].init();
      this->m_CmdDisp_InputPort[port].addCallComp(
        this,
        m_p_CmdDisp_in
      );
      this->m_CmdDisp_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_CmdDisp_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_CmdDisp_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port SchedIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_SchedIn_InputPorts());
      port++
    ) {
      this->m_SchedIn_InputPort[port].init();
      this->m_SchedIn_InputPort[port].addCallComp(
        this,
        m_p_SchedIn_in
      );
      this->m_SchedIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_SchedIn_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_SchedIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port CmdReg
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_CmdReg_OutputPorts());
      port++
    ) {
      this->m_CmdReg_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_CmdReg_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_CmdReg_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port CmdStatus
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_CmdStatus_OutputPorts());
      port++
    ) {
      this->m_CmdStatus_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_CmdStatus_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_CmdStatus_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port Log
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Log_OutputPorts());
      port++
    ) {
      this->m_Log_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Log_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Log_OutputPort[port].setObjName(portName.toChar());
#endif
    }

#if FW_ENABLE_TEXT_LOGGING == 1
    // Connect output port LogText
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_LogText_OutputPorts());
      port++
    ) {
      this->m_LogText_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_LogText_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_LogText_OutputPort[port].setObjName(portName.toChar());
#endif
    }
#endif

    // Connect output port ParamGet
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_ParamGet_OutputPorts());
      port++
    ) {
      this->m_ParamGet_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_ParamGet_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_ParamGet_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port ParamSet
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_ParamSet_OutputPorts());
      port++
    ) {
      this->m_ParamSet_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_ParamSet_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_ParamSet_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port Time
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Time_OutputPorts());
      port++
    ) {
      this->m_Time_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Time_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Time_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port Tlm
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Tlm_OutputPorts());
      port++
    ) {
      this->m_Tlm_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Tlm_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Tlm_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port Data
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_Data_OutputPorts());
      port++
    ) {
      this->m_Data_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_Data_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_Data_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Create the queue
    Os::Queue::Status qStat = this->createQueue(
      queueDepth,
      static_cast<FwSizeType>(ComponentIpcSerializableBuffer::SERIALIZATION_SIZE)
    );
    FW_ASSERT(
      Os::Queue::Status::OP_OK == qStat,
      static_cast<FwAssertArgType>(qStat)
    );
  }

  // ----------------------------------------------------------------------
  // Getters for special input ports
  // ----------------------------------------------------------------------

  Fw::InputCmdPort* SendBuffComponentBase ::
    get_CmdDisp_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdDisp_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_CmdDisp_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Svc::InputSchedPort* SendBuffComponentBase ::
    get_SchedIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_SchedIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_SchedIn_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect input ports to special output ports
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    set_CmdReg_OutputPort(
        FwIndexType portNum,
        Fw::InputCmdRegPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdReg_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_CmdReg_OutputPort[portNum].addCallPort(port);
  }

  void SendBuffComponentBase ::
    set_CmdStatus_OutputPort(
        FwIndexType portNum,
        Fw::InputCmdResponsePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdStatus_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_CmdStatus_OutputPort[portNum].addCallPort(port);
  }

  void SendBuffComponentBase ::
    set_Log_OutputPort(
        FwIndexType portNum,
        Fw::InputLogPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Log_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Log_OutputPort[portNum].addCallPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void SendBuffComponentBase ::
    set_LogText_OutputPort(
        FwIndexType portNum,
        Fw::InputLogTextPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_LogText_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_LogText_OutputPort[portNum].addCallPort(port);
  }

#endif

  void SendBuffComponentBase ::
    set_ParamGet_OutputPort(
        FwIndexType portNum,
        Fw::InputPrmGetPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_ParamGet_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_ParamGet_OutputPort[portNum].addCallPort(port);
  }

  void SendBuffComponentBase ::
    set_ParamSet_OutputPort(
        FwIndexType portNum,
        Fw::InputPrmSetPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_ParamSet_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_ParamSet_OutputPort[portNum].addCallPort(port);
  }

  void SendBuffComponentBase ::
    set_Time_OutputPort(
        FwIndexType portNum,
        Fw::InputTimePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Time_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Time_OutputPort[portNum].addCallPort(port);
  }

  void SendBuffComponentBase ::
    set_Tlm_OutputPort(
        FwIndexType portNum,
        Fw::InputTlmPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Tlm_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Tlm_OutputPort[portNum].addCallPort(port);
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    set_Data_OutputPort(
        FwIndexType portNum,
        Drv::InputDataBufferPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Data_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Data_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to special output ports
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    set_CmdReg_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdReg_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_CmdReg_OutputPort[portNum].registerSerialPort(port);
  }

  void SendBuffComponentBase ::
    set_CmdStatus_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdStatus_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_CmdStatus_OutputPort[portNum].registerSerialPort(port);
  }

  void SendBuffComponentBase ::
    set_Log_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Log_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Log_OutputPort[portNum].registerSerialPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void SendBuffComponentBase ::
    set_LogText_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_LogText_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_LogText_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  void SendBuffComponentBase ::
    set_ParamSet_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_ParamSet_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_ParamSet_OutputPort[portNum].registerSerialPort(port);
  }

  void SendBuffComponentBase ::
    set_Time_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Time_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Time_OutputPort[portNum].registerSerialPort(port);
  }

  void SendBuffComponentBase ::
    set_Tlm_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Tlm_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Tlm_OutputPort[portNum].registerSerialPort(port);
  }

#endif

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to typed output ports
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    set_Data_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Data_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_Data_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Command registration
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    regCommands()
  {
    FW_ASSERT(this->m_CmdReg_OutputPort[0].isConnected());

    this->m_CmdReg_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_SB_START_PKTS
    );

    this->m_CmdReg_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_SB_INJECT_PKT_ERROR
    );

    this->m_CmdReg_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_SB_GEN_FATAL
    );

    this->m_CmdReg_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_SB_GEN_ASSERT
    );

    this->m_CmdReg_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_PARAMETER3_SET
    );

    this->m_CmdReg_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_PARAMETER3_SAVE
    );

    this->m_CmdReg_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_PARAMETER4_SET
    );

    this->m_CmdReg_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_PARAMETER4_SAVE
    );
  }

  // ----------------------------------------------------------------------
  // Parameter loading
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    loadParameters()
  {
    Fw::ParamBuffer _buff;
    Fw::SerializeStatus _stat = Fw::FW_SERIALIZE_OK;
    const FwPrmIdType _baseId = static_cast<FwPrmIdType>(this->getIdBase());
    FW_ASSERT(this->m_ParamGet_OutputPort[0].isConnected());

    FwPrmIdType _id{};

    _id = _baseId + PARAMID_PARAMETER3;

    // Get parameter parameter3
    this->m_param_parameter3_valid =
      this->m_ParamGet_OutputPort[0].invoke(
        _id,
        _buff
      );

    // Deserialize value
    this->m_paramLock.lock();

    // If there was a deserialization issue, mark it invalid
    if (this->m_param_parameter3_valid == Fw::ParamValid::VALID) {
      _stat = _buff.deserializeTo(this->m_parameter3);
      if (_stat != Fw::FW_SERIALIZE_OK) {
        this->m_param_parameter3_valid = Fw::ParamValid::DEFAULT;
        // Set default value
        this->m_parameter3 = 12;
      }
    }
    else {
      // Set default value
      this->m_param_parameter3_valid = Fw::ParamValid::DEFAULT;
      this->m_parameter3 = 12;
    }

    this->m_paramLock.unLock();

    _id = _baseId + PARAMID_PARAMETER4;

    // Get parameter parameter4
    this->m_param_parameter4_valid =
      this->m_ParamGet_OutputPort[0].invoke(
        _id,
        _buff
      );

    // Deserialize value
    this->m_paramLock.lock();

    // If there was a deserialization issue, mark it invalid
    if (this->m_param_parameter4_valid == Fw::ParamValid::VALID) {
      _stat = _buff.deserializeTo(this->m_parameter4);
      if (_stat != Fw::FW_SERIALIZE_OK) {
        this->m_param_parameter4_valid = Fw::ParamValid::DEFAULT;
        // Set default value
        this->m_parameter4 = 13.14f;
      }
    }
    else {
      // Set default value
      this->m_param_parameter4_valid = Fw::ParamValid::DEFAULT;
      this->m_parameter4 = 13.14f;
    }

    this->m_paramLock.unLock();

    // Call notifier
    this->parametersLoaded();
  }

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  SendBuffComponentBase ::
    SendBuffComponentBase(const char* compName) :
      Fw::QueuedComponentBase(compName)
  {
    // Write telemetry channel NumErrorsInjected
    this->m_first_update_NumErrorsInjected = true;
    this->m_last_NumErrorsInjected = 0;

    // Write telemetry channel Parameter3
    this->m_first_update_Parameter3 = true;
    this->m_last_Parameter3 = 0;

    // Write telemetry channel Parameter4
    this->m_first_update_Parameter4 = true;
    this->m_last_Parameter4 = 0;

    this->m_param_parameter3_valid = Fw::ParamValid::UNINIT;
    this->m_param_parameter4_valid = Fw::ParamValid::UNINIT;
  }

  SendBuffComponentBase ::
    ~SendBuffComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special input ports
  // ----------------------------------------------------------------------

  FwIndexType SendBuffComponentBase ::
    getNum_CmdDisp_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_CmdDisp_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType SendBuffComponentBase ::
    getNum_SchedIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_SchedIn_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special output ports
  // ----------------------------------------------------------------------

  FwIndexType SendBuffComponentBase ::
    getNum_CmdReg_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_CmdReg_OutputPort));
  }

  FwIndexType SendBuffComponentBase ::
    getNum_CmdStatus_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_CmdStatus_OutputPort));
  }

  FwIndexType SendBuffComponentBase ::
    getNum_Log_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Log_OutputPort));
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  FwIndexType SendBuffComponentBase ::
    getNum_LogText_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_LogText_OutputPort));
  }

#endif

  FwIndexType SendBuffComponentBase ::
    getNum_ParamGet_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_ParamGet_OutputPort));
  }

  FwIndexType SendBuffComponentBase ::
    getNum_ParamSet_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_ParamSet_OutputPort));
  }

  FwIndexType SendBuffComponentBase ::
    getNum_Time_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Time_OutputPort));
  }

  FwIndexType SendBuffComponentBase ::
    getNum_Tlm_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Tlm_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  FwIndexType SendBuffComponentBase ::
    getNum_Data_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_Data_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for special output ports
  // ----------------------------------------------------------------------

  bool SendBuffComponentBase ::
    isConnected_CmdReg_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdReg_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_CmdReg_OutputPort[portNum].isConnected();
  }

  bool SendBuffComponentBase ::
    isConnected_CmdStatus_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_CmdStatus_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_CmdStatus_OutputPort[portNum].isConnected();
  }

  bool SendBuffComponentBase ::
    isConnected_Log_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Log_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Log_OutputPort[portNum].isConnected();
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  bool SendBuffComponentBase ::
    isConnected_LogText_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_LogText_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_LogText_OutputPort[portNum].isConnected();
  }

#endif

  bool SendBuffComponentBase ::
    isConnected_ParamGet_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_ParamGet_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_ParamGet_OutputPort[portNum].isConnected();
  }

  bool SendBuffComponentBase ::
    isConnected_ParamSet_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_ParamSet_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_ParamSet_OutputPort[portNum].isConnected();
  }

  bool SendBuffComponentBase ::
    isConnected_Time_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Time_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Time_OutputPort[portNum].isConnected();
  }

  bool SendBuffComponentBase ::
    isConnected_Tlm_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Tlm_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Tlm_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool SendBuffComponentBase ::
    isConnected_Data_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Data_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_Data_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    SchedIn_handlerBase(
        FwIndexType portNum,
        U32 context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_SchedIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->SchedIn_handler(
      portNum,
      context
    );
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    Data_out(
        FwIndexType portNum,
        Drv::DataBuffer& buff
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_Data_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_Data_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_Data_OutputPort[portNum].invoke(
      buff
    );
  }

  // ----------------------------------------------------------------------
  // Command response
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    cmdResponse_out(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdResponse response
    )
  {
    FW_ASSERT(this->m_CmdStatus_OutputPort[0].isConnected());
    this->m_CmdStatus_OutputPort[0].invoke(opCode, cmdSeq, response);
  }

  // ----------------------------------------------------------------------
  // Command handler base-class functions
  //
  // Call these functions directly to bypass the command input port
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    SB_START_PKTS_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Call pre-message hook
    this->SB_START_PKTS_preMsgHook(opCode,cmdSeq);

    // Defer deserializing arguments to the message dispatcher
    // to avoid deserializing and reserializing just for IPC
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize for IPC
    _status = msg.serializeFrom(static_cast<FwEnumStoreType>(CMD_SB_START_PKTS));
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Fake port number to make message dequeue work
    FwIndexType port = 0;

    _status = msg.serializeFrom(port);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(opCode);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(cmdSeq);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(args);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  void SendBuffComponentBase ::
    SB_INJECT_PKT_ERROR_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Call pre-message hook
    this->SB_INJECT_PKT_ERROR_preMsgHook(opCode,cmdSeq);

    // Defer deserializing arguments to the message dispatcher
    // to avoid deserializing and reserializing just for IPC
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize for IPC
    _status = msg.serializeFrom(static_cast<FwEnumStoreType>(CMD_SB_INJECT_PKT_ERROR));
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Fake port number to make message dequeue work
    FwIndexType port = 0;

    _status = msg.serializeFrom(port);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(opCode);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(cmdSeq);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(args);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  void SendBuffComponentBase ::
    SB_GEN_FATAL_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Call pre-message hook
    this->SB_GEN_FATAL_preMsgHook(opCode,cmdSeq);

    // Defer deserializing arguments to the message dispatcher
    // to avoid deserializing and reserializing just for IPC
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize for IPC
    _status = msg.serializeFrom(static_cast<FwEnumStoreType>(CMD_SB_GEN_FATAL));
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Fake port number to make message dequeue work
    FwIndexType port = 0;

    _status = msg.serializeFrom(port);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(opCode);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(cmdSeq);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(args);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  void SendBuffComponentBase ::
    SB_GEN_ASSERT_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Call pre-message hook
    this->SB_GEN_ASSERT_preMsgHook(opCode,cmdSeq);

    // Defer deserializing arguments to the message dispatcher
    // to avoid deserializing and reserializing just for IPC
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize for IPC
    _status = msg.serializeFrom(static_cast<FwEnumStoreType>(CMD_SB_GEN_ASSERT));
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Fake port number to make message dequeue work
    FwIndexType port = 0;

    _status = msg.serializeFrom(port);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(opCode);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(cmdSeq);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(args);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  // ----------------------------------------------------------------------
  // Pre-message hooks for async commands
  //
  // Each of these functions is invoked just before processing the
  // corresponding command. By default they do nothing. You can
  // override them to provide specific pre-command behavior.
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    SB_START_PKTS_preMsgHook(
        FwOpcodeType opCode,
        U32 cmdSeq
    )
  {
    // Defaults to no-op; can be overridden
    (void) opCode;
    (void) cmdSeq;
  }

  void SendBuffComponentBase ::
    SB_INJECT_PKT_ERROR_preMsgHook(
        FwOpcodeType opCode,
        U32 cmdSeq
    )
  {
    // Defaults to no-op; can be overridden
    (void) opCode;
    (void) cmdSeq;
  }

  void SendBuffComponentBase ::
    SB_GEN_FATAL_preMsgHook(
        FwOpcodeType opCode,
        U32 cmdSeq
    )
  {
    // Defaults to no-op; can be overridden
    (void) opCode;
    (void) cmdSeq;
  }

  void SendBuffComponentBase ::
    SB_GEN_ASSERT_preMsgHook(
        FwOpcodeType opCode,
        U32 cmdSeq
    )
  {
    // Defaults to no-op; can be overridden
    (void) opCode;
    (void) cmdSeq;
  }

  // ----------------------------------------------------------------------
  // Event logging functions
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    log_ACTIVITY_HI_FirstPacketSent(U32 id) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_Time_OutputPort[0].isConnected()) {
      this->m_Time_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_FIRSTPACKETSENT;

    // Emit the event on the log port
    if (this->m_Log_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(id);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_Log_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_LogText_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: First packet ID %" PRIu32 " received";
#else
      const char* _formatString =
        "%s: First packet ID %" PRIu32 " received";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "FirstPacketSent ",
        id
      );

      this->m_LogText_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logString
      );
    }
#endif
  }

  void SendBuffComponentBase ::
    log_WARNING_HI_PacketErrorInserted(U32 id) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_Time_OutputPort[0].isConnected()) {
      this->m_Time_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_PACKETERRORINSERTED;

    // Emit the event on the log port
    if (this->m_Log_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(id);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_Log_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_LogText_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Inserted error in packet ID %" PRIu32 "";
#else
      const char* _formatString =
        "%s: Inserted error in packet ID %" PRIu32 "";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "PacketErrorInserted ",
        id
      );

      this->m_LogText_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logString
      );
    }
#endif
  }

  void SendBuffComponentBase ::
    log_ACTIVITY_LO_BuffSendParameterUpdated(U32 id) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_Time_OutputPort[0].isConnected()) {
      this->m_Time_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_BUFFSENDPARAMETERUPDATED;

    // Emit the event on the log port
    if (this->m_Log_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(id);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_Log_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_LogText_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: BuffSend Parameter %" PRIu32 " was updated";
#else
      const char* _formatString =
        "%s: BuffSend Parameter %" PRIu32 " was updated";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "BuffSendParameterUpdated ",
        id
      );

      this->m_LogText_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logString
      );
    }
#endif
  }

  void SendBuffComponentBase ::
    log_FATAL_SendBuffFatal(
        U32 arg1,
        U32 arg2,
        U32 arg3
    ) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_Time_OutputPort[0].isConnected()) {
      this->m_Time_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_SENDBUFFFATAL;

    // Emit the event on the log port
    if (this->m_Log_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(3 + 1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      // For FATAL, add stack size of 4 and a dummy entry. No support for stacks yet.
      _status = _logBuff.serializeFrom(static_cast<U8>(4));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      _status = _logBuff.serializeFrom(static_cast<U32>(0));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(arg1);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(arg2);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(arg3);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_Log_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::FATAL,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_LogText_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Test Fatal: %" PRIu32 " %" PRIu32 " %" PRIu32 "";
#else
      const char* _formatString =
        "%s: Test Fatal: %" PRIu32 " %" PRIu32 " %" PRIu32 "";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "SendBuffFatal ",
        arg1,
        arg2,
        arg3
      );

      this->m_LogText_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::FATAL,
        _logString
      );
    }
#endif
  }

  // ----------------------------------------------------------------------
  // Telemetry write functions
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    tlmWrite_PacketsSent(
        U64 arg,
        Fw::Time _tlmTime
    ) const
  {
    if (this->m_Tlm_OutputPort[0].isConnected()) {
      if (
        this->m_Time_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_Time_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serializeFrom(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_PACKETSSENT;

      this->m_Tlm_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void SendBuffComponentBase ::
    tlmWrite_NumErrorsInjected(
        U32 arg,
        Fw::Time _tlmTime
    )
  {
    // Check to see if it is the first time
    if (not this->m_first_update_NumErrorsInjected) {
      // Check to see if value has changed. If not, don't write it.
      if (arg == this->m_last_NumErrorsInjected) {
        return;
      }
      else {
        this->m_last_NumErrorsInjected = arg;
      }
    }
    else {
      this->m_first_update_NumErrorsInjected = false;
      this->m_last_NumErrorsInjected = arg;
    }

    if (this->m_Tlm_OutputPort[0].isConnected()) {
      if (
        this->m_Time_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_Time_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serializeFrom(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_NUMERRORSINJECTED;

      this->m_Tlm_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void SendBuffComponentBase ::
    tlmWrite_Parameter3(
        U8 arg,
        Fw::Time _tlmTime
    )
  {
    // Check to see if it is the first time
    if (not this->m_first_update_Parameter3) {
      // Check to see if value has changed. If not, don't write it.
      if (arg == this->m_last_Parameter3) {
        return;
      }
      else {
        this->m_last_Parameter3 = arg;
      }
    }
    else {
      this->m_first_update_Parameter3 = false;
      this->m_last_Parameter3 = arg;
    }

    if (this->m_Tlm_OutputPort[0].isConnected()) {
      if (
        this->m_Time_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_Time_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serializeFrom(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_PARAMETER3;

      this->m_Tlm_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void SendBuffComponentBase ::
    tlmWrite_Parameter4(
        F32 arg,
        Fw::Time _tlmTime
    )
  {
    // Check to see if it is the first time
    if (not this->m_first_update_Parameter4) {
      // Check to see if value has changed. If not, don't write it.
      if (arg == this->m_last_Parameter4) {
        return;
      }
      else {
        this->m_last_Parameter4 = arg;
      }
    }
    else {
      this->m_first_update_Parameter4 = false;
      this->m_last_Parameter4 = arg;
    }

    if (this->m_Tlm_OutputPort[0].isConnected()) {
      if (
        this->m_Time_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_Time_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serializeFrom(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_PARAMETER4;

      this->m_Tlm_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  void SendBuffComponentBase ::
    tlmWrite_SendState(
        const Ref::SendBuff_ActiveState& arg,
        Fw::Time _tlmTime
    ) const
  {
    if (this->m_Tlm_OutputPort[0].isConnected()) {
      if (
        this->m_Time_OutputPort[0].isConnected() &&
        (_tlmTime ==  Fw::ZERO_TIME)
      ) {
        this->m_Time_OutputPort[0].invoke(_tlmTime);
      }

      Fw::TlmBuffer _tlmBuff;
      Fw::SerializeStatus _stat = _tlmBuff.serializeFrom(arg);
      FW_ASSERT(
        _stat == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_stat)
      );

      FwChanIdType _id;

      _id = this->getIdBase() + CHANNELID_SENDSTATE;

      this->m_Tlm_OutputPort[0].invoke(
        _id,
        _tlmTime,
        _tlmBuff
      );
    }
  }

  // ----------------------------------------------------------------------
  // Parameter update hook
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    parameterUpdated(FwPrmIdType id)
  {
    // Do nothing by default
  }

  void SendBuffComponentBase ::
    parametersLoaded()
  {
    // Do nothing by default
  }

  // ----------------------------------------------------------------------
  // Parameter get functions
  // ----------------------------------------------------------------------

  U8 SendBuffComponentBase ::
    paramGet_parameter3(Fw::ParamValid& valid)
  {
    U8 _local{};
    this->m_paramLock.lock();
    valid = this->m_param_parameter3_valid;
    _local = this->m_parameter3;
    this->m_paramLock.unLock();
    return _local;
  }

  F32 SendBuffComponentBase ::
    paramGet_parameter4(Fw::ParamValid& valid)
  {
    F32 _local{};
    this->m_paramLock.lock();
    valid = this->m_param_parameter4_valid;
    _local = this->m_parameter4;
    this->m_paramLock.unLock();
    return _local;
  }

  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time SendBuffComponentBase ::
    getTime() const
  {
    if (this->m_Time_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_Time_OutputPort[0].invoke(_time);
      return _time;
    }
    else {
      return Fw::Time(TimeBase::TB_NONE, 0, 0);
    }
  }

  // ----------------------------------------------------------------------
  // Message dispatch functions
  // ----------------------------------------------------------------------

  Fw::QueuedComponentBase::MsgDispatchStatus SendBuffComponentBase ::
    doDispatch()
  {
    ComponentIpcSerializableBuffer _msg;
    FwQueuePriorityType _priority = 0;

    Os::Queue::Status _msgStatus = this->m_queue.receive(
      _msg,
      Os::Queue::NONBLOCKING,
      _priority
    );
    if (Os::Queue::Status::EMPTY == _msgStatus) {
      return Fw::QueuedComponentBase::MSG_DISPATCH_EMPTY;
    }
    else {
      FW_ASSERT(
        _msgStatus == Os::Queue::OP_OK,
        static_cast<FwAssertArgType>(_msgStatus)
      );
    }

    // Reset to beginning of buffer
    _msg.resetDeser();

    FwEnumStoreType _desMsg = 0;
    Fw::SerializeStatus _deserStatus = _msg.deserializeTo(_desMsg);
    FW_ASSERT(
      _deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_deserStatus)
    );

    MsgTypeEnum _msgType = static_cast<MsgTypeEnum>(_desMsg);

    if (_msgType == SENDBUFF_COMPONENT_EXIT) {
      return MSG_DISPATCH_EXIT;
    }

    FwIndexType portNum = 0;
    _deserStatus = _msg.deserializeTo(portNum);
    FW_ASSERT(
      _deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_deserStatus)
    );

    switch (_msgType) {
      // Handle command SB_START_PKTS
      case CMD_SB_START_PKTS: {
        // Deserialize opcode
        FwOpcodeType _opCode = 0;
        _deserStatus = _msg.deserializeTo(_opCode);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Deserialize command sequence
        U32 _cmdSeq = 0;
        _deserStatus = _msg.deserializeTo(_cmdSeq);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Deserialize command argument buffer
        Fw::CmdArgBuffer args;
        _deserStatus = _msg.deserializeTo(args);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Reset buffer
        args.resetDeser();

        // Make sure there was no data left over.
        // That means the argument buffer size was incorrect.
#if FW_CMD_CHECK_RESIDUAL
        if (args.getBuffLeft() != 0) {
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
            this->cmdResponse_out(_opCode, _cmdSeq, Fw::CmdResponse::FORMAT_ERROR);
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }
#endif

        // Call handler function
        this->SB_START_PKTS_cmdHandler(_opCode, _cmdSeq);

        break;
      }

      // Handle command SB_INJECT_PKT_ERROR
      case CMD_SB_INJECT_PKT_ERROR: {
        // Deserialize opcode
        FwOpcodeType _opCode = 0;
        _deserStatus = _msg.deserializeTo(_opCode);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Deserialize command sequence
        U32 _cmdSeq = 0;
        _deserStatus = _msg.deserializeTo(_cmdSeq);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Deserialize command argument buffer
        Fw::CmdArgBuffer args;
        _deserStatus = _msg.deserializeTo(args);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Reset buffer
        args.resetDeser();

        // Make sure there was no data left over.
        // That means the argument buffer size was incorrect.
#if FW_CMD_CHECK_RESIDUAL
        if (args.getBuffLeft() != 0) {
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
            this->cmdResponse_out(_opCode, _cmdSeq, Fw::CmdResponse::FORMAT_ERROR);
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }
#endif

        // Call handler function
        this->SB_INJECT_PKT_ERROR_cmdHandler(_opCode, _cmdSeq);

        break;
      }

      // Handle command SB_GEN_FATAL
      case CMD_SB_GEN_FATAL: {
        // Deserialize opcode
        FwOpcodeType _opCode = 0;
        _deserStatus = _msg.deserializeTo(_opCode);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Deserialize command sequence
        U32 _cmdSeq = 0;
        _deserStatus = _msg.deserializeTo(_cmdSeq);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Deserialize command argument buffer
        Fw::CmdArgBuffer args;
        _deserStatus = _msg.deserializeTo(args);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Reset buffer
        args.resetDeser();

        // Deserialize argument arg1
        U32 arg1;
        _deserStatus = args.deserializeTo(arg1);
        if (_deserStatus != Fw::FW_SERIALIZE_OK) {
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
            this->cmdResponse_out(
                _opCode,
                _cmdSeq,
                Fw::CmdResponse::FORMAT_ERROR
            );
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }

        // Deserialize argument arg2
        U32 arg2;
        _deserStatus = args.deserializeTo(arg2);
        if (_deserStatus != Fw::FW_SERIALIZE_OK) {
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
            this->cmdResponse_out(
                _opCode,
                _cmdSeq,
                Fw::CmdResponse::FORMAT_ERROR
            );
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }

        // Deserialize argument arg3
        U32 arg3;
        _deserStatus = args.deserializeTo(arg3);
        if (_deserStatus != Fw::FW_SERIALIZE_OK) {
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
            this->cmdResponse_out(
                _opCode,
                _cmdSeq,
                Fw::CmdResponse::FORMAT_ERROR
            );
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }

        // Make sure there was no data left over.
        // That means the argument buffer size was incorrect.
#if FW_CMD_CHECK_RESIDUAL
        if (args.getBuffLeft() != 0) {
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
            this->cmdResponse_out(_opCode, _cmdSeq, Fw::CmdResponse::FORMAT_ERROR);
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }
#endif

        // Call handler function
        this->SB_GEN_FATAL_cmdHandler(
          _opCode, _cmdSeq,
          arg1,
          arg2,
          arg3
        );

        break;
      }

      // Handle command SB_GEN_ASSERT
      case CMD_SB_GEN_ASSERT: {
        // Deserialize opcode
        FwOpcodeType _opCode = 0;
        _deserStatus = _msg.deserializeTo(_opCode);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Deserialize command sequence
        U32 _cmdSeq = 0;
        _deserStatus = _msg.deserializeTo(_cmdSeq);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Deserialize command argument buffer
        Fw::CmdArgBuffer args;
        _deserStatus = _msg.deserializeTo(args);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Reset buffer
        args.resetDeser();

        // Deserialize argument arg1
        U32 arg1;
        _deserStatus = args.deserializeTo(arg1);
        if (_deserStatus != Fw::FW_SERIALIZE_OK) {
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
            this->cmdResponse_out(
                _opCode,
                _cmdSeq,
                Fw::CmdResponse::FORMAT_ERROR
            );
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }

        // Deserialize argument arg2
        U32 arg2;
        _deserStatus = args.deserializeTo(arg2);
        if (_deserStatus != Fw::FW_SERIALIZE_OK) {
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
            this->cmdResponse_out(
                _opCode,
                _cmdSeq,
                Fw::CmdResponse::FORMAT_ERROR
            );
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }

        // Deserialize argument arg3
        U32 arg3;
        _deserStatus = args.deserializeTo(arg3);
        if (_deserStatus != Fw::FW_SERIALIZE_OK) {
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
            this->cmdResponse_out(
                _opCode,
                _cmdSeq,
                Fw::CmdResponse::FORMAT_ERROR
            );
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }

        // Deserialize argument arg4
        U32 arg4;
        _deserStatus = args.deserializeTo(arg4);
        if (_deserStatus != Fw::FW_SERIALIZE_OK) {
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
            this->cmdResponse_out(
                _opCode,
                _cmdSeq,
                Fw::CmdResponse::FORMAT_ERROR
            );
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }

        // Deserialize argument arg5
        U32 arg5;
        _deserStatus = args.deserializeTo(arg5);
        if (_deserStatus != Fw::FW_SERIALIZE_OK) {
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
            this->cmdResponse_out(
                _opCode,
                _cmdSeq,
                Fw::CmdResponse::FORMAT_ERROR
            );
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }

        // Deserialize argument arg6
        U32 arg6;
        _deserStatus = args.deserializeTo(arg6);
        if (_deserStatus != Fw::FW_SERIALIZE_OK) {
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
            this->cmdResponse_out(
                _opCode,
                _cmdSeq,
                Fw::CmdResponse::FORMAT_ERROR
            );
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }

        // Make sure there was no data left over.
        // That means the argument buffer size was incorrect.
#if FW_CMD_CHECK_RESIDUAL
        if (args.getBuffLeft() != 0) {
          if (this->m_CmdStatus_OutputPort[0].isConnected()) {
            this->cmdResponse_out(_opCode, _cmdSeq, Fw::CmdResponse::FORMAT_ERROR);
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }
#endif

        // Call handler function
        this->SB_GEN_ASSERT_cmdHandler(
          _opCode, _cmdSeq,
          arg1,
          arg2,
          arg3,
          arg4,
          arg5,
          arg6
        );

        break;
      }

      default:
        return MSG_DISPATCH_ERROR;
    }

    return MSG_DISPATCH_OK;
  }

  // ----------------------------------------------------------------------
  // Helper functions for dispatching current messages
  // ----------------------------------------------------------------------

  Fw::QueuedComponentBase::MsgDispatchStatus SendBuffComponentBase ::
    dispatchCurrentMessages()
  {
    // Dispatch all current messages unless ERROR or EXIT occur
    const FwSizeType currentMessageCount = this->m_queue.getMessagesAvailable();
    MsgDispatchStatus messageStatus = MsgDispatchStatus::MSG_DISPATCH_EMPTY;
    for (FwSizeType i = 0; i < currentMessageCount; i++) {
      messageStatus = this->doDispatch();
      if (messageStatus != QueuedComponentBase::MSG_DISPATCH_OK) {
        break;
      }
    }
    return messageStatus;
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on special input ports
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    m_p_CmdDisp_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    FW_ASSERT(callComp);
    SendBuffComponentBase* compPtr = static_cast<SendBuffComponentBase*>(callComp);

    const U32 idBase = callComp->getIdBase();
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));

    // Select base class function based on opcode
    switch (opCode - idBase) {
      case OPCODE_SB_START_PKTS: {
        compPtr->SB_START_PKTS_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_SB_INJECT_PKT_ERROR: {
        compPtr->SB_INJECT_PKT_ERROR_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_SB_GEN_FATAL: {
        compPtr->SB_GEN_FATAL_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_SB_GEN_ASSERT: {
        compPtr->SB_GEN_ASSERT_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_PARAMETER3_SET: {
        Fw::CmdResponse _cstat = compPtr->paramSet_parameter3(args);
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_PARAMETER3_SAVE: {
        Fw::CmdResponse _cstat = compPtr->paramSave_parameter3();
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_PARAMETER4_SET: {
        Fw::CmdResponse _cstat = compPtr->paramSet_parameter4(args);
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }

      case OPCODE_PARAMETER4_SAVE: {
        Fw::CmdResponse _cstat = compPtr->paramSave_parameter4();
        compPtr->cmdResponse_out(
          opCode,
          cmdSeq,
          _cstat
        );
        break;
      }
    }
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void SendBuffComponentBase ::
    m_p_SchedIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 context
    )
  {
    FW_ASSERT(callComp);
    SendBuffComponentBase* compPtr = static_cast<SendBuffComponentBase*>(callComp);
    compPtr->SchedIn_handlerBase(
      portNum,
      context
    );
  }

  // ----------------------------------------------------------------------
  // Parameter set functions
  // ----------------------------------------------------------------------

  Fw::CmdResponse SendBuffComponentBase ::
    paramSet_parameter3(Fw::SerializeBufferBase& val)
  {
    U8 _localVal{};
    const Fw::SerializeStatus _stat = val.deserializeTo(_localVal);
    if (_stat != Fw::FW_SERIALIZE_OK) {
      return Fw::CmdResponse::VALIDATION_ERROR;
    }

    // Assign value only if successfully deserialized
    this->m_paramLock.lock();
    this->m_parameter3 = _localVal;
    this->m_param_parameter3_valid = Fw::ParamValid::VALID;
    this->m_paramLock.unLock();

    // Call notifier
    this->parameterUpdated(PARAMID_PARAMETER3);
    return Fw::CmdResponse::OK;
  }

  Fw::CmdResponse SendBuffComponentBase ::
    paramSet_parameter4(Fw::SerializeBufferBase& val)
  {
    F32 _localVal{};
    const Fw::SerializeStatus _stat = val.deserializeTo(_localVal);
    if (_stat != Fw::FW_SERIALIZE_OK) {
      return Fw::CmdResponse::VALIDATION_ERROR;
    }

    // Assign value only if successfully deserialized
    this->m_paramLock.lock();
    this->m_parameter4 = _localVal;
    this->m_param_parameter4_valid = Fw::ParamValid::VALID;
    this->m_paramLock.unLock();

    // Call notifier
    this->parameterUpdated(PARAMID_PARAMETER4);
    return Fw::CmdResponse::OK;
  }

  // ----------------------------------------------------------------------
  // Parameter save functions
  // ----------------------------------------------------------------------

  Fw::CmdResponse SendBuffComponentBase ::
    paramSave_parameter3()
  {
    Fw::ParamBuffer _saveBuff;
    FwPrmIdType _id;
    Fw::SerializeStatus _stat;
    if (this->m_ParamSet_OutputPort[0].isConnected()) {
      this->m_paramLock.lock();

      _stat = _saveBuff.serializeFrom(m_parameter3);

      this->m_paramLock.unLock();
      if (_stat != Fw::FW_SERIALIZE_OK) {
        return Fw::CmdResponse::VALIDATION_ERROR;
      }

      _id = static_cast<FwPrmIdType>(this->getIdBase() + PARAMID_PARAMETER3);

      // Save the parameter
      this->m_ParamSet_OutputPort[0].invoke(
        _id,
        _saveBuff
      );

      return Fw::CmdResponse::OK;
    }

    return Fw::CmdResponse::EXECUTION_ERROR;
  }

  Fw::CmdResponse SendBuffComponentBase ::
    paramSave_parameter4()
  {
    Fw::ParamBuffer _saveBuff;
    FwPrmIdType _id;
    Fw::SerializeStatus _stat;
    if (this->m_ParamSet_OutputPort[0].isConnected()) {
      this->m_paramLock.lock();

      _stat = _saveBuff.serializeFrom(m_parameter4);

      this->m_paramLock.unLock();
      if (_stat != Fw::FW_SERIALIZE_OK) {
        return Fw::CmdResponse::VALIDATION_ERROR;
      }

      _id = static_cast<FwPrmIdType>(this->getIdBase() + PARAMID_PARAMETER4);

      // Save the parameter
      this->m_ParamSet_OutputPort[0].invoke(
        _id,
        _saveBuff
      );

      return Fw::CmdResponse::OK;
    }

    return Fw::CmdResponse::EXECUTION_ERROR;
  }

}
