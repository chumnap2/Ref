// ======================================================================
// \title  DpDemo_ColorInfoStructSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for DpDemo_ColorInfoStruct struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Ref/DpDemo/DpDemo_ColorInfoStructSerializableAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  DpDemo_ColorInfoStruct ::
    DpDemo_ColorInfoStruct() :
      Serializable(),
      m_Color(Ref::DpDemo_ColorEnum::RED)
  {

  }

  DpDemo_ColorInfoStruct ::
    DpDemo_ColorInfoStruct(Ref::DpDemo_ColorEnum::T Color) :
      Serializable(),
      m_Color(Color)
  {

  }

  DpDemo_ColorInfoStruct ::
    DpDemo_ColorInfoStruct(const DpDemo_ColorInfoStruct& obj) :
      Serializable(),
      m_Color(obj.m_Color)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  DpDemo_ColorInfoStruct& DpDemo_ColorInfoStruct ::
    operator=(const DpDemo_ColorInfoStruct& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.m_Color);
    return *this;
  }

  bool DpDemo_ColorInfoStruct ::
    operator==(const DpDemo_ColorInfoStruct& obj) const
  {
    return (this->m_Color == obj.m_Color);
  }

  bool DpDemo_ColorInfoStruct ::
    operator!=(const DpDemo_ColorInfoStruct& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const DpDemo_ColorInfoStruct& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus DpDemo_ColorInfoStruct ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serializeFrom(this->m_Color);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus DpDemo_ColorInfoStruct ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserializeTo(this->m_Color);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  FwSizeType DpDemo_ColorInfoStruct ::
    serializedSize() const
  {
    FwSizeType size = 0;
    size += Ref::DpDemo_ColorEnum::SERIALIZED_SIZE;
    return size;
  }

#if FW_SERIALIZABLE_TO_STRING

  void DpDemo_ColorInfoStruct ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String tmp;
    sb = "( ";

    // Format Color
    sb += "Color = ";
    this->m_Color.toString(tmp);
    sb += tmp;
    sb += " )";
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void DpDemo_ColorInfoStruct ::
    set(Ref::DpDemo_ColorEnum::T Color)
  {
    this->m_Color = Color;
  }

  void DpDemo_ColorInfoStruct ::
    set_Color(Ref::DpDemo_ColorEnum::T Color)
  {
    this->m_Color = Color;
  }

}
