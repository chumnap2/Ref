// ======================================================================
// \title  DpDemo_StructWithEverythingSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for DpDemo_StructWithEverything struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Ref/DpDemo/DpDemo_StructWithEverythingSerializableAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  DpDemo_StructWithEverything ::
    DpDemo_StructWithEverything() :
      Serializable(),
      m_integerMember(0),
      m_floatMember(0.0f),
      m_stringMember(m___fprime_ac_stringMember_buffer, sizeof m___fprime_ac_stringMember_buffer, Fw::String("")),
      m_booleanMember(false),
      m_enumMember(Ref::DpDemo_ColorEnum::RED),
      m_F32Array(Ref::DpDemo_F32Array(0.0f, 0.0f, 0.0f)),
      m_U32Array(Ref::DpDemo_U32Array(0, 0, 0, 0, 0)),
      m_enumArray(Ref::DpDemo_EnumArray(Ref::DpDemo_ColorEnum::RED, Ref::DpDemo_ColorEnum::RED, Ref::DpDemo_ColorEnum::RED)),
      m_stringArray(Ref::DpDemo_StringArray(Fw::String(""), Fw::String(""))),
      m_booleanArray(Ref::DpDemo_BooleanArray(false, false)),
      m_structWithStrings(Fw::String(""), Ref::DpDemo_StringArray(Fw::String(""), Fw::String(""))),
      m_nestedArrays(Ref::DpDemo_ArrayOfStringArray(Ref::DpDemo_StringArray(Fw::String(""), Fw::String("")), Ref::DpDemo_StringArray(Fw::String(""), Fw::String("")), Ref::DpDemo_StringArray(Fw::String(""), Fw::String(""))))
  {
    for (FwSizeType i = 0; i < 2; i++) {
      this->m_arrayMemberU32[i] = Ref::DpDemo_U32Array(0, 0, 0, 0, 0);
    }
  }

  DpDemo_StructWithEverything ::
    DpDemo_StructWithEverything(
        Ref::DpDemo_I32Alias integerMember,
        F32 floatMember,
        const Fw::StringBase& stringMember,
        bool booleanMember,
        Ref::DpDemo_ColorEnum::T enumMember,
        const Type_of_arrayMemberU32& arrayMemberU32,
        const Ref::DpDemo_F32Array& F32Array,
        const Ref::DpDemo_U32Array& U32Array,
        const Ref::DpDemo_EnumArray& enumArray,
        const Ref::DpDemo_StringArray& stringArray,
        const Ref::DpDemo_BooleanArray& booleanArray,
        const Ref::DpDemo_StructWithStringMembers& structWithStrings,
        const Ref::DpDemo_ArrayOfStringArray& nestedArrays
    ) :
      Serializable(),
      m_integerMember(integerMember),
      m_floatMember(floatMember),
      m_stringMember(m___fprime_ac_stringMember_buffer, sizeof m___fprime_ac_stringMember_buffer, stringMember),
      m_booleanMember(booleanMember),
      m_enumMember(enumMember),
      m_F32Array(F32Array),
      m_U32Array(U32Array),
      m_enumArray(enumArray),
      m_stringArray(stringArray),
      m_booleanArray(booleanArray),
      m_structWithStrings(structWithStrings),
      m_nestedArrays(nestedArrays)
  {
    for (FwSizeType i = 0; i < 2; i++) {
      this->m_arrayMemberU32[i] = arrayMemberU32[i];
    }
  }

  DpDemo_StructWithEverything ::
    DpDemo_StructWithEverything(const DpDemo_StructWithEverything& obj) :
      Serializable(),
      m_integerMember(obj.m_integerMember),
      m_floatMember(obj.m_floatMember),
      m_stringMember(m___fprime_ac_stringMember_buffer, sizeof m___fprime_ac_stringMember_buffer, obj.m_stringMember),
      m_booleanMember(obj.m_booleanMember),
      m_enumMember(obj.m_enumMember),
      m_F32Array(obj.m_F32Array),
      m_U32Array(obj.m_U32Array),
      m_enumArray(obj.m_enumArray),
      m_stringArray(obj.m_stringArray),
      m_booleanArray(obj.m_booleanArray),
      m_structWithStrings(obj.m_structWithStrings),
      m_nestedArrays(obj.m_nestedArrays)
  {
    for (FwSizeType i = 0; i < 2; i++) {
      this->m_arrayMemberU32[i] = obj.m_arrayMemberU32[i];
    }
  }

  DpDemo_StructWithEverything ::
    DpDemo_StructWithEverything(
        Ref::DpDemo_I32Alias integerMember,
        F32 floatMember,
        const Fw::StringBase& stringMember,
        bool booleanMember,
        Ref::DpDemo_ColorEnum::T enumMember,
        const Ref::DpDemo_U32Array& arrayMemberU32,
        const Ref::DpDemo_F32Array& F32Array,
        const Ref::DpDemo_U32Array& U32Array,
        const Ref::DpDemo_EnumArray& enumArray,
        const Ref::DpDemo_StringArray& stringArray,
        const Ref::DpDemo_BooleanArray& booleanArray,
        const Ref::DpDemo_StructWithStringMembers& structWithStrings,
        const Ref::DpDemo_ArrayOfStringArray& nestedArrays
    ) :
      Serializable(),
      m_integerMember(integerMember),
      m_floatMember(floatMember),
      m_stringMember(m___fprime_ac_stringMember_buffer, sizeof m___fprime_ac_stringMember_buffer, stringMember),
      m_booleanMember(booleanMember),
      m_enumMember(enumMember),
      m_F32Array(F32Array),
      m_U32Array(U32Array),
      m_enumArray(enumArray),
      m_stringArray(stringArray),
      m_booleanArray(booleanArray),
      m_structWithStrings(structWithStrings),
      m_nestedArrays(nestedArrays)
  {
    for (FwSizeType i = 0; i < 2; i++) {
      this->m_arrayMemberU32[i] = arrayMemberU32;
    }
  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  DpDemo_StructWithEverything& DpDemo_StructWithEverything ::
    operator=(const DpDemo_StructWithEverything& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.m_integerMember, obj.m_floatMember, obj.m_stringMember, obj.m_booleanMember, obj.m_enumMember, obj.m_arrayMemberU32, obj.m_F32Array, obj.m_U32Array, obj.m_enumArray, obj.m_stringArray, obj.m_booleanArray, obj.m_structWithStrings, obj.m_nestedArrays);
    return *this;
  }

  bool DpDemo_StructWithEverything ::
    operator==(const DpDemo_StructWithEverything& obj) const
  {
    if (this == &obj) { return true; }

    // Compare non-array members
    if (!(
      (this->m_integerMember == obj.m_integerMember) &&
      (this->m_floatMember == obj.m_floatMember) &&
      (this->m_stringMember == obj.m_stringMember) &&
      (this->m_booleanMember == obj.m_booleanMember) &&
      (this->m_enumMember == obj.m_enumMember) &&
      (this->m_F32Array == obj.m_F32Array) &&
      (this->m_U32Array == obj.m_U32Array) &&
      (this->m_enumArray == obj.m_enumArray) &&
      (this->m_stringArray == obj.m_stringArray) &&
      (this->m_booleanArray == obj.m_booleanArray) &&
      (this->m_structWithStrings == obj.m_structWithStrings) &&
      (this->m_nestedArrays == obj.m_nestedArrays)
    )) {
      return false;
    }

    // Compare array members
    for (FwSizeType i = 0; i < 2; i++) {
      if (!(this->m_arrayMemberU32[i] == obj.m_arrayMemberU32[i])) {
        return false;
      }
    }

    return true;
  }

  bool DpDemo_StructWithEverything ::
    operator!=(const DpDemo_StructWithEverything& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const DpDemo_StructWithEverything& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus DpDemo_StructWithEverything ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serializeFrom(this->m_integerMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_floatMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_stringMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_booleanMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_enumMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    for (FwSizeType i = 0; i < 2; i++) {
      status = buffer.serializeFrom(this->m_arrayMemberU32[i]);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
    }
    status = buffer.serializeFrom(this->m_F32Array);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_U32Array);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_enumArray);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_stringArray);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_booleanArray);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_structWithStrings);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_nestedArrays);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus DpDemo_StructWithEverything ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserializeTo(this->m_integerMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_floatMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_stringMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_booleanMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_enumMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    for (FwSizeType i = 0; i < 2; i++) {
      status = buffer.deserializeTo(this->m_arrayMemberU32[i]);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
    }
    status = buffer.deserializeTo(this->m_F32Array);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_U32Array);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_enumArray);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_stringArray);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_booleanArray);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_structWithStrings);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_nestedArrays);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  FwSizeType DpDemo_StructWithEverything ::
    serializedSize() const
  {
    FwSizeType size = 0;
    size += sizeof(Ref::DpDemo_I32Alias);
    size += sizeof(F32);
    size += this->m_stringMember.serializedSize();
    size += sizeof(U8);
    size += Ref::DpDemo_ColorEnum::SERIALIZED_SIZE;
    for (U32 index = 0; index < 2; index++) {
      size += this->m_arrayMemberU32[index].serializedSize();
    }
    size += this->m_F32Array.serializedSize();
    size += this->m_U32Array.serializedSize();
    size += this->m_enumArray.serializedSize();
    size += this->m_stringArray.serializedSize();
    size += this->m_booleanArray.serializedSize();
    size += this->m_structWithStrings.serializedSize();
    size += this->m_nestedArrays.serializedSize();
    return size;
  }

#if FW_SERIALIZABLE_TO_STRING

  void DpDemo_StructWithEverything ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String tmp;
    sb = "( ";

    // Format integerMember
    sb += "integerMember = ";
    tmp.format("%" PRIi32 "", this->m_integerMember);
    sb += tmp;
    sb += ", ";

    // Format floatMember
    sb += "floatMember = ";
    tmp.format("%f", static_cast<F64>(this->m_floatMember));
    sb += tmp;
    sb += ", ";

    // Format stringMember
    sb += "stringMember = ";
    sb += this->m_stringMember;
    sb += ", ";

    // Format booleanMember
    sb += "booleanMember = ";
    tmp.format("%d", this->m_booleanMember);
    sb += tmp;
    sb += ", ";

    // Format enumMember
    sb += "enumMember = ";
    this->m_enumMember.toString(tmp);
    sb += tmp;
    sb += ", ";

    // Format arrayMemberU32
    sb += "arrayMemberU32 = ";
    sb += "[ ";
    for (FwSizeType i = 0; i < 2; i++) {
      this->m_arrayMemberU32[i].toString(tmp);
      if (i > 0) {
        sb += ", ";
      }
      sb += tmp;
    }
    sb += " ]";
    sb += ", ";

    // Format F32Array
    sb += "F32Array = ";
    this->m_F32Array.toString(tmp);
    sb += tmp;
    sb += ", ";

    // Format U32Array
    sb += "U32Array = ";
    this->m_U32Array.toString(tmp);
    sb += tmp;
    sb += ", ";

    // Format enumArray
    sb += "enumArray = ";
    this->m_enumArray.toString(tmp);
    sb += tmp;
    sb += ", ";

    // Format stringArray
    sb += "stringArray = ";
    this->m_stringArray.toString(tmp);
    sb += tmp;
    sb += ", ";

    // Format booleanArray
    sb += "booleanArray = ";
    this->m_booleanArray.toString(tmp);
    sb += tmp;
    sb += ", ";

    // Format structWithStrings
    sb += "structWithStrings = ";
    this->m_structWithStrings.toString(tmp);
    sb += tmp;
    sb += ", ";

    // Format nestedArrays
    sb += "nestedArrays = ";
    this->m_nestedArrays.toString(tmp);
    sb += tmp;
    sb += " )";
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void DpDemo_StructWithEverything ::
    set(
        Ref::DpDemo_I32Alias integerMember,
        F32 floatMember,
        const Fw::StringBase& stringMember,
        bool booleanMember,
        Ref::DpDemo_ColorEnum::T enumMember,
        const Type_of_arrayMemberU32& arrayMemberU32,
        const Ref::DpDemo_F32Array& F32Array,
        const Ref::DpDemo_U32Array& U32Array,
        const Ref::DpDemo_EnumArray& enumArray,
        const Ref::DpDemo_StringArray& stringArray,
        const Ref::DpDemo_BooleanArray& booleanArray,
        const Ref::DpDemo_StructWithStringMembers& structWithStrings,
        const Ref::DpDemo_ArrayOfStringArray& nestedArrays
    )
  {
    this->m_integerMember = integerMember;
    this->m_floatMember = floatMember;
    this->m_stringMember = stringMember;
    this->m_booleanMember = booleanMember;
    this->m_enumMember = enumMember;
    this->m_F32Array = F32Array;
    this->m_U32Array = U32Array;
    this->m_enumArray = enumArray;
    this->m_stringArray = stringArray;
    this->m_booleanArray = booleanArray;
    this->m_structWithStrings = structWithStrings;
    this->m_nestedArrays = nestedArrays;

    for (FwSizeType i = 0; i < 2; i++) {
      this->m_arrayMemberU32[i] = arrayMemberU32[i];
    }
  }

  void DpDemo_StructWithEverything ::
    set_integerMember(Ref::DpDemo_I32Alias integerMember)
  {
    this->m_integerMember = integerMember;
  }

  void DpDemo_StructWithEverything ::
    set_floatMember(F32 floatMember)
  {
    this->m_floatMember = floatMember;
  }

  void DpDemo_StructWithEverything ::
    set_stringMember(const Fw::StringBase& stringMember)
  {
    this->m_stringMember = stringMember;
  }

  void DpDemo_StructWithEverything ::
    set_booleanMember(bool booleanMember)
  {
    this->m_booleanMember = booleanMember;
  }

  void DpDemo_StructWithEverything ::
    set_enumMember(Ref::DpDemo_ColorEnum::T enumMember)
  {
    this->m_enumMember = enumMember;
  }

  void DpDemo_StructWithEverything ::
    set_arrayMemberU32(const Type_of_arrayMemberU32& arrayMemberU32)
  {
    for (FwSizeType i = 0; i < 2; i++) {
      this->m_arrayMemberU32[i] = arrayMemberU32[i];
    }
  }

  void DpDemo_StructWithEverything ::
    set_F32Array(const Ref::DpDemo_F32Array& F32Array)
  {
    this->m_F32Array = F32Array;
  }

  void DpDemo_StructWithEverything ::
    set_U32Array(const Ref::DpDemo_U32Array& U32Array)
  {
    this->m_U32Array = U32Array;
  }

  void DpDemo_StructWithEverything ::
    set_enumArray(const Ref::DpDemo_EnumArray& enumArray)
  {
    this->m_enumArray = enumArray;
  }

  void DpDemo_StructWithEverything ::
    set_stringArray(const Ref::DpDemo_StringArray& stringArray)
  {
    this->m_stringArray = stringArray;
  }

  void DpDemo_StructWithEverything ::
    set_booleanArray(const Ref::DpDemo_BooleanArray& booleanArray)
  {
    this->m_booleanArray = booleanArray;
  }

  void DpDemo_StructWithEverything ::
    set_structWithStrings(const Ref::DpDemo_StructWithStringMembers& structWithStrings)
  {
    this->m_structWithStrings = structWithStrings;
  }

  void DpDemo_StructWithEverything ::
    set_nestedArrays(const Ref::DpDemo_ArrayOfStringArray& nestedArrays)
  {
    this->m_nestedArrays = nestedArrays;
  }

}
