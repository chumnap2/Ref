// ======================================================================
// \title  DpDemoComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for DpDemo component base class
// ======================================================================

#ifndef Ref_DpDemoComponentAc_HPP
#define Ref_DpDemoComponentAc_HPP

#include <atomic>

#include "Fw/Cmd/CmdPortAc.hpp"
#include "Fw/Cmd/CmdRegPortAc.hpp"
#include "Fw/Cmd/CmdResponsePortAc.hpp"
#include "Fw/Cmd/CmdString.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/Dp/DpContainer.hpp"
#include "Fw/Dp/DpGetPortAc.hpp"
#include "Fw/Dp/DpRequestPortAc.hpp"
#include "Fw/Dp/DpResponsePortAc.hpp"
#include "Fw/Dp/DpSendPortAc.hpp"
#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Log/LogString.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Prm/PrmGetPortAc.hpp"
#include "Fw/Prm/PrmSetPortAc.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Fw/Tlm/TlmPortAc.hpp"
#include "Ref/DpDemo/DpDemo_ArrayOfStringArrayArrayAc.hpp"
#include "Ref/DpDemo/DpDemo_ArrayOfStructsArrayAc.hpp"
#include "Ref/DpDemo/DpDemo_BoolAliasAliasAc.hpp"
#include "Ref/DpDemo/DpDemo_BooleanArrayArrayAc.hpp"
#include "Ref/DpDemo/DpDemo_ColorEnumEnumAc.hpp"
#include "Ref/DpDemo/DpDemo_ColorInfoStructSerializableAc.hpp"
#include "Ref/DpDemo/DpDemo_DpReqTypeEnumAc.hpp"
#include "Ref/DpDemo/DpDemo_EnumArrayArrayAc.hpp"
#include "Ref/DpDemo/DpDemo_F32ArrayArrayAc.hpp"
#include "Ref/DpDemo/DpDemo_F64AliasAliasAc.hpp"
#include "Ref/DpDemo/DpDemo_I32AliasAliasAc.hpp"
#include "Ref/DpDemo/DpDemo_StringAliasAliasAc.hpp"
#include "Ref/DpDemo/DpDemo_StringArrayArrayAc.hpp"
#include "Ref/DpDemo/DpDemo_StructWithEverythingSerializableAc.hpp"
#include "Ref/DpDemo/DpDemo_StructWithStringMembersSerializableAc.hpp"
#include "Ref/DpDemo/DpDemo_U32ArrayArrayAc.hpp"
#include "Svc/Sched/SchedPortAc.hpp"
#include "default/config/FwSizeTypeAliasAc.hpp"

namespace Ref {

  //! \class DpDemoComponentBase
  //! \brief Auto-generated base for DpDemo component
  //!
  //! DP Demo
  class DpDemoComponentBase :
    public Fw::ActiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class tester to support autocoded test harness
      friend class DpDemoTesterBase;
      //! Friend class tester implementation to support white-box testing
      friend class DpDemoTester;

    protected:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of special input ports
      enum {
        NUM_CMDIN_INPUT_PORTS = 1,
        NUM_PRODUCTRECVIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_RUN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of special output ports
      enum {
        NUM_CMDREGOUT_OUTPUT_PORTS = 1,
        NUM_CMDRESPONSEOUT_OUTPUT_PORTS = 1,
        NUM_LOGOUT_OUTPUT_PORTS = 1,
        NUM_LOGTEXTOUT_OUTPUT_PORTS = 1,
        NUM_PRMGETOUT_OUTPUT_PORTS = 1,
        NUM_PRMSETOUT_OUTPUT_PORTS = 1,
        NUM_PRODUCTGETOUT_OUTPUT_PORTS = 1,
        NUM_PRODUCTREQUESTOUT_OUTPUT_PORTS = 1,
        NUM_PRODUCTSENDOUT_OUTPUT_PORTS = 1,
        NUM_TIMECALLER_OUTPUT_PORTS = 1,
        NUM_TLMOUT_OUTPUT_PORTS = 1,
      };

      //! Command opcodes
      enum {
        OPCODE_SELECTCOLOR = 0x0, //!< Select color
        OPCODE_DP = 0x1, //!< Command for generating a DP
      };

      //! Event IDs
      enum {
        EVENTID_COLORSELECTED = 0x0, //!< Color selected event
        EVENTID_DPSTARTED = 0x1, //!< DP started event
        EVENTID_DPCOMPLETE = 0x2, //!< DP complete event
        EVENTID_DPRECORDFULL = 0x3,
        EVENTID_DPMEMREQUESTED = 0x4,
        EVENTID_DPMEMRECEIVED = 0x5,
        EVENTID_DPMEMORYFAIL = 0x6,
        EVENTID_DPSNOTCONNECTED = 0x7,
      };

      //! Record sizes
      static constexpr FwSizeType SIZE_OF_ArrayArrayRecord_RECORD(FwSizeType arraySize) {
        return sizeof(FwDpIdType) + sizeof(FwSizeStoreType) + arraySize * Ref::DpDemo_StringArray::SERIALIZED_SIZE;
      }
      static constexpr FwSizeType SIZE_OF_ArrayOfStringArrayRecord_RECORD =
        sizeof(FwDpIdType) + Ref::DpDemo_ArrayOfStringArray::SERIALIZED_SIZE;
      static constexpr FwSizeType SIZE_OF_ArrayOfStructsRecord_RECORD =
        sizeof(FwDpIdType) + Ref::DpDemo_ArrayOfStructs::SERIALIZED_SIZE;
      static constexpr FwSizeType SIZE_OF_BooleanArrayRecord_RECORD =
        sizeof(FwDpIdType) + Ref::DpDemo_BooleanArray::SERIALIZED_SIZE;
      static constexpr FwSizeType SIZE_OF_BooleanRecord_RECORD =
        sizeof(FwDpIdType) + sizeof(U8);
      static constexpr FwSizeType SIZE_OF_ColorEnumRecord_RECORD =
        sizeof(FwDpIdType) + Ref::DpDemo_ColorEnum::SERIALIZED_SIZE;
      static constexpr FwSizeType SIZE_OF_ColorInfoStructRecord_RECORD =
        sizeof(FwDpIdType) + Ref::DpDemo_ColorInfoStruct::SERIALIZED_SIZE;
      static constexpr FwSizeType SIZE_OF_EnumArrayRecord_RECORD =
        sizeof(FwDpIdType) + Ref::DpDemo_EnumArray::SERIALIZED_SIZE;
      static constexpr FwSizeType SIZE_OF_F32ArrayRecord_RECORD =
        sizeof(FwDpIdType) + Ref::DpDemo_F32Array::SERIALIZED_SIZE;
      static constexpr FwSizeType SIZE_OF_F64Record_RECORD =
        sizeof(FwDpIdType) + sizeof(Ref::DpDemo_F64Alias);
      static constexpr FwSizeType SIZE_OF_I32Record_RECORD =
        sizeof(FwDpIdType) + sizeof(Ref::DpDemo_I32Alias);
      static constexpr FwSizeType SIZE_OF_StringArrayRecord_RECORD(FwSizeType arraySize) {
        return sizeof(FwDpIdType) + sizeof(FwSizeStoreType) + arraySize * Fw::StringBase::STATIC_SERIALIZED_SIZE(80);
      }
      static constexpr FwSizeType SIZE_OF_StringRecord_RECORD =
        sizeof(FwDpIdType) + Fw::StringBase::STATIC_SERIALIZED_SIZE(80);
      static constexpr FwSizeType SIZE_OF_StructArrayRecord_RECORD(FwSizeType arraySize) {
        return sizeof(FwDpIdType) + sizeof(FwSizeStoreType) + arraySize * Ref::DpDemo_StructWithStringMembers::SERIALIZED_SIZE;
      }
      static constexpr FwSizeType SIZE_OF_StructWithEverythingRecord_RECORD =
        sizeof(FwDpIdType) + Ref::DpDemo_StructWithEverything::SERIALIZED_SIZE;
      static constexpr FwSizeType SIZE_OF_U32ArrayRecord_RECORD =
        sizeof(FwDpIdType) + Ref::DpDemo_U32Array::SERIALIZED_SIZE;

    protected:

      // ----------------------------------------------------------------------
      // Types for data products
      // ----------------------------------------------------------------------

      //! The container ids
      struct ContainerId {
        enum T : FwDpIdType {
          DpDemoContainer = 0,
        };
      };

      //! The container default priorities
      struct ContainerPriority {
        enum T : FwDpPriorityType {
          DpDemoContainer = 10,
        };
      };

      //! The record ids
      struct RecordId {
        enum T : FwDpIdType {
          ColorInfoStructRecord = 0,
          ColorEnumRecord = 1,
          StringRecord = 2,
          BooleanRecord = 3,
          I32Record = 4,
          F64Record = 5,
          U32ArrayRecord = 6,
          F32ArrayRecord = 7,
          BooleanArrayRecord = 8,
          EnumArrayRecord = 9,
          StringArrayRecord = 10,
          StructArrayRecord = 11,
          ArrayArrayRecord = 12,
          ArrayOfStringArrayRecord = 13,
          StructWithEverythingRecord = 14,
          ArrayOfStructsRecord = 15,
        };
      };

      //! A data product container
      class DpContainer :
        public Fw::DpContainer
      {

        public:

          //! Constructor with custom initialization
          DpContainer(
              FwDpIdType id, //!< The container id
              const Fw::Buffer& buffer, //!< The packet buffer
              FwDpIdType baseId //!< The component base id
          );

          //! Constructor with default initialization
          DpContainer();

        public:

          //! Serialize a ArrayArrayRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_ArrayArrayRecord(
              const Ref::DpDemo_StringArray* array, //!< An array of Ref::DpDemo_StringArray elements
              FwSizeType size //!< The array size
          );

          //! Serialize a ArrayOfStringArrayRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_ArrayOfStringArrayRecord(
              const Ref::DpDemo_ArrayOfStringArray& elt //!< The element
          );

          //! Serialize a ArrayOfStructsRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_ArrayOfStructsRecord(
              const Ref::DpDemo_ArrayOfStructs& elt //!< The element
          );

          //! Serialize a BooleanArrayRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_BooleanArrayRecord(
              const Ref::DpDemo_BooleanArray& elt //!< The element
          );

          //! Serialize a BooleanRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_BooleanRecord(
              Ref::DpDemo_BoolAlias elt //!< The element
          );

          //! Serialize a ColorEnumRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_ColorEnumRecord(
              const Ref::DpDemo_ColorEnum& elt //!< The element
          );

          //! Serialize a ColorInfoStructRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_ColorInfoStructRecord(
              const Ref::DpDemo_ColorInfoStruct& elt //!< The element
          );

          //! Serialize a EnumArrayRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_EnumArrayRecord(
              const Ref::DpDemo_EnumArray& elt //!< The element
          );

          //! Serialize a F32ArrayRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_F32ArrayRecord(
              const Ref::DpDemo_F32Array& elt //!< The element
          );

          //! Serialize a F64Record record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_F64Record(
              Ref::DpDemo_F64Alias elt //!< The element
          );

          //! Serialize a I32Record record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_I32Record(
              Ref::DpDemo_I32Alias elt //!< The element
          );

          //! Serialize a StringArrayRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_StringArrayRecord(
              const Fw::StringBase** array, //!< An array of pointers to StringBase objects
              FwSizeType size //!< The array size
          );

          //! Serialize a StringRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_StringRecord(
              const Fw::StringBase& elt //!< The element
          );

          //! Serialize a StructArrayRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_StructArrayRecord(
              const Ref::DpDemo_StructWithStringMembers* array, //!< An array of Ref::DpDemo_StructWithStringMembers elements
              FwSizeType size //!< The array size
          );

          //! Serialize a StructWithEverythingRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_StructWithEverythingRecord(
              const Ref::DpDemo_StructWithEverything& elt //!< The element
          );

          //! Serialize a U32ArrayRecord record into the packet buffer
          //! \return The serialize status
          Fw::SerializeStatus serializeRecord_U32ArrayRecord(
              const Ref::DpDemo_U32Array& elt //!< The element
          );

          FwDpIdType getBaseId() const { return this->m_baseId; }

          void setBaseId(FwDpIdType baseId) { this->m_baseId = baseId; }

        private:

          //! The component base id
          FwDpIdType m_baseId;

      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize DpDemoComponentBase object
      void init(
          FwSizeType queueDepth, //!< The queue depth
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for special input ports
      // ----------------------------------------------------------------------

      //! Get special input port at index
      //!
      //! \return cmdIn[portNum]
      Fw::InputCmdPort* get_cmdIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get special input port at index
      //!
      //! \return productRecvIn[portNum]
      Fw::InputDpResponsePort* get_productRecvIn_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return run[portNum]
      Svc::InputSchedPort* get_run_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegOut[portNum]
      void set_cmdRegOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdRegPort* port //!< The input port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdResponsePort* port //!< The input port
      );

      //! Connect port to logOut[portNum]
      void set_logOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogPort* port //!< The input port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to logTextOut[portNum]
      void set_logTextOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogTextPort* port //!< The input port
      );

#endif

      //! Connect port to prmGetOut[portNum]
      void set_prmGetOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputPrmGetPort* port //!< The input port
      );

      //! Connect port to prmSetOut[portNum]
      void set_prmSetOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputPrmSetPort* port //!< The input port
      );

      //! Connect port to productGetOut[portNum]
      void set_productGetOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputDpGetPort* port //!< The input port
      );

      //! Connect port to productRequestOut[portNum]
      void set_productRequestOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputDpRequestPort* port //!< The input port
      );

      //! Connect port to productSendOut[portNum]
      void set_productSendOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputDpSendPort* port //!< The input port
      );

      //! Connect port to timeCaller[portNum]
      void set_timeCaller_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTimePort* port //!< The input port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTlmPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to cmdRegOut[portNum]
      void set_cmdRegOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to cmdResponseOut[portNum]
      void set_cmdResponseOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to logOut[portNum]
      void set_logOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to logTextOut[portNum]
      void set_logTextOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

      //! Connect port to prmSetOut[portNum]
      void set_prmSetOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to productRequestOut[portNum]
      void set_productRequestOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to productSendOut[portNum]
      void set_productSendOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to timeCaller[portNum]
      void set_timeCaller_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to tlmOut[portNum]
      void set_tlmOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Command registration
      // ----------------------------------------------------------------------

      //! \brief Register commands with the Command Dispatcher
      //!
      //! Connect the dispatcher first
      void regCommands();

    protected:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct DpDemoComponentBase object
      DpDemoComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy DpDemoComponentBase object
      virtual ~DpDemoComponentBase();

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of special input ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdIn input ports
      //!
      //! \return The number of cmdIn input ports
      FwIndexType getNum_cmdIn_InputPorts() const;

      //! Get the number of productRecvIn input ports
      //!
      //! \return The number of productRecvIn input ports
      FwIndexType getNum_productRecvIn_InputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of run input ports
      //!
      //! \return The number of run input ports
      FwIndexType getNum_run_InputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of special output ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdRegOut output ports
      //!
      //! \return The number of cmdRegOut output ports
      FwIndexType getNum_cmdRegOut_OutputPorts() const;

      //! Get the number of cmdResponseOut output ports
      //!
      //! \return The number of cmdResponseOut output ports
      FwIndexType getNum_cmdResponseOut_OutputPorts() const;

      //! Get the number of logOut output ports
      //!
      //! \return The number of logOut output ports
      FwIndexType getNum_logOut_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get the number of logTextOut output ports
      //!
      //! \return The number of logTextOut output ports
      FwIndexType getNum_logTextOut_OutputPorts() const;

#endif

      //! Get the number of prmGetOut output ports
      //!
      //! \return The number of prmGetOut output ports
      FwIndexType getNum_prmGetOut_OutputPorts() const;

      //! Get the number of prmSetOut output ports
      //!
      //! \return The number of prmSetOut output ports
      FwIndexType getNum_prmSetOut_OutputPorts() const;

      //! Get the number of productGetOut output ports
      //!
      //! \return The number of productGetOut output ports
      FwIndexType getNum_productGetOut_OutputPorts() const;

      //! Get the number of productRequestOut output ports
      //!
      //! \return The number of productRequestOut output ports
      FwIndexType getNum_productRequestOut_OutputPorts() const;

      //! Get the number of productSendOut output ports
      //!
      //! \return The number of productSendOut output ports
      FwIndexType getNum_productSendOut_OutputPorts() const;

      //! Get the number of timeCaller output ports
      //!
      //! \return The number of timeCaller output ports
      FwIndexType getNum_timeCaller_OutputPorts() const;

      //! Get the number of tlmOut output ports
      //!
      //! \return The number of tlmOut output ports
      FwIndexType getNum_tlmOut_OutputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Connection status queries for special output ports
      // ----------------------------------------------------------------------

      //! Check whether port cmdRegOut is connected
      //!
      //! \return Whether port cmdRegOut is connected
      bool isConnected_cmdRegOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port cmdResponseOut is connected
      //!
      //! \return Whether port cmdResponseOut is connected
      bool isConnected_cmdResponseOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port logOut is connected
      //!
      //! \return Whether port logOut is connected
      bool isConnected_logOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Check whether port logTextOut is connected
      //!
      //! \return Whether port logTextOut is connected
      bool isConnected_logTextOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#endif

      //! Check whether port prmGetOut is connected
      //!
      //! \return Whether port prmGetOut is connected
      bool isConnected_prmGetOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port prmSetOut is connected
      //!
      //! \return Whether port prmSetOut is connected
      bool isConnected_prmSetOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port productGetOut is connected
      //!
      //! \return Whether port productGetOut is connected
      bool isConnected_productGetOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port productRequestOut is connected
      //!
      //! \return Whether port productRequestOut is connected
      bool isConnected_productRequestOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port productSendOut is connected
      //!
      //! \return Whether port productSendOut is connected
      bool isConnected_productSendOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port timeCaller is connected
      //!
      //! \return Whether port timeCaller is connected
      bool isConnected_timeCaller_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port tlmOut is connected
      //!
      //! \return Whether port tlmOut is connected
      bool isConnected_tlmOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

    protected:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for special input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port productRecvIn
      void productRecvIn_handlerBase(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          const Fw::Buffer& buffer, //!< The buffer
          const Fw::Success& status //!< The status
      );

    protected:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port run
      virtual void run_handler(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      ) = 0;

    protected:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port run
      void run_handlerBase(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    protected:

      // ----------------------------------------------------------------------
      // Pre-message hooks for special async input ports
      //
      // Each of these functions is invoked just before processing a message
      // on the corresponding port. By default, they do nothing. You can
      // override them to provide specific pre-message behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for async input port productRecvIn
      virtual void productRecvIn_preMsgHook(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          const Fw::Buffer& buffer, //!< The buffer
          const Fw::Success& status //!< The status
      );

    protected:

      // ----------------------------------------------------------------------
      // Invocation functions for special output ports
      // ----------------------------------------------------------------------

      //! Invoke output port productGetOut
      Fw::Success productGetOut_out(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID (input)
          FwSizeType dataSize, //!< The data size of the requested buffer (input)
          Fw::Buffer& buffer //!< The buffer (output)
      );

      //! Invoke output port productRequestOut
      void productRequestOut_out(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          FwSizeType dataSize //!< The data size of the requested buffer
      );

      //! Invoke output port productSendOut
      void productSendOut_out(
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          const Fw::Buffer& buffer //!< The buffer
      );

    protected:

      // ----------------------------------------------------------------------
      // Command response
      // ----------------------------------------------------------------------

      //! Emit command response
      void cmdResponse_out(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdResponse response //!< The command response
      );

    protected:

      // ----------------------------------------------------------------------
      // Command handlers to implement
      // ----------------------------------------------------------------------

      //! Handler for command SelectColor
      //!
      //! Select color
      virtual void SelectColor_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Ref::DpDemo_ColorEnum color
      ) = 0;

      //! Handler for command Dp
      //!
      //! Command for generating a DP
      virtual void Dp_cmdHandler(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Ref::DpDemo_DpReqType reqType,
          U32 priority
      ) = 0;

    protected:

      // ----------------------------------------------------------------------
      // Command handler base-class functions
      //
      // Call these functions directly to bypass the command input port
      // ----------------------------------------------------------------------

      //! Base-class handler function for command SelectColor
      //!
      //! Select color
      void SelectColor_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

      //! Base-class handler function for command Dp
      //!
      //! Command for generating a DP
      void Dp_cmdHandlerBase(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& args //!< The command argument buffer
      );

    protected:

      // ----------------------------------------------------------------------
      // Pre-message hooks for async commands
      //
      // Each of these functions is invoked just before processing the
      // corresponding command. By default they do nothing. You can
      // override them to provide specific pre-command behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for command SelectColor
      virtual void SelectColor_preMsgHook(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq //!< The command sequence number
      );

    protected:

      // ----------------------------------------------------------------------
      // Event logging functions
      // ----------------------------------------------------------------------

      //! Log event ColorSelected
      //!
      //! Color selected event
      void log_ACTIVITY_HI_ColorSelected(Ref::DpDemo_ColorEnum color) const;

      //! Log event DpStarted
      //!
      //! DP started event
      void log_ACTIVITY_LO_DpStarted(U32 records) const;

      //! Log event DpComplete
      //!
      //! DP complete event
      void log_ACTIVITY_LO_DpComplete(U32 records) const;

      //! Log event DpRecordFull
      void log_WARNING_LO_DpRecordFull(
          U32 records,
          U32 bytes
      ) const;

      //! Log event DpMemRequested
      void log_ACTIVITY_LO_DpMemRequested(FwSizeType size) const;

      //! Log event DpMemReceived
      void log_ACTIVITY_LO_DpMemReceived(FwSizeType size) const;

      //! Log event DpMemoryFail
      void log_WARNING_HI_DpMemoryFail() const;

      //! Log event DpsNotConnected
      void log_WARNING_HI_DpsNotConnected() const;

    protected:

      // ----------------------------------------------------------------------
      // Functions for managing data products
      // ----------------------------------------------------------------------

      //! Get a buffer and use it to initialize container DpDemoContainer
      //! \return The status of the buffer request
      Fw::Success::T dpGet_DpDemoContainer(
          FwSizeType dataSize, //!< The data size (input)
          DpContainer& container //!< The container (output)
      ) {
        return this->dpGet(
          ContainerId::DpDemoContainer,
          dataSize,
          ContainerPriority::DpDemoContainer,
          container
        );
      }

      //! Request a DpDemoContainer container
      void dpRequest_DpDemoContainer(
          FwSizeType size //!< The buffer size (input)
      ) {
        return this->dpRequest(ContainerId::DpDemoContainer, size);
      }

      //! Send a data product
      void dpSend(
          DpContainer& container, //!< The data product container
          Fw::Time timeTag = Fw::ZERO_TIME //!< The time tag
      );

    protected:

      // ----------------------------------------------------------------------
      // Handlers to implement for data products
      // ----------------------------------------------------------------------

      //! Receive a container of type DpDemoContainer
      virtual void dpRecv_DpDemoContainer_handler(
          DpContainer& container, //!< The container
          Fw::Success::T status //!< The container status
      ) = 0;

    protected:

      // ----------------------------------------------------------------------
      // Time
      // ----------------------------------------------------------------------

      //! Get the time
      //!
      //! \\return The current time
      Fw::Time getTime() const;

    private:

      // ----------------------------------------------------------------------
      // Message dispatch functions
      // ----------------------------------------------------------------------

      //! Called in the message loop to dispatch a message from the queue
      virtual MsgDispatchStatus doDispatch();

    private:

      // ----------------------------------------------------------------------
      // Calls for messages received on special input ports
      // ----------------------------------------------------------------------

      //! Callback for port cmdIn
      static void m_p_cmdIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          Fw::CmdArgBuffer& args //!< Buffer containing arguments
      );

      //! Callback for port productRecvIn
      static void m_p_productRecvIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container ID
          const Fw::Buffer& buffer, //!< The buffer
          const Fw::Success& status //!< The status
      );

    private:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port run
      static void m_p_run_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    private:

      // ----------------------------------------------------------------------
      // Private data product handling functions
      // ----------------------------------------------------------------------

      //! Get a buffer and use it to initialize a data product container
      //! \return The status of the buffer request
      Fw::Success::T dpGet(
          ContainerId::T containerId, //!< The component-local container id (input)
          FwSizeType dataSize, //!< The data size (input)
          FwDpPriorityType priority, //!< The priority (input)
          DpContainer& container //!< The container (output)
      );

      //! Request a data product container
      void dpRequest(
          ContainerId::T containerId, //!< The component-local container id
          FwSizeType dataSize //!< The data size
      );

      //! Handler implementation for productRecvIn
      void productRecvIn_handler(
          const FwIndexType portNum, //!< The port number
          FwDpIdType id, //!< The container id
          const Fw::Buffer& buffer, //!< The buffer
          const Fw::Success& status //!< The buffer status
      );

    private:

      // ----------------------------------------------------------------------
      // Special input ports
      // ----------------------------------------------------------------------

      //! Input port cmdIn
      Fw::InputCmdPort m_cmdIn_InputPort[NUM_CMDIN_INPUT_PORTS];

      //! Input port productRecvIn
      Fw::InputDpResponsePort m_productRecvIn_InputPort[NUM_PRODUCTRECVIN_INPUT_PORTS];

    private:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port run
      Svc::InputSchedPort m_run_InputPort[NUM_RUN_INPUT_PORTS];

    private:

      // ----------------------------------------------------------------------
      // Special output ports
      // ----------------------------------------------------------------------

      //! Output port cmdRegOut
      Fw::OutputCmdRegPort m_cmdRegOut_OutputPort[NUM_CMDREGOUT_OUTPUT_PORTS];

      //! Output port cmdResponseOut
      Fw::OutputCmdResponsePort m_cmdResponseOut_OutputPort[NUM_CMDRESPONSEOUT_OUTPUT_PORTS];

      //! Output port logOut
      Fw::OutputLogPort m_logOut_OutputPort[NUM_LOGOUT_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Output port logTextOut
      Fw::OutputLogTextPort m_logTextOut_OutputPort[NUM_LOGTEXTOUT_OUTPUT_PORTS];

#endif

      //! Output port prmGetOut
      Fw::OutputPrmGetPort m_prmGetOut_OutputPort[NUM_PRMGETOUT_OUTPUT_PORTS];

      //! Output port prmSetOut
      Fw::OutputPrmSetPort m_prmSetOut_OutputPort[NUM_PRMSETOUT_OUTPUT_PORTS];

      //! Output port productGetOut
      Fw::OutputDpGetPort m_productGetOut_OutputPort[NUM_PRODUCTGETOUT_OUTPUT_PORTS];

      //! Output port productRequestOut
      Fw::OutputDpRequestPort m_productRequestOut_OutputPort[NUM_PRODUCTREQUESTOUT_OUTPUT_PORTS];

      //! Output port productSendOut
      Fw::OutputDpSendPort m_productSendOut_OutputPort[NUM_PRODUCTSENDOUT_OUTPUT_PORTS];

      //! Output port timeCaller
      Fw::OutputTimePort m_timeCaller_OutputPort[NUM_TIMECALLER_OUTPUT_PORTS];

      //! Output port tlmOut
      Fw::OutputTlmPort m_tlmOut_OutputPort[NUM_TLMOUT_OUTPUT_PORTS];

  };

}

#endif
