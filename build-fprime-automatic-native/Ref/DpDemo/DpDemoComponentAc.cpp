// ======================================================================
// \title  DpDemoComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for DpDemo component base class
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif
#include "Ref/DpDemo/DpDemoComponentAc.hpp"

namespace Ref {

  namespace {
    enum MsgTypeEnum {
      DPDEMO_COMPONENT_EXIT = Fw::ActiveComponentBase::ACTIVE_COMPONENT_EXIT,
      PRODUCTRECVIN_DPRESPONSE,
      CMD_SELECTCOLOR,
    };

    // Get the max size by constructing a union of the async input, command, and
    // internal port serialization sizes
    union BuffUnion {
      BYTE productRecvInPortSize[Fw::InputDpResponsePort::SERIALIZED_SIZE];
      BYTE cmdPortSize[Fw::InputCmdPort::SERIALIZED_SIZE];
    };

    // Define a message buffer class large enough to handle all the
    // asynchronous inputs to the component
    class ComponentIpcSerializableBuffer :
      public Fw::SerializeBufferBase
    {

      public:

        enum {
          // Offset into data in buffer: Size of message ID and port number
          DATA_OFFSET = sizeof(FwEnumStoreType) + sizeof(FwIndexType),
          // Max data size
          MAX_DATA_SIZE = sizeof(BuffUnion),
          // Max message size: Size of message id + size of port + max data size
          SERIALIZATION_SIZE = DATA_OFFSET + MAX_DATA_SIZE
        };

        Fw::Serializable::SizeType getBuffCapacity() const {
          return sizeof(m_buff);
        }

        U8* getBuffAddr() {
          return m_buff;
        }

        const U8* getBuffAddr() const {
          return m_buff;
        }

      private:
        // Should be the max of all the input ports serialized sizes...
        U8 m_buff[SERIALIZATION_SIZE];

    };
  }

  // ----------------------------------------------------------------------
  // Types for data products
  // ----------------------------------------------------------------------

  DpDemoComponentBase::DpContainer ::
    DpContainer(
        FwDpIdType id,
        const Fw::Buffer& buffer,
        FwDpIdType baseId
    ) :
      Fw::DpContainer(id, buffer),
      m_baseId(baseId)
  {

  }

  DpDemoComponentBase::DpContainer ::
    DpContainer() :
      Fw::DpContainer(),
      m_baseId(0)
  {

  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_ArrayArrayRecord(
        const Ref::DpDemo_StringArray* array,
        FwSizeType size
    )
  {
    FW_ASSERT(array != nullptr);
    // Compute the size delta
    FwSizeType sizeDelta =
      sizeof(FwDpIdType) + sizeof(FwSizeStoreType);
    for (FwSizeType i = 0; i < size; i++) {
      sizeDelta += array[i].serializedSize();
    }
    // Serialize the elements if they will fit
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if ((this->m_dataBuffer.getBuffLength() + sizeDelta) <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::ArrayArrayRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeSize(size);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      for (FwSizeType i = 0; i < size; i++) {
        status = this->m_dataBuffer.serializeFrom(array[i]);
        FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      }
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_ArrayOfStringArrayRecord(const Ref::DpDemo_ArrayOfStringArray& elt)
  {
    const FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      elt.serializedSize();
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if (this->m_dataBuffer.getBuffLength() + sizeDelta <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::ArrayOfStringArrayRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeFrom(elt);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_ArrayOfStructsRecord(const Ref::DpDemo_ArrayOfStructs& elt)
  {
    const FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      elt.serializedSize();
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if (this->m_dataBuffer.getBuffLength() + sizeDelta <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::ArrayOfStructsRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeFrom(elt);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_BooleanArrayRecord(const Ref::DpDemo_BooleanArray& elt)
  {
    const FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      elt.serializedSize();
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if (this->m_dataBuffer.getBuffLength() + sizeDelta <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::BooleanArrayRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeFrom(elt);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_BooleanRecord(Ref::DpDemo_BoolAlias elt)
  {
    const FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      sizeof(U8);
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if (this->m_dataBuffer.getBuffLength() + sizeDelta <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::BooleanRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeFrom(elt);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_ColorEnumRecord(const Ref::DpDemo_ColorEnum& elt)
  {
    const FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      Ref::DpDemo_ColorEnum::SERIALIZED_SIZE;
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if (this->m_dataBuffer.getBuffLength() + sizeDelta <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::ColorEnumRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeFrom(elt);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_ColorInfoStructRecord(const Ref::DpDemo_ColorInfoStruct& elt)
  {
    const FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      elt.serializedSize();
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if (this->m_dataBuffer.getBuffLength() + sizeDelta <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::ColorInfoStructRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeFrom(elt);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_EnumArrayRecord(const Ref::DpDemo_EnumArray& elt)
  {
    const FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      elt.serializedSize();
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if (this->m_dataBuffer.getBuffLength() + sizeDelta <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::EnumArrayRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeFrom(elt);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_F32ArrayRecord(const Ref::DpDemo_F32Array& elt)
  {
    const FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      elt.serializedSize();
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if (this->m_dataBuffer.getBuffLength() + sizeDelta <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::F32ArrayRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeFrom(elt);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_F64Record(Ref::DpDemo_F64Alias elt)
  {
    const FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      sizeof(Ref::DpDemo_F64Alias);
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if (this->m_dataBuffer.getBuffLength() + sizeDelta <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::F64Record;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeFrom(elt);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_I32Record(Ref::DpDemo_I32Alias elt)
  {
    const FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      sizeof(Ref::DpDemo_I32Alias);
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if (this->m_dataBuffer.getBuffLength() + sizeDelta <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::I32Record;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeFrom(elt);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_StringArrayRecord(
        const Fw::StringBase** array,
        FwSizeType size
    )
  {
    FW_ASSERT(array != nullptr);
    // Compute the size delta
    const FwSizeType stringSize = 80;
    FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      sizeof(FwSizeStoreType);
    for (FwSizeType i = 0; i < size; i++) {
      const Fw::StringBase *const sbPtr = array[i];
      FW_ASSERT(sbPtr != nullptr);
      sizeDelta += sbPtr->serializedTruncatedSize(stringSize);
    }
    // Serialize the elements if they will fit
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if ((this->m_dataBuffer.getBuffLength() + sizeDelta) <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::StringArrayRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeSize(size);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      for (FwSizeType i = 0; i < size; i++) {
        const Fw::StringBase *const sbPtr = array[i];
        FW_ASSERT(sbPtr != nullptr);
        status = sbPtr->serializeTo(this->m_dataBuffer, stringSize);
        FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      }
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_StringRecord(const Fw::StringBase& elt)
  {
    const FwSizeType stringSize = 80;
    const FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      elt.serializedTruncatedSize(stringSize);
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if (this->m_dataBuffer.getBuffLength() + sizeDelta <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::StringRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = elt.serializeTo(this->m_dataBuffer, stringSize);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_StructArrayRecord(
        const Ref::DpDemo_StructWithStringMembers* array,
        FwSizeType size
    )
  {
    FW_ASSERT(array != nullptr);
    // Compute the size delta
    FwSizeType sizeDelta =
      sizeof(FwDpIdType) + sizeof(FwSizeStoreType);
    for (FwSizeType i = 0; i < size; i++) {
      sizeDelta += array[i].serializedSize();
    }
    // Serialize the elements if they will fit
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if ((this->m_dataBuffer.getBuffLength() + sizeDelta) <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::StructArrayRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeSize(size);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      for (FwSizeType i = 0; i < size; i++) {
        status = this->m_dataBuffer.serializeFrom(array[i]);
        FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      }
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_StructWithEverythingRecord(const Ref::DpDemo_StructWithEverything& elt)
  {
    const FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      elt.serializedSize();
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if (this->m_dataBuffer.getBuffLength() + sizeDelta <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::StructWithEverythingRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeFrom(elt);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  Fw::SerializeStatus DpDemoComponentBase::DpContainer ::
    serializeRecord_U32ArrayRecord(const Ref::DpDemo_U32Array& elt)
  {
    const FwSizeType sizeDelta =
      sizeof(FwDpIdType) +
      elt.serializedSize();
    Fw::SerializeStatus status = Fw::FW_SERIALIZE_OK;
    if (this->m_dataBuffer.getBuffLength() + sizeDelta <= this->m_dataBuffer.getBuffCapacity()) {
      const FwDpIdType id = this->m_baseId + RecordId::U32ArrayRecord;
      status = this->m_dataBuffer.serializeFrom(id);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      status = this->m_dataBuffer.serializeFrom(elt);
      FW_ASSERT(status == Fw::FW_SERIALIZE_OK, static_cast<FwAssertArgType>(status));
      this->m_dataSize += sizeDelta;
    }
    else {
      status = Fw::FW_SERIALIZE_NO_ROOM_LEFT;
    }
    return status;
  }

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    init(
        FwSizeType queueDepth,
        FwEnumStoreType instance
    )
  {
    // Initialize base class
    Fw::ActiveComponentBase::init(instance);

    // Connect input port cmdIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_cmdIn_InputPorts());
      port++
    ) {
      this->m_cmdIn_InputPort[port].init();
      this->m_cmdIn_InputPort[port].addCallComp(
        this,
        m_p_cmdIn_in
      );
      this->m_cmdIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_cmdIn_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_cmdIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port productRecvIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_productRecvIn_InputPorts());
      port++
    ) {
      this->m_productRecvIn_InputPort[port].init();
      this->m_productRecvIn_InputPort[port].addCallComp(
        this,
        m_p_productRecvIn_in
      );
      this->m_productRecvIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_productRecvIn_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_productRecvIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port run
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_run_InputPorts());
      port++
    ) {
      this->m_run_InputPort[port].init();
      this->m_run_InputPort[port].addCallComp(
        this,
        m_p_run_in
      );
      this->m_run_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_run_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_run_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port cmdRegOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_cmdRegOut_OutputPorts());
      port++
    ) {
      this->m_cmdRegOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_cmdRegOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_cmdRegOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port cmdResponseOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_cmdResponseOut_OutputPorts());
      port++
    ) {
      this->m_cmdResponseOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_cmdResponseOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_cmdResponseOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port logOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_logOut_OutputPorts());
      port++
    ) {
      this->m_logOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_logOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_logOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

#if FW_ENABLE_TEXT_LOGGING == 1
    // Connect output port logTextOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_logTextOut_OutputPorts());
      port++
    ) {
      this->m_logTextOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_logTextOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_logTextOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }
#endif

    // Connect output port prmGetOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_prmGetOut_OutputPorts());
      port++
    ) {
      this->m_prmGetOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_prmGetOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_prmGetOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port prmSetOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_prmSetOut_OutputPorts());
      port++
    ) {
      this->m_prmSetOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_prmSetOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_prmSetOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port productGetOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_productGetOut_OutputPorts());
      port++
    ) {
      this->m_productGetOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_productGetOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_productGetOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port productRequestOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_productRequestOut_OutputPorts());
      port++
    ) {
      this->m_productRequestOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_productRequestOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_productRequestOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port productSendOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_productSendOut_OutputPorts());
      port++
    ) {
      this->m_productSendOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_productSendOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_productSendOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port timeCaller
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_timeCaller_OutputPorts());
      port++
    ) {
      this->m_timeCaller_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_timeCaller_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_timeCaller_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port tlmOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_tlmOut_OutputPorts());
      port++
    ) {
      this->m_tlmOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_tlmOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_tlmOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Create the queue
    Os::Queue::Status qStat = this->createQueue(
      queueDepth,
      static_cast<FwSizeType>(ComponentIpcSerializableBuffer::SERIALIZATION_SIZE)
    );
    FW_ASSERT(
      Os::Queue::Status::OP_OK == qStat,
      static_cast<FwAssertArgType>(qStat)
    );
  }

  // ----------------------------------------------------------------------
  // Getters for special input ports
  // ----------------------------------------------------------------------

  Fw::InputCmdPort* DpDemoComponentBase ::
    get_cmdIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_cmdIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_cmdIn_InputPort[portNum];
  }

  Fw::InputDpResponsePort* DpDemoComponentBase ::
    get_productRecvIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_productRecvIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_productRecvIn_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Svc::InputSchedPort* DpDemoComponentBase ::
    get_run_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_run_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_run_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect input ports to special output ports
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    set_cmdRegOut_OutputPort(
        FwIndexType portNum,
        Fw::InputCmdRegPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_cmdRegOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdRegOut_OutputPort[portNum].addCallPort(port);
  }

  void DpDemoComponentBase ::
    set_cmdResponseOut_OutputPort(
        FwIndexType portNum,
        Fw::InputCmdResponsePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_cmdResponseOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdResponseOut_OutputPort[portNum].addCallPort(port);
  }

  void DpDemoComponentBase ::
    set_logOut_OutputPort(
        FwIndexType portNum,
        Fw::InputLogPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void DpDemoComponentBase ::
    set_logTextOut_OutputPort(
        FwIndexType portNum,
        Fw::InputLogTextPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logTextOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logTextOut_OutputPort[portNum].addCallPort(port);
  }

#endif

  void DpDemoComponentBase ::
    set_prmGetOut_OutputPort(
        FwIndexType portNum,
        Fw::InputPrmGetPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_prmGetOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmGetOut_OutputPort[portNum].addCallPort(port);
  }

  void DpDemoComponentBase ::
    set_prmSetOut_OutputPort(
        FwIndexType portNum,
        Fw::InputPrmSetPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_prmSetOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmSetOut_OutputPort[portNum].addCallPort(port);
  }

  void DpDemoComponentBase ::
    set_productGetOut_OutputPort(
        FwIndexType portNum,
        Fw::InputDpGetPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_productGetOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_productGetOut_OutputPort[portNum].addCallPort(port);
  }

  void DpDemoComponentBase ::
    set_productRequestOut_OutputPort(
        FwIndexType portNum,
        Fw::InputDpRequestPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_productRequestOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_productRequestOut_OutputPort[portNum].addCallPort(port);
  }

  void DpDemoComponentBase ::
    set_productSendOut_OutputPort(
        FwIndexType portNum,
        Fw::InputDpSendPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_productSendOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_productSendOut_OutputPort[portNum].addCallPort(port);
  }

  void DpDemoComponentBase ::
    set_timeCaller_OutputPort(
        FwIndexType portNum,
        Fw::InputTimePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_timeCaller_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].addCallPort(port);
  }

  void DpDemoComponentBase ::
    set_tlmOut_OutputPort(
        FwIndexType portNum,
        Fw::InputTlmPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_tlmOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_tlmOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to special output ports
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    set_cmdRegOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_cmdRegOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdRegOut_OutputPort[portNum].registerSerialPort(port);
  }

  void DpDemoComponentBase ::
    set_cmdResponseOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_cmdResponseOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_cmdResponseOut_OutputPort[portNum].registerSerialPort(port);
  }

  void DpDemoComponentBase ::
    set_logOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logOut_OutputPort[portNum].registerSerialPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void DpDemoComponentBase ::
    set_logTextOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logTextOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logTextOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  void DpDemoComponentBase ::
    set_prmSetOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_prmSetOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_prmSetOut_OutputPort[portNum].registerSerialPort(port);
  }

  void DpDemoComponentBase ::
    set_productRequestOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_productRequestOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_productRequestOut_OutputPort[portNum].registerSerialPort(port);
  }

  void DpDemoComponentBase ::
    set_productSendOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_productSendOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_productSendOut_OutputPort[portNum].registerSerialPort(port);
  }

  void DpDemoComponentBase ::
    set_timeCaller_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_timeCaller_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].registerSerialPort(port);
  }

  void DpDemoComponentBase ::
    set_tlmOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_tlmOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_tlmOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Command registration
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    regCommands()
  {
    FW_ASSERT(this->m_cmdRegOut_OutputPort[0].isConnected());

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_SELECTCOLOR
    );

    this->m_cmdRegOut_OutputPort[0].invoke(
      this->getIdBase() + OPCODE_DP
    );
  }

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  DpDemoComponentBase ::
    DpDemoComponentBase(const char* compName) :
      Fw::ActiveComponentBase(compName)
  {

  }

  DpDemoComponentBase ::
    ~DpDemoComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special input ports
  // ----------------------------------------------------------------------

  FwIndexType DpDemoComponentBase ::
    getNum_cmdIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdIn_InputPort));
  }

  FwIndexType DpDemoComponentBase ::
    getNum_productRecvIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_productRecvIn_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType DpDemoComponentBase ::
    getNum_run_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_run_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special output ports
  // ----------------------------------------------------------------------

  FwIndexType DpDemoComponentBase ::
    getNum_cmdRegOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdRegOut_OutputPort));
  }

  FwIndexType DpDemoComponentBase ::
    getNum_cmdResponseOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdResponseOut_OutputPort));
  }

  FwIndexType DpDemoComponentBase ::
    getNum_logOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_logOut_OutputPort));
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  FwIndexType DpDemoComponentBase ::
    getNum_logTextOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_logTextOut_OutputPort));
  }

#endif

  FwIndexType DpDemoComponentBase ::
    getNum_prmGetOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_prmGetOut_OutputPort));
  }

  FwIndexType DpDemoComponentBase ::
    getNum_prmSetOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_prmSetOut_OutputPort));
  }

  FwIndexType DpDemoComponentBase ::
    getNum_productGetOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_productGetOut_OutputPort));
  }

  FwIndexType DpDemoComponentBase ::
    getNum_productRequestOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_productRequestOut_OutputPort));
  }

  FwIndexType DpDemoComponentBase ::
    getNum_productSendOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_productSendOut_OutputPort));
  }

  FwIndexType DpDemoComponentBase ::
    getNum_timeCaller_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_timeCaller_OutputPort));
  }

  FwIndexType DpDemoComponentBase ::
    getNum_tlmOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_tlmOut_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for special output ports
  // ----------------------------------------------------------------------

  bool DpDemoComponentBase ::
    isConnected_cmdRegOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_cmdRegOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_cmdRegOut_OutputPort[portNum].isConnected();
  }

  bool DpDemoComponentBase ::
    isConnected_cmdResponseOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_cmdResponseOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_cmdResponseOut_OutputPort[portNum].isConnected();
  }

  bool DpDemoComponentBase ::
    isConnected_logOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_logOut_OutputPort[portNum].isConnected();
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  bool DpDemoComponentBase ::
    isConnected_logTextOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logTextOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_logTextOut_OutputPort[portNum].isConnected();
  }

#endif

  bool DpDemoComponentBase ::
    isConnected_prmGetOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_prmGetOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_prmGetOut_OutputPort[portNum].isConnected();
  }

  bool DpDemoComponentBase ::
    isConnected_prmSetOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_prmSetOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_prmSetOut_OutputPort[portNum].isConnected();
  }

  bool DpDemoComponentBase ::
    isConnected_productGetOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_productGetOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_productGetOut_OutputPort[portNum].isConnected();
  }

  bool DpDemoComponentBase ::
    isConnected_productRequestOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_productRequestOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_productRequestOut_OutputPort[portNum].isConnected();
  }

  bool DpDemoComponentBase ::
    isConnected_productSendOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_productSendOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_productSendOut_OutputPort[portNum].isConnected();
  }

  bool DpDemoComponentBase ::
    isConnected_timeCaller_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_timeCaller_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_timeCaller_OutputPort[portNum].isConnected();
  }

  bool DpDemoComponentBase ::
    isConnected_tlmOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_tlmOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_tlmOut_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for special input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    productRecvIn_handlerBase(
        FwIndexType portNum,
        FwDpIdType id,
        const Fw::Buffer& buffer,
        const Fw::Success& status
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_productRecvIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call pre-message hook
    productRecvIn_preMsgHook(
      portNum,
      id,
      buffer,
      status
    );
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize message ID
    _status = msg.serializeFrom(
      static_cast<FwEnumStoreType>(PRODUCTRECVIN_DPRESPONSE)
    );
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize port number
    _status = msg.serializeFrom(portNum);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument id
    _status = msg.serializeFrom(id);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument buffer
    _status = msg.serializeFrom(buffer);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Serialize argument status
    _status = msg.serializeFrom(status);
    FW_ASSERT(
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    run_handlerBase(
        FwIndexType portNum,
        U32 context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_run_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->run_handler(
      portNum,
      context
    );
  }

  // ----------------------------------------------------------------------
  // Pre-message hooks for special async input ports
  //
  // Each of these functions is invoked just before processing a message
  // on the corresponding port. By default, they do nothing. You can
  // override them to provide specific pre-message behavior.
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    productRecvIn_preMsgHook(
        FwIndexType portNum,
        FwDpIdType id,
        const Fw::Buffer& buffer,
        const Fw::Success& status
    )
  {
    // Default: no-op
  }

  // ----------------------------------------------------------------------
  // Invocation functions for special output ports
  // ----------------------------------------------------------------------

  Fw::Success DpDemoComponentBase ::
    productGetOut_out(
        FwIndexType portNum,
        FwDpIdType id,
        FwSizeType dataSize,
        Fw::Buffer& buffer
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_productGetOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_productGetOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    return this->m_productGetOut_OutputPort[portNum].invoke(
      id,
      dataSize,
      buffer
    );
  }

  void DpDemoComponentBase ::
    productRequestOut_out(
        FwIndexType portNum,
        FwDpIdType id,
        FwSizeType dataSize
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_productRequestOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_productRequestOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_productRequestOut_OutputPort[portNum].invoke(
      id,
      dataSize
    );
  }

  void DpDemoComponentBase ::
    productSendOut_out(
        FwIndexType portNum,
        FwDpIdType id,
        const Fw::Buffer& buffer
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_productSendOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_productSendOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_productSendOut_OutputPort[portNum].invoke(
      id,
      buffer
    );
  }

  // ----------------------------------------------------------------------
  // Command response
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    cmdResponse_out(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdResponse response
    )
  {
    FW_ASSERT(this->m_cmdResponseOut_OutputPort[0].isConnected());
    this->m_cmdResponseOut_OutputPort[0].invoke(opCode, cmdSeq, response);
  }

  // ----------------------------------------------------------------------
  // Command handler base-class functions
  //
  // Call these functions directly to bypass the command input port
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    SelectColor_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Call pre-message hook
    this->SelectColor_preMsgHook(opCode,cmdSeq);

    // Defer deserializing arguments to the message dispatcher
    // to avoid deserializing and reserializing just for IPC
    ComponentIpcSerializableBuffer msg;
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Serialize for IPC
    _status = msg.serializeFrom(static_cast<FwEnumStoreType>(CMD_SELECTCOLOR));
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Fake port number to make message dequeue work
    FwIndexType port = 0;

    _status = msg.serializeFrom(port);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(opCode);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(cmdSeq);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    _status = msg.serializeFrom(args);
    FW_ASSERT (
      _status == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_status)
    );

    // Send message
    Os::Queue::BlockingType _block = Os::Queue::NONBLOCKING;
    Os::Queue::Status qStatus = this->m_queue.send(msg, 0, _block);

    FW_ASSERT(
      qStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(qStatus)
    );
  }

  void DpDemoComponentBase ::
    Dp_cmdHandlerBase(
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    // Deserialize the arguments
    Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

    // Reset the buffer
    args.resetDeser();

    Ref::DpDemo_DpReqType reqType;
    _status = args.deserializeTo(reqType);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

    U32 priority;
    _status = args.deserializeTo(priority);
    if (_status != Fw::FW_SERIALIZE_OK) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }

#if FW_CMD_CHECK_RESIDUAL
    // Make sure there was no data left over.
    // That means the argument buffer size was incorrect.
    if (args.getBuffLeft() != 0) {
      if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
        this->m_cmdResponseOut_OutputPort[0].invoke(
          opCode,
          cmdSeq,
          Fw::CmdResponse::FORMAT_ERROR
        );
      }
      return;
    }
#endif

    this->Dp_cmdHandler(
      opCode, cmdSeq,
      reqType,
      priority
    );
  }

  // ----------------------------------------------------------------------
  // Pre-message hooks for async commands
  //
  // Each of these functions is invoked just before processing the
  // corresponding command. By default they do nothing. You can
  // override them to provide specific pre-command behavior.
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    SelectColor_preMsgHook(
        FwOpcodeType opCode,
        U32 cmdSeq
    )
  {
    // Defaults to no-op; can be overridden
    (void) opCode;
    (void) cmdSeq;
  }

  // ----------------------------------------------------------------------
  // Event logging functions
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    log_ACTIVITY_HI_ColorSelected(Ref::DpDemo_ColorEnum color) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_COLORSELECTED;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(Ref::DpDemo_ColorEnum::SERIALIZED_SIZE)
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(color);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Color selected %s";
#else
      const char* _formatString =
        "%s: Color selected %s";
#endif

      Fw::String colorStr;
      color.toString(colorStr);

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "ColorSelected ",
        colorStr.toChar()
      );

      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_HI,
        _logString
      );
    }
#endif
  }

  void DpDemoComponentBase ::
    log_ACTIVITY_LO_DpStarted(U32 records) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_DPSTARTED;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(records);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Writing %" PRIu32 " DP records";
#else
      const char* _formatString =
        "%s: Writing %" PRIu32 " DP records";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "DpStarted ",
        records
      );

      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logString
      );
    }
#endif
  }

  void DpDemoComponentBase ::
    log_ACTIVITY_LO_DpComplete(U32 records) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_DPCOMPLETE;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(records);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Finished writing %" PRIu32 " DP records";
#else
      const char* _formatString =
        "%s: Finished writing %" PRIu32 " DP records";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "DpComplete ",
        records
      );

      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logString
      );
    }
#endif
  }

  void DpDemoComponentBase ::
    log_WARNING_LO_DpRecordFull(
        U32 records,
        U32 bytes
    ) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_DPRECORDFULL;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(2));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(records);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(bytes);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_LO,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: DP container full with %" PRIu32 " records and %" PRIu32 " bytes. Closing DP.";
#else
      const char* _formatString =
        "%s: DP container full with %" PRIu32 " records and %" PRIu32 " bytes. Closing DP.";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "DpRecordFull ",
        records,
        bytes
      );

      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_LO,
        _logString
      );
    }
#endif
  }

  void DpDemoComponentBase ::
    log_ACTIVITY_LO_DpMemRequested(FwSizeType size) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_DPMEMREQUESTED;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(FwSizeType))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(size);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Requesting %" PRIu64 " bytes for DP";
#else
      const char* _formatString =
        "%s: Requesting %" PRIu64 " bytes for DP";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "DpMemRequested ",
        size
      );

      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logString
      );
    }
#endif
  }

  void DpDemoComponentBase ::
    log_ACTIVITY_LO_DpMemReceived(FwSizeType size) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_DPMEMRECEIVED;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(FwSizeType))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(size);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Received %" PRIu64 " bytes for DP";
#else
      const char* _formatString =
        "%s: Received %" PRIu64 " bytes for DP";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "DpMemReceived ",
        size
      );

      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::ACTIVITY_LO,
        _logString
      );
    }
#endif
  }

  void DpDemoComponentBase ::
    log_WARNING_HI_DpMemoryFail() const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_DPMEMORYFAIL;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;

#if FW_AMPCS_COMPATIBLE
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(0));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Failed to acquire a DP buffer";
#else
      const char* _formatString =
        "%s: Failed to acquire a DP buffer";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "DpMemoryFail "
      );

      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logString
      );
    }
#endif
  }

  void DpDemoComponentBase ::
    log_WARNING_HI_DpsNotConnected() const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_DPSNOTCONNECTED;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;

#if FW_AMPCS_COMPATIBLE
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(0));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: DP Ports not connected!";
#else
      const char* _formatString =
        "%s: DP Ports not connected!";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "DpsNotConnected "
      );

      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logString
      );
    }
#endif
  }

  // ----------------------------------------------------------------------
  // Functions for managing data products
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    dpSend(
        DpContainer& container,
        Fw::Time timeTag
    )
  {
    // Update the time tag
    if (timeTag == Fw::ZERO_TIME) {
      // Get the time from the time port
      timeTag = this->getTime();
    }
    container.setTimeTag(timeTag);
    // Serialize the header into the packet
    container.serializeHeader();
    // Update the data hash
    container.updateDataHash();
    // Update the size of the buffer according to the data size
    const FwSizeType packetSize = container.getPacketSize();
    Fw::Buffer buffer = container.getBuffer();
    FW_ASSERT(packetSize <= buffer.getSize(), static_cast<FwAssertArgType>(packetSize),
        static_cast<FwAssertArgType>(buffer.getSize()));
    buffer.setSize(static_cast<U32>(packetSize));
    // Invalidate the buffer in the container, so it can't be reused
    container.invalidateBuffer();
    // Send the buffer
    this->productSendOut_out(0, container.getId(), buffer);
  }

  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time DpDemoComponentBase ::
    getTime() const
  {
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_timeCaller_OutputPort[0].invoke(_time);
      return _time;
    }
    else {
      return Fw::Time(TimeBase::TB_NONE, 0, 0);
    }
  }

  // ----------------------------------------------------------------------
  // Message dispatch functions
  // ----------------------------------------------------------------------

  Fw::QueuedComponentBase::MsgDispatchStatus DpDemoComponentBase ::
    doDispatch()
  {
    ComponentIpcSerializableBuffer _msg;
    FwQueuePriorityType _priority = 0;

    Os::Queue::Status _msgStatus = this->m_queue.receive(
      _msg,
      Os::Queue::BLOCKING,
      _priority
    );
    FW_ASSERT(
      _msgStatus == Os::Queue::OP_OK,
      static_cast<FwAssertArgType>(_msgStatus)
    );

    // Reset to beginning of buffer
    _msg.resetDeser();

    FwEnumStoreType _desMsg = 0;
    Fw::SerializeStatus _deserStatus = _msg.deserializeTo(_desMsg);
    FW_ASSERT(
      _deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_deserStatus)
    );

    MsgTypeEnum _msgType = static_cast<MsgTypeEnum>(_desMsg);

    if (_msgType == DPDEMO_COMPONENT_EXIT) {
      return MSG_DISPATCH_EXIT;
    }

    FwIndexType portNum = 0;
    _deserStatus = _msg.deserializeTo(portNum);
    FW_ASSERT(
      _deserStatus == Fw::FW_SERIALIZE_OK,
      static_cast<FwAssertArgType>(_deserStatus)
    );

    switch (_msgType) {
      // Handle async input port productRecvIn
      case PRODUCTRECVIN_DPRESPONSE: {
        // Deserialize argument id
        FwDpIdType id;
        _deserStatus = _msg.deserializeTo(id);
        FW_ASSERT(
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Deserialize argument buffer
        Fw::Buffer buffer;
        _deserStatus = _msg.deserializeTo(buffer);
        FW_ASSERT(
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Deserialize argument status
        Fw::Success status;
        _deserStatus = _msg.deserializeTo(status);
        FW_ASSERT(
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );
        // Call handler function
        this->productRecvIn_handler(
          portNum,
          id,
          buffer,
          status
        );

        break;
      }

      // Handle command SelectColor
      case CMD_SELECTCOLOR: {
        // Deserialize opcode
        FwOpcodeType _opCode = 0;
        _deserStatus = _msg.deserializeTo(_opCode);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Deserialize command sequence
        U32 _cmdSeq = 0;
        _deserStatus = _msg.deserializeTo(_cmdSeq);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Deserialize command argument buffer
        Fw::CmdArgBuffer args;
        _deserStatus = _msg.deserializeTo(args);
        FW_ASSERT (
          _deserStatus == Fw::FW_SERIALIZE_OK,
          static_cast<FwAssertArgType>(_deserStatus)
        );

        // Reset buffer
        args.resetDeser();

        // Deserialize argument color
        Ref::DpDemo_ColorEnum color;
        _deserStatus = args.deserializeTo(color);
        if (_deserStatus != Fw::FW_SERIALIZE_OK) {
          if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
            this->cmdResponse_out(
                _opCode,
                _cmdSeq,
                Fw::CmdResponse::FORMAT_ERROR
            );
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }

        // Make sure there was no data left over.
        // That means the argument buffer size was incorrect.
#if FW_CMD_CHECK_RESIDUAL
        if (args.getBuffLeft() != 0) {
          if (this->m_cmdResponseOut_OutputPort[0].isConnected()) {
            this->cmdResponse_out(_opCode, _cmdSeq, Fw::CmdResponse::FORMAT_ERROR);
          }
          // Don't crash the task if bad arguments were passed from the ground
          break;
        }
#endif

        // Call handler function
        this->SelectColor_cmdHandler(
          _opCode, _cmdSeq,
          color
        );

        break;
      }

      default:
        return MSG_DISPATCH_ERROR;
    }

    return MSG_DISPATCH_OK;
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on special input ports
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    m_p_cmdIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        Fw::CmdArgBuffer& args
    )
  {
    FW_ASSERT(callComp);
    DpDemoComponentBase* compPtr = static_cast<DpDemoComponentBase*>(callComp);

    const U32 idBase = callComp->getIdBase();
    FW_ASSERT(opCode >= idBase, static_cast<FwAssertArgType>(opCode), static_cast<FwAssertArgType>(idBase));

    // Select base class function based on opcode
    switch (opCode - idBase) {
      case OPCODE_SELECTCOLOR: {
        compPtr->SelectColor_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }

      case OPCODE_DP: {
        compPtr->Dp_cmdHandlerBase(
          opCode,
          cmdSeq,
          args
        );
        break;
      }
    }
  }

  void DpDemoComponentBase ::
    m_p_productRecvIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwDpIdType id,
        const Fw::Buffer& buffer,
        const Fw::Success& status
    )
  {
    FW_ASSERT(callComp);
    DpDemoComponentBase* compPtr = static_cast<DpDemoComponentBase*>(callComp);
    compPtr->productRecvIn_handlerBase(
      portNum,
      id,
      buffer,
      status
    );
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void DpDemoComponentBase ::
    m_p_run_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        U32 context
    )
  {
    FW_ASSERT(callComp);
    DpDemoComponentBase* compPtr = static_cast<DpDemoComponentBase*>(callComp);
    compPtr->run_handlerBase(
      portNum,
      context
    );
  }

  // ----------------------------------------------------------------------
  // Private data product handling functions
  // ----------------------------------------------------------------------

  Fw::Success::T DpDemoComponentBase ::
    dpGet(
        ContainerId::T containerId,
        FwSizeType dataSize,
        FwDpPriorityType priority,
        DpContainer& container
    )
  {
    const FwDpIdType baseId = this->getIdBase();
    const FwDpIdType globalId = baseId + containerId;
    const FwSizeType size = DpContainer::getPacketSizeForDataSize(dataSize);
    Fw::Buffer buffer;
    const Fw::Success::T status = this->productGetOut_out(0, globalId, size, buffer);
    if (status == Fw::Success::SUCCESS) {
      // Assign a fresh DpContainer into container
      // This action clears out all the container state
      container = DpContainer(globalId, buffer, baseId);
      container.setPriority(priority);
    }
    return status;
  }

  void DpDemoComponentBase ::
    dpRequest(
        ContainerId::T containerId,
        FwSizeType dataSize
    )
  {
    const FwDpIdType globalId = this->getIdBase() + containerId;
    const FwSizeType size = DpContainer::getPacketSizeForDataSize(dataSize);
    this->productRequestOut_out(0, globalId, size);
  }

  void DpDemoComponentBase ::
    productRecvIn_handler(
        const FwIndexType portNum,
        FwDpIdType id,
        const Fw::Buffer& buffer,
        const Fw::Success& status
    )
  {
    DpContainer container(id, buffer, this->getIdBase());
    // Convert global id to local id
    const FwDpIdType idBase = this->getIdBase();
    FW_ASSERT(
      id >= idBase,
      static_cast<FwAssertArgType>(id),
      static_cast<FwAssertArgType>(idBase)
    );
    const FwDpIdType localId = id - idBase;
    // Switch on the local id
    switch (localId) {
      case ContainerId::DpDemoContainer:
        // Set the priority
        container.setPriority(ContainerPriority::DpDemoContainer);
        // Call the handler
        this->dpRecv_DpDemoContainer_handler(container, status.e);
        break;
      default:
        FW_ASSERT(0);
        break;
    }
  }

}
