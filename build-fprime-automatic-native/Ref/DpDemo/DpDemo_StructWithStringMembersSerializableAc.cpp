// ======================================================================
// \title  DpDemo_StructWithStringMembersSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for DpDemo_StructWithStringMembers struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Ref/DpDemo/DpDemo_StructWithStringMembersSerializableAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  DpDemo_StructWithStringMembers ::
    DpDemo_StructWithStringMembers() :
      Serializable(),
      m_stringMember(m___fprime_ac_stringMember_buffer, sizeof m___fprime_ac_stringMember_buffer, Fw::String("")),
      m_stringArrayMember(Ref::DpDemo_StringArray(Fw::String(""), Fw::String("")))
  {

  }

  DpDemo_StructWithStringMembers ::
    DpDemo_StructWithStringMembers(
        const Fw::StringBase& stringMember,
        const Ref::DpDemo_StringArray& stringArrayMember
    ) :
      Serializable(),
      m_stringMember(m___fprime_ac_stringMember_buffer, sizeof m___fprime_ac_stringMember_buffer, stringMember),
      m_stringArrayMember(stringArrayMember)
  {

  }

  DpDemo_StructWithStringMembers ::
    DpDemo_StructWithStringMembers(const DpDemo_StructWithStringMembers& obj) :
      Serializable(),
      m_stringMember(m___fprime_ac_stringMember_buffer, sizeof m___fprime_ac_stringMember_buffer, obj.m_stringMember),
      m_stringArrayMember(obj.m_stringArrayMember)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  DpDemo_StructWithStringMembers& DpDemo_StructWithStringMembers ::
    operator=(const DpDemo_StructWithStringMembers& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.m_stringMember, obj.m_stringArrayMember);
    return *this;
  }

  bool DpDemo_StructWithStringMembers ::
    operator==(const DpDemo_StructWithStringMembers& obj) const
  {
    if (this == &obj) { return true; }
    return (
      (this->m_stringMember == obj.m_stringMember) &&
      (this->m_stringArrayMember == obj.m_stringArrayMember)
    );
  }

  bool DpDemo_StructWithStringMembers ::
    operator!=(const DpDemo_StructWithStringMembers& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const DpDemo_StructWithStringMembers& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus DpDemo_StructWithStringMembers ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serializeFrom(this->m_stringMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_stringArrayMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus DpDemo_StructWithStringMembers ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserializeTo(this->m_stringMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_stringArrayMember);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  FwSizeType DpDemo_StructWithStringMembers ::
    serializedSize() const
  {
    FwSizeType size = 0;
    size += this->m_stringMember.serializedSize();
    size += this->m_stringArrayMember.serializedSize();
    return size;
  }

#if FW_SERIALIZABLE_TO_STRING

  void DpDemo_StructWithStringMembers ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String tmp;
    sb = "( ";

    // Format stringMember
    sb += "stringMember = ";
    sb += this->m_stringMember;
    sb += ", ";

    // Format stringArrayMember
    sb += "stringArrayMember = ";
    this->m_stringArrayMember.toString(tmp);
    sb += tmp;
    sb += " )";
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void DpDemo_StructWithStringMembers ::
    set(
        const Fw::StringBase& stringMember,
        const Ref::DpDemo_StringArray& stringArrayMember
    )
  {
    this->m_stringMember = stringMember;
    this->m_stringArrayMember = stringArrayMember;
  }

  void DpDemo_StructWithStringMembers ::
    set_stringMember(const Fw::StringBase& stringMember)
  {
    this->m_stringMember = stringMember;
  }

  void DpDemo_StructWithStringMembers ::
    set_stringArrayMember(const Ref::DpDemo_StringArray& stringArrayMember)
  {
    this->m_stringArrayMember = stringArrayMember;
  }

}
