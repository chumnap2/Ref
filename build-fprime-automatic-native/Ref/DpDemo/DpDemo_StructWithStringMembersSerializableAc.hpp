// ======================================================================
// \title  DpDemo_StructWithStringMembersSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for DpDemo_StructWithStringMembers struct
// ======================================================================

#ifndef Ref_DpDemo_DpDemo_StructWithStringMembersSerializableAc_HPP
#define Ref_DpDemo_DpDemo_StructWithStringMembersSerializableAc_HPP

#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"
#include "Ref/DpDemo/DpDemo_StringArrayArrayAc.hpp"

namespace Ref {

  class DpDemo_StructWithStringMembers :
    public Fw::Serializable
  {

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representation
        SERIALIZED_SIZE =
          Fw::StringBase::STATIC_SERIALIZED_SIZE(80) +
          Ref::DpDemo_StringArray::SERIALIZED_SIZE
      };

    public:

      // ----------------------------------------------------------------------
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value)
      DpDemo_StructWithStringMembers();

      //! Member constructor
      DpDemo_StructWithStringMembers(
          const Fw::StringBase& stringMember,
          const Ref::DpDemo_StringArray& stringArrayMember
      );

      //! Copy constructor
      DpDemo_StructWithStringMembers(
          const DpDemo_StructWithStringMembers& obj //!< The source object
      );

    public:

      // ----------------------------------------------------------------------
      // Operators
      // ----------------------------------------------------------------------

      //! Copy assignment operator
      DpDemo_StructWithStringMembers& operator=(
          const DpDemo_StructWithStringMembers& obj //!< The source object
      );

      //! Equality operator
      bool operator==(
          const DpDemo_StructWithStringMembers& obj //!< The other object
      ) const;

      //! Inequality operator
      bool operator!=(
          const DpDemo_StructWithStringMembers& obj //!< The other object
      ) const;

#ifdef BUILD_UT

      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const DpDemo_StructWithStringMembers& obj //!< The object
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Member functions
      // ----------------------------------------------------------------------

      //! Serialization
      Fw::SerializeStatus serializeTo(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      ) const;

      //! Deserialization
      Fw::SerializeStatus deserializeFrom(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      );

      //! Get the dynamic serialized size of the struct
      FwSizeType serializedSize() const;

#if FW_SERIALIZABLE_TO_STRING

      //! Convert struct to string
      void toString(
          Fw::StringBase& sb //!< The StringBase object to hold the result
      ) const;

#endif

      // ----------------------------------------------------------------------
      // Getter functions
      // ----------------------------------------------------------------------

      //! Get member stringMember
      Fw::ExternalString& get_stringMember()
      {
        return this->m_stringMember;
      }

      //! Get member stringMember (const)
      const Fw::ExternalString& get_stringMember() const
      {
        return this->m_stringMember;
      }

      //! Get member stringArrayMember
      Ref::DpDemo_StringArray& get_stringArrayMember()
      {
        return this->m_stringArrayMember;
      }

      //! Get member stringArrayMember (const)
      const Ref::DpDemo_StringArray& get_stringArrayMember() const
      {
        return this->m_stringArrayMember;
      }

      // ----------------------------------------------------------------------
      // Setter functions
      // ----------------------------------------------------------------------

      //! Set all members
      void set(
          const Fw::StringBase& stringMember,
          const Ref::DpDemo_StringArray& stringArrayMember
      );

      //! Set member stringMember
      void set_stringMember(const Fw::StringBase& stringMember);

      //! Set member stringArrayMember
      void set_stringArrayMember(const Ref::DpDemo_StringArray& stringArrayMember);

    protected:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      char m___fprime_ac_stringMember_buffer[Fw::StringBase::BUFFER_SIZE(80)];
      Fw::ExternalString m_stringMember;
      Ref::DpDemo_StringArray m_stringArrayMember;

  };

}

#endif
