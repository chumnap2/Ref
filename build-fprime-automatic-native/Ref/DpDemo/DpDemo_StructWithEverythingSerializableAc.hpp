// ======================================================================
// \title  DpDemo_StructWithEverythingSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for DpDemo_StructWithEverything struct
// ======================================================================

#ifndef Ref_DpDemo_DpDemo_StructWithEverythingSerializableAc_HPP
#define Ref_DpDemo_DpDemo_StructWithEverythingSerializableAc_HPP

#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"
#include "Ref/DpDemo/DpDemo_ArrayOfStringArrayArrayAc.hpp"
#include "Ref/DpDemo/DpDemo_BooleanArrayArrayAc.hpp"
#include "Ref/DpDemo/DpDemo_ColorEnumEnumAc.hpp"
#include "Ref/DpDemo/DpDemo_EnumArrayArrayAc.hpp"
#include "Ref/DpDemo/DpDemo_F32ArrayArrayAc.hpp"
#include "Ref/DpDemo/DpDemo_I32AliasAliasAc.hpp"
#include "Ref/DpDemo/DpDemo_StringArrayArrayAc.hpp"
#include "Ref/DpDemo/DpDemo_StructWithStringMembersSerializableAc.hpp"
#include "Ref/DpDemo/DpDemo_U32ArrayArrayAc.hpp"

namespace Ref {

  class DpDemo_StructWithEverything :
    public Fw::Serializable
  {

    public:

      // ----------------------------------------------------------------------
      // Types
      // ----------------------------------------------------------------------

      //! The type of arrayMemberU32
      using Type_of_arrayMemberU32 = Ref::DpDemo_U32Array[2];

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representation
        SERIALIZED_SIZE =
          sizeof(Ref::DpDemo_I32Alias) +
          sizeof(F32) +
          Fw::StringBase::STATIC_SERIALIZED_SIZE(80) +
          sizeof(U8) +
          Ref::DpDemo_ColorEnum::SERIALIZED_SIZE +
          Ref::DpDemo_U32Array::SERIALIZED_SIZE * 2 +
          Ref::DpDemo_F32Array::SERIALIZED_SIZE +
          Ref::DpDemo_U32Array::SERIALIZED_SIZE +
          Ref::DpDemo_EnumArray::SERIALIZED_SIZE +
          Ref::DpDemo_StringArray::SERIALIZED_SIZE +
          Ref::DpDemo_BooleanArray::SERIALIZED_SIZE +
          Ref::DpDemo_StructWithStringMembers::SERIALIZED_SIZE +
          Ref::DpDemo_ArrayOfStringArray::SERIALIZED_SIZE
      };

    public:

      // ----------------------------------------------------------------------
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value)
      DpDemo_StructWithEverything();

      //! Member constructor
      DpDemo_StructWithEverything(
          Ref::DpDemo_I32Alias integerMember,
          F32 floatMember,
          const Fw::StringBase& stringMember,
          bool booleanMember,
          Ref::DpDemo_ColorEnum::T enumMember,
          const Type_of_arrayMemberU32& arrayMemberU32,
          const Ref::DpDemo_F32Array& F32Array,
          const Ref::DpDemo_U32Array& U32Array,
          const Ref::DpDemo_EnumArray& enumArray,
          const Ref::DpDemo_StringArray& stringArray,
          const Ref::DpDemo_BooleanArray& booleanArray,
          const Ref::DpDemo_StructWithStringMembers& structWithStrings,
          const Ref::DpDemo_ArrayOfStringArray& nestedArrays
      );

      //! Copy constructor
      DpDemo_StructWithEverything(
          const DpDemo_StructWithEverything& obj //!< The source object
      );

      //! Member constructor (scalar values for arrays)
      DpDemo_StructWithEverything(
          Ref::DpDemo_I32Alias integerMember,
          F32 floatMember,
          const Fw::StringBase& stringMember,
          bool booleanMember,
          Ref::DpDemo_ColorEnum::T enumMember,
          const Ref::DpDemo_U32Array& arrayMemberU32,
          const Ref::DpDemo_F32Array& F32Array,
          const Ref::DpDemo_U32Array& U32Array,
          const Ref::DpDemo_EnumArray& enumArray,
          const Ref::DpDemo_StringArray& stringArray,
          const Ref::DpDemo_BooleanArray& booleanArray,
          const Ref::DpDemo_StructWithStringMembers& structWithStrings,
          const Ref::DpDemo_ArrayOfStringArray& nestedArrays
      );

    public:

      // ----------------------------------------------------------------------
      // Operators
      // ----------------------------------------------------------------------

      //! Copy assignment operator
      DpDemo_StructWithEverything& operator=(
          const DpDemo_StructWithEverything& obj //!< The source object
      );

      //! Equality operator
      bool operator==(
          const DpDemo_StructWithEverything& obj //!< The other object
      ) const;

      //! Inequality operator
      bool operator!=(
          const DpDemo_StructWithEverything& obj //!< The other object
      ) const;

#ifdef BUILD_UT

      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const DpDemo_StructWithEverything& obj //!< The object
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Member functions
      // ----------------------------------------------------------------------

      //! Serialization
      Fw::SerializeStatus serializeTo(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      ) const;

      //! Deserialization
      Fw::SerializeStatus deserializeFrom(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      );

      //! Get the dynamic serialized size of the struct
      FwSizeType serializedSize() const;

#if FW_SERIALIZABLE_TO_STRING

      //! Convert struct to string
      void toString(
          Fw::StringBase& sb //!< The StringBase object to hold the result
      ) const;

#endif

      // ----------------------------------------------------------------------
      // Getter functions
      // ----------------------------------------------------------------------

      //! Get member integerMember
      Ref::DpDemo_I32Alias get_integerMember() const
      {
        return this->m_integerMember;
      }

      //! Get member floatMember
      F32 get_floatMember() const
      {
        return this->m_floatMember;
      }

      //! Get member stringMember
      Fw::ExternalString& get_stringMember()
      {
        return this->m_stringMember;
      }

      //! Get member stringMember (const)
      const Fw::ExternalString& get_stringMember() const
      {
        return this->m_stringMember;
      }

      //! Get member booleanMember
      bool get_booleanMember() const
      {
        return this->m_booleanMember;
      }

      //! Get member enumMember
      Ref::DpDemo_ColorEnum::T get_enumMember() const
      {
        return this->m_enumMember.e;
      }

      //! Get member arrayMemberU32
      Type_of_arrayMemberU32& get_arrayMemberU32()
      {
        return this->m_arrayMemberU32;
      }

      //! Get member arrayMemberU32 (const)
      const Type_of_arrayMemberU32& get_arrayMemberU32() const
      {
        return this->m_arrayMemberU32;
      }

      //! Get member F32Array
      Ref::DpDemo_F32Array& get_F32Array()
      {
        return this->m_F32Array;
      }

      //! Get member F32Array (const)
      const Ref::DpDemo_F32Array& get_F32Array() const
      {
        return this->m_F32Array;
      }

      //! Get member U32Array
      Ref::DpDemo_U32Array& get_U32Array()
      {
        return this->m_U32Array;
      }

      //! Get member U32Array (const)
      const Ref::DpDemo_U32Array& get_U32Array() const
      {
        return this->m_U32Array;
      }

      //! Get member enumArray
      Ref::DpDemo_EnumArray& get_enumArray()
      {
        return this->m_enumArray;
      }

      //! Get member enumArray (const)
      const Ref::DpDemo_EnumArray& get_enumArray() const
      {
        return this->m_enumArray;
      }

      //! Get member stringArray
      Ref::DpDemo_StringArray& get_stringArray()
      {
        return this->m_stringArray;
      }

      //! Get member stringArray (const)
      const Ref::DpDemo_StringArray& get_stringArray() const
      {
        return this->m_stringArray;
      }

      //! Get member booleanArray
      Ref::DpDemo_BooleanArray& get_booleanArray()
      {
        return this->m_booleanArray;
      }

      //! Get member booleanArray (const)
      const Ref::DpDemo_BooleanArray& get_booleanArray() const
      {
        return this->m_booleanArray;
      }

      //! Get member structWithStrings
      Ref::DpDemo_StructWithStringMembers& get_structWithStrings()
      {
        return this->m_structWithStrings;
      }

      //! Get member structWithStrings (const)
      const Ref::DpDemo_StructWithStringMembers& get_structWithStrings() const
      {
        return this->m_structWithStrings;
      }

      //! Get member nestedArrays
      Ref::DpDemo_ArrayOfStringArray& get_nestedArrays()
      {
        return this->m_nestedArrays;
      }

      //! Get member nestedArrays (const)
      const Ref::DpDemo_ArrayOfStringArray& get_nestedArrays() const
      {
        return this->m_nestedArrays;
      }

      // ----------------------------------------------------------------------
      // Setter functions
      // ----------------------------------------------------------------------

      //! Set all members
      void set(
          Ref::DpDemo_I32Alias integerMember,
          F32 floatMember,
          const Fw::StringBase& stringMember,
          bool booleanMember,
          Ref::DpDemo_ColorEnum::T enumMember,
          const Type_of_arrayMemberU32& arrayMemberU32,
          const Ref::DpDemo_F32Array& F32Array,
          const Ref::DpDemo_U32Array& U32Array,
          const Ref::DpDemo_EnumArray& enumArray,
          const Ref::DpDemo_StringArray& stringArray,
          const Ref::DpDemo_BooleanArray& booleanArray,
          const Ref::DpDemo_StructWithStringMembers& structWithStrings,
          const Ref::DpDemo_ArrayOfStringArray& nestedArrays
      );

      //! Set member integerMember
      void set_integerMember(Ref::DpDemo_I32Alias integerMember);

      //! Set member floatMember
      void set_floatMember(F32 floatMember);

      //! Set member stringMember
      void set_stringMember(const Fw::StringBase& stringMember);

      //! Set member booleanMember
      void set_booleanMember(bool booleanMember);

      //! Set member enumMember
      void set_enumMember(Ref::DpDemo_ColorEnum::T enumMember);

      //! Set member arrayMemberU32
      void set_arrayMemberU32(const Type_of_arrayMemberU32& arrayMemberU32);

      //! Set member F32Array
      void set_F32Array(const Ref::DpDemo_F32Array& F32Array);

      //! Set member U32Array
      void set_U32Array(const Ref::DpDemo_U32Array& U32Array);

      //! Set member enumArray
      void set_enumArray(const Ref::DpDemo_EnumArray& enumArray);

      //! Set member stringArray
      void set_stringArray(const Ref::DpDemo_StringArray& stringArray);

      //! Set member booleanArray
      void set_booleanArray(const Ref::DpDemo_BooleanArray& booleanArray);

      //! Set member structWithStrings
      void set_structWithStrings(const Ref::DpDemo_StructWithStringMembers& structWithStrings);

      //! Set member nestedArrays
      void set_nestedArrays(const Ref::DpDemo_ArrayOfStringArray& nestedArrays);

    protected:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      Ref::DpDemo_I32Alias m_integerMember;
      F32 m_floatMember;
      char m___fprime_ac_stringMember_buffer[Fw::StringBase::BUFFER_SIZE(80)];
      Fw::ExternalString m_stringMember;
      bool m_booleanMember;
      Ref::DpDemo_ColorEnum m_enumMember;
      Ref::DpDemo_U32Array m_arrayMemberU32[2];
      Ref::DpDemo_F32Array m_F32Array;
      Ref::DpDemo_U32Array m_U32Array;
      Ref::DpDemo_EnumArray m_enumArray;
      Ref::DpDemo_StringArray m_stringArray;
      Ref::DpDemo_BooleanArray m_booleanArray;
      Ref::DpDemo_StructWithStringMembers m_structWithStrings;
      Ref::DpDemo_ArrayOfStringArray m_nestedArrays;

  };

}

#endif
