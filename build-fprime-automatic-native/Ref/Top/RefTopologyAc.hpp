// ======================================================================
// \title  RefTopologyAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Ref topology
// ======================================================================

#ifndef Ref_RefTopologyAc_HPP
#define Ref_RefTopologyAc_HPP

#include "Drv/TcpClient/TcpClient.hpp"
#include "Ref/BlockDriver/BlockDriver.hpp"
#include "Ref/DpDemo/DpDemo.hpp"
#include "Ref/PingReceiver/PingReceiver.hpp"
#include "Ref/RecvBuffApp/RecvBuff.hpp"
#include "Ref/SendBuffApp/SendBuff.hpp"
#include "Ref/SignalGen/SignalGen.hpp"
#include "Ref/Top/RefTopologyDefs.hpp"
#include "Ref/Top/Ref_RefPacketsTlmPacketsAc.hpp"
#include "Ref/TypeDemo/TypeDemo.hpp"
#include "Svc/ActiveRateGroup/ActiveRateGroup.hpp"
#include "Svc/AssertFatalAdapter/AssertFatalAdapter.hpp"
#include "Svc/BufferManager/BufferManager.hpp"
#include "Svc/Ccsds/ApidManager/ApidManager.hpp"
#include "Svc/Ccsds/SpacePacketDeframer/SpacePacketDeframer.hpp"
#include "Svc/Ccsds/SpacePacketFramer/SpacePacketFramer.hpp"
#include "Svc/Ccsds/TcDeframer/TcDeframer.hpp"
#include "Svc/Ccsds/TmFramer/TmFramer.hpp"
#include "Svc/CmdDispatcher/CommandDispatcher.hpp"
#include "Svc/CmdSequencer/CmdSequencer.hpp"
#include "Svc/ComQueue/ComQueue.hpp"
#include "Svc/ComStub/ComStub.hpp"
#include "Svc/DpCatalog/DpCatalog.hpp"
#include "Svc/DpManager/DpManager.hpp"
#include "Svc/DpWriter/DpWriter.hpp"
#include "Svc/EventManager/EventManager.hpp"
#include "Svc/FatalHandler/FatalHandler.hpp"
#include "Svc/FileDownlink/FileDownlink.hpp"
#include "Svc/FileManager/FileManager.hpp"
#include "Svc/FileUplink/FileUplink.hpp"
#include "Svc/FprimeRouter/FprimeRouter.hpp"
#include "Svc/FrameAccumulator/FrameAccumulator.hpp"
#include "Svc/Health/Health.hpp"
#include "Svc/LinuxTimer/LinuxTimer.hpp"
#include "Svc/PassiveConsoleTextLogger/PassiveTextLogger.hpp"
#include "Svc/PosixTime/PosixTime.hpp"
#include "Svc/PrmDb/PrmDb.hpp"
#include "Svc/RateGroupDriver/RateGroupDriver.hpp"
#include "Svc/SystemResources/SystemResources.hpp"
#include "Svc/TlmChan/TlmChan.hpp"
#include "Svc/Version/Version.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace CdhCore {

  //! cmdDisp
  extern Svc::CommandDispatcher cmdDisp;

}

namespace CdhCore {

  //! events
  extern Svc::EventManager events;

}

namespace CdhCore {

  //! fatalAdapter
  extern Svc::AssertFatalAdapter fatalAdapter;

}

namespace CdhCore {

  //! fatalHandler
  extern Svc::FatalHandler fatalHandler;

}

namespace CdhCore {

  //! health
  extern Svc::Health health;

}

namespace CdhCore {

  //! textLogger
  extern Svc::PassiveTextLogger textLogger;

}

namespace CdhCore {

  //! tlmSend
  extern Svc::TlmChan tlmSend;

}

namespace CdhCore {

  //! version
  extern Svc::Version version;

}

namespace ComCcsds {

  //! apidManager
  extern Svc::Ccsds::ApidManager apidManager;

}

namespace ComCcsds {

  //! comQueue
  extern Svc::ComQueue comQueue;

}

namespace ComCcsds {

  //! comStub
  extern Svc::ComStub comStub;

}

namespace ComCcsds {

  //! commsBufferManager
  extern Svc::BufferManager commsBufferManager;

}

namespace ComCcsds {

  //! fprimeRouter
  extern Svc::FprimeRouter fprimeRouter;

}

namespace ComCcsds {

  //! frameAccumulator
  extern Svc::FrameAccumulator frameAccumulator;

}

namespace ComCcsds {

  //! spacePacketDeframer
  extern Svc::Ccsds::SpacePacketDeframer spacePacketDeframer;

}

namespace ComCcsds {

  //! spacePacketFramer
  extern Svc::Ccsds::SpacePacketFramer spacePacketFramer;

}

namespace ComCcsds {

  //! tcDeframer
  extern Svc::Ccsds::TcDeframer tcDeframer;

}

namespace ComCcsds {

  //! tmFramer
  extern Svc::Ccsds::TmFramer tmFramer;

}

namespace DataProducts {

  //! dpBufferManager
  extern Svc::BufferManager dpBufferManager;

}

namespace DataProducts {

  //! dpCat
  extern Svc::DpCatalog dpCat;

}

namespace DataProducts {

  //! dpMgr
  extern Svc::DpManager dpMgr;

}

namespace DataProducts {

  //! dpWriter
  extern Svc::DpWriter dpWriter;

}

namespace FileHandling {

  //! fileDownlink
  extern Svc::FileDownlink fileDownlink;

}

namespace FileHandling {

  //! fileManager
  extern Svc::FileManager fileManager;

}

namespace FileHandling {

  //! fileUplink
  extern Svc::FileUplink fileUplink;

}

namespace FileHandling {

  //! prmDb
  extern Svc::PrmDb prmDb;

}

namespace Ref {

  //! SG1
  extern Ref::SignalGen SG1;

}

namespace Ref {

  //! SG2
  extern Ref::SignalGen SG2;

}

namespace Ref {

  //! SG3
  extern Ref::SignalGen SG3;

}

namespace Ref {

  //! SG4
  extern Ref::SignalGen SG4;

}

namespace Ref {

  //! SG5
  extern Ref::SignalGen SG5;

}

namespace Ref {

  //! blockDrv
  extern Ref::BlockDriver blockDrv;

}

namespace Ref {

  //! cmdSeq
  extern Svc::CmdSequencer cmdSeq;

}

namespace Ref {

  //! comDriver
  extern Drv::TcpClient comDriver;

}

namespace Ref {

  //! dpDemo
  extern Ref::DpDemo dpDemo;

}

namespace Ref {

  //! linuxTimer
  extern Svc::LinuxTimer linuxTimer;

}

namespace Ref {

  //! pingRcvr
  extern Ref::PingReceiver pingRcvr;

}

namespace Ref {

  //! posixTime
  extern Svc::PosixTime posixTime;

}

namespace Ref {

  //! rateGroup1Comp
  extern Svc::ActiveRateGroup rateGroup1Comp;

}

namespace Ref {

  //! rateGroup2Comp
  extern Svc::ActiveRateGroup rateGroup2Comp;

}

namespace Ref {

  //! rateGroup3Comp
  extern Svc::ActiveRateGroup rateGroup3Comp;

}

namespace Ref {

  //! rateGroupDriverComp
  extern Svc::RateGroupDriver rateGroupDriverComp;

}

namespace Ref {

  //! recvBuffComp
  extern Ref::RecvBuff recvBuffComp;

}

namespace Ref {

  //! sendBuffComp
  extern Ref::SendBuff sendBuffComp;

}

namespace Ref {

  //! systemResources
  extern Svc::SystemResources systemResources;

}

namespace Ref {

  //! typeDemo
  extern Ref::TypeDemo typeDemo;

}

namespace Ref {

  // ----------------------------------------------------------------------
  // Constants
  // ----------------------------------------------------------------------

  namespace ConfigConstants {
    namespace CdhCore_health {
      enum {
          HEALTH_WATCHDOG_CODE = 0x123
      };
    }
  }

  namespace BaseIds {
    enum {
      Ref_dpDemo = 0xA10,
      CdhCore_cmdDisp = 0x1000000,
      CdhCore_events = 0x1001000,
      CdhCore_health = 0x1002000,
      CdhCore_version = 0x1003000,
      CdhCore_textLogger = 0x1004000,
      CdhCore_fatalAdapter = 0x1005000,
      CdhCore_tlmSend = 0x1006000,
      CdhCore_fatalHandler = 0x1007000,
      ComCcsds_comQueue = 0x2000000,
      ComCcsds_frameAccumulator = 0x2001000,
      ComCcsds_commsBufferManager = 0x2002000,
      ComCcsds_fprimeRouter = 0x2003000,
      ComCcsds_comStub = 0x2004000,
      ComCcsds_tcDeframer = 0x2005000,
      ComCcsds_spacePacketDeframer = 0x2006000,
      ComCcsds_tmFramer = 0x2007000,
      ComCcsds_spacePacketFramer = 0x2008000,
      ComCcsds_apidManager = 0x2009000,
      DataProducts_dpCat = 0x4000000,
      DataProducts_dpMgr = 0x4001000,
      DataProducts_dpWriter = 0x4002000,
      DataProducts_dpBufferManager = 0x4003000,
      FileHandling_fileUplink = 0x5000000,
      FileHandling_fileDownlink = 0x5001000,
      FileHandling_fileManager = 0x5002000,
      FileHandling_prmDb = 0x5003000,
      Ref_blockDrv = 0x10000000,
      Ref_rateGroup1Comp = 0x10001000,
      Ref_rateGroup2Comp = 0x10002000,
      Ref_rateGroup3Comp = 0x10003000,
      Ref_pingRcvr = 0x10004000,
      Ref_typeDemo = 0x10005000,
      Ref_cmdSeq = 0x10006000,
      Ref_sendBuffComp = 0x10010000,
      Ref_SG1 = 0x10011000,
      Ref_SG2 = 0x10012000,
      Ref_SG3 = 0x10013000,
      Ref_SG4 = 0x10014000,
      Ref_SG5 = 0x10015000,
      Ref_posixTime = 0x10020000,
      Ref_rateGroupDriverComp = 0x10021000,
      Ref_recvBuffComp = 0x10022000,
      Ref_systemResources = 0x10023000,
      Ref_linuxTimer = 0x10024000,
      Ref_comDriver = 0x10025000,
    };
  }

  namespace InstanceIds {
    enum {
      CdhCore_cmdDisp,
      CdhCore_events,
      CdhCore_fatalAdapter,
      CdhCore_fatalHandler,
      CdhCore_health,
      CdhCore_textLogger,
      CdhCore_tlmSend,
      CdhCore_version,
      ComCcsds_apidManager,
      ComCcsds_comQueue,
      ComCcsds_comStub,
      ComCcsds_commsBufferManager,
      ComCcsds_fprimeRouter,
      ComCcsds_frameAccumulator,
      ComCcsds_spacePacketDeframer,
      ComCcsds_spacePacketFramer,
      ComCcsds_tcDeframer,
      ComCcsds_tmFramer,
      DataProducts_dpBufferManager,
      DataProducts_dpCat,
      DataProducts_dpMgr,
      DataProducts_dpWriter,
      FileHandling_fileDownlink,
      FileHandling_fileManager,
      FileHandling_fileUplink,
      FileHandling_prmDb,
      Ref_SG1,
      Ref_SG2,
      Ref_SG3,
      Ref_SG4,
      Ref_SG5,
      Ref_blockDrv,
      Ref_cmdSeq,
      Ref_comDriver,
      Ref_dpDemo,
      Ref_linuxTimer,
      Ref_pingRcvr,
      Ref_posixTime,
      Ref_rateGroup1Comp,
      Ref_rateGroup2Comp,
      Ref_rateGroup3Comp,
      Ref_rateGroupDriverComp,
      Ref_recvBuffComp,
      Ref_sendBuffComp,
      Ref_systemResources,
      Ref_typeDemo,
    };
  }

  namespace Priorities {
    enum {
      CdhCore_cmdDisp = 102,
      CdhCore_events = 100,
      CdhCore_tlmSend = 99,
      ComCcsds_comQueue = 101,
      DataProducts_dpCat = 101,
      DataProducts_dpMgr = 100,
      DataProducts_dpWriter = 99,
      FileHandling_fileDownlink = 100,
      FileHandling_fileManager = 99,
      FileHandling_fileUplink = 101,
      FileHandling_prmDb = 98,
      Ref_blockDrv = 140,
      Ref_cmdSeq = 97,
      Ref_dpDemo = 96,
      Ref_pingRcvr = 100,
      Ref_rateGroup1Comp = 120,
      Ref_rateGroup2Comp = 119,
      Ref_rateGroup3Comp = 118,
    };
  }

  namespace QueueSizes {
    enum {
      CdhCore_cmdDisp = 10,
      CdhCore_events = 10,
      CdhCore_health = 25,
      CdhCore_tlmSend = 10,
      ComCcsds_comQueue = 50,
      DataProducts_dpCat = 10,
      DataProducts_dpMgr = 10,
      DataProducts_dpWriter = 10,
      FileHandling_fileDownlink = 10,
      FileHandling_fileManager = 10,
      FileHandling_fileUplink = 10,
      FileHandling_prmDb = 10,
      Ref_SG1 = 10,
      Ref_SG2 = 10,
      Ref_SG3 = 10,
      Ref_SG4 = 10,
      Ref_SG5 = 10,
      Ref_blockDrv = 10,
      Ref_cmdSeq = 10,
      Ref_dpDemo = 10,
      Ref_pingRcvr = 10,
      Ref_rateGroup1Comp = 10,
      Ref_rateGroup2Comp = 10,
      Ref_rateGroup3Comp = 10,
      Ref_sendBuffComp = 10,
    };
  }

  namespace StackSizes {
    enum {
      CdhCore_cmdDisp = 65536,
      CdhCore_events = 65536,
      CdhCore_tlmSend = 65536,
      ComCcsds_comQueue = 65536,
      DataProducts_dpCat = 65536,
      DataProducts_dpMgr = 65536,
      DataProducts_dpWriter = 65536,
      FileHandling_fileDownlink = 65536,
      FileHandling_fileManager = 65536,
      FileHandling_fileUplink = 65536,
      FileHandling_prmDb = 65536,
      Ref_blockDrv = 65536,
      Ref_cmdSeq = 65536,
      Ref_dpDemo = 65536,
      Ref_pingRcvr = 65536,
      Ref_rateGroup1Comp = 65536,
      Ref_rateGroup2Comp = 65536,
      Ref_rateGroup3Comp = 65536,
    };
  }

  namespace TaskIds {
    enum {
      CdhCore_cmdDisp,
      CdhCore_events,
      CdhCore_tlmSend,
      ComCcsds_comQueue,
      DataProducts_dpCat,
      DataProducts_dpMgr,
      DataProducts_dpWriter,
      FileHandling_fileDownlink,
      FileHandling_fileManager,
      FileHandling_fileUplink,
      FileHandling_prmDb,
      Ref_blockDrv,
      Ref_cmdSeq,
      Ref_dpDemo,
      Ref_pingRcvr,
      Ref_rateGroup1Comp,
      Ref_rateGroup2Comp,
      Ref_rateGroup3Comp,
    };
  }

  // ----------------------------------------------------------------------
  // Component configuration objects
  // ----------------------------------------------------------------------

  namespace ConfigObjects {

    namespace CdhCore_health {
      //!< Number of entries in the pingEntryies array
      constexpr FwSizeType NUM_PING_ENTRIES = 14;
      //!< Ping entry configuration for Svc::Health
      extern Svc::Health::PingEntry pingEntries[NUM_PING_ENTRIES];
    }

  }

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  //! Initialize components
  void initComponents(
      const TopologyState& state //!< The topology state
  );

  //! Configure components
  void configComponents(
      const TopologyState& state //!< The topology state
  );

  //! Set component base Ids
  void setBaseIds();

  //! Connect components
  void connectComponents();

  //! Register commands
  void regCommands();

  //! Read parameters
  void readParameters();

  //! Load parameters
  void loadParameters();

  //! Start tasks
  void startTasks(
      const TopologyState& state //!< The topology state
  );

  //! Stop tasks
  void stopTasks(
      const TopologyState& state //!< The topology state
  );

  //! Free threads
  void freeThreads(
      const TopologyState& state //!< The topology state
  );

  //! Tear down components
  void tearDownComponents(
      const TopologyState& state //!< The topology state
  );

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  //! Set up the topology
  void setup(
      const TopologyState& state //!< The topology state
  );

  //! Tear down the topology
  void teardown(
      const TopologyState& state //!< The topology state
  );

}

#endif
