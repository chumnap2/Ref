// ======================================================================
// \title  ScalarStructSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for ScalarStruct struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Ref/TypeDemo/ScalarStructSerializableAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  ScalarStruct ::
    ScalarStruct() :
      Serializable(),
      m_i8(0),
      m_i16(0),
      m_i32(0),
      m_i64(0),
      m_u8(0),
      m_u16(0),
      m_u32(0),
      m_u64(0),
      m_f32(0.0f),
      m_f64(0.0)
  {

  }

  ScalarStruct ::
    ScalarStruct(
        I8 i8,
        I16 i16,
        I32 i32,
        I64 i64,
        U8 u8,
        U16 u16,
        U32 u32,
        U64 u64,
        F32 f32,
        F64 f64
    ) :
      Serializable(),
      m_i8(i8),
      m_i16(i16),
      m_i32(i32),
      m_i64(i64),
      m_u8(u8),
      m_u16(u16),
      m_u32(u32),
      m_u64(u64),
      m_f32(f32),
      m_f64(f64)
  {

  }

  ScalarStruct ::
    ScalarStruct(const ScalarStruct& obj) :
      Serializable(),
      m_i8(obj.m_i8),
      m_i16(obj.m_i16),
      m_i32(obj.m_i32),
      m_i64(obj.m_i64),
      m_u8(obj.m_u8),
      m_u16(obj.m_u16),
      m_u32(obj.m_u32),
      m_u64(obj.m_u64),
      m_f32(obj.m_f32),
      m_f64(obj.m_f64)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  ScalarStruct& ScalarStruct ::
    operator=(const ScalarStruct& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.m_i8, obj.m_i16, obj.m_i32, obj.m_i64, obj.m_u8, obj.m_u16, obj.m_u32, obj.m_u64, obj.m_f32, obj.m_f64);
    return *this;
  }

  bool ScalarStruct ::
    operator==(const ScalarStruct& obj) const
  {
    if (this == &obj) { return true; }
    return (
      (this->m_i8 == obj.m_i8) &&
      (this->m_i16 == obj.m_i16) &&
      (this->m_i32 == obj.m_i32) &&
      (this->m_i64 == obj.m_i64) &&
      (this->m_u8 == obj.m_u8) &&
      (this->m_u16 == obj.m_u16) &&
      (this->m_u32 == obj.m_u32) &&
      (this->m_u64 == obj.m_u64) &&
      (this->m_f32 == obj.m_f32) &&
      (this->m_f64 == obj.m_f64)
    );
  }

  bool ScalarStruct ::
    operator!=(const ScalarStruct& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const ScalarStruct& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus ScalarStruct ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serializeFrom(this->m_i8);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_i16);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_i32);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_i64);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_u8);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_u16);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_u32);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_u64);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_f32);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_f64);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus ScalarStruct ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserializeTo(this->m_i8);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_i16);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_i32);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_i64);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_u8);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_u16);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_u32);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_u64);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_f32);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_f64);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  FwSizeType ScalarStruct ::
    serializedSize() const
  {
    FwSizeType size = 0;
    size += sizeof(I8);
    size += sizeof(I16);
    size += sizeof(I32);
    size += sizeof(I64);
    size += sizeof(U8);
    size += sizeof(U16);
    size += sizeof(U32);
    size += sizeof(U64);
    size += sizeof(F32);
    size += sizeof(F64);
    return size;
  }

#if FW_SERIALIZABLE_TO_STRING

  void ScalarStruct ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String tmp;
    sb = "( ";

    // Format i8
    sb += "i8 = ";
    tmp.format("%" PRIi8 "", this->m_i8);
    sb += tmp;
    sb += ", ";

    // Format i16
    sb += "i16 = ";
    tmp.format("%" PRIi16 "", this->m_i16);
    sb += tmp;
    sb += ", ";

    // Format i32
    sb += "i32 = ";
    tmp.format("%" PRIi32 "", this->m_i32);
    sb += tmp;
    sb += ", ";

    // Format i64
    sb += "i64 = ";
    tmp.format("%" PRIi64 "", this->m_i64);
    sb += tmp;
    sb += ", ";

    // Format u8
    sb += "u8 = ";
    tmp.format("%" PRIu8 "", this->m_u8);
    sb += tmp;
    sb += ", ";

    // Format u16
    sb += "u16 = ";
    tmp.format("%" PRIu16 "", this->m_u16);
    sb += tmp;
    sb += ", ";

    // Format u32
    sb += "u32 = ";
    tmp.format("%" PRIu32 "", this->m_u32);
    sb += tmp;
    sb += ", ";

    // Format u64
    sb += "u64 = ";
    tmp.format("%" PRIu64 "", this->m_u64);
    sb += tmp;
    sb += ", ";

    // Format f32
    sb += "f32 = ";
    tmp.format("%f", static_cast<F64>(this->m_f32));
    sb += tmp;
    sb += ", ";

    // Format f64
    sb += "f64 = ";
    tmp.format("%f", this->m_f64);
    sb += tmp;
    sb += " )";
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void ScalarStruct ::
    set(
        I8 i8,
        I16 i16,
        I32 i32,
        I64 i64,
        U8 u8,
        U16 u16,
        U32 u32,
        U64 u64,
        F32 f32,
        F64 f64
    )
  {
    this->m_i8 = i8;
    this->m_i16 = i16;
    this->m_i32 = i32;
    this->m_i64 = i64;
    this->m_u8 = u8;
    this->m_u16 = u16;
    this->m_u32 = u32;
    this->m_u64 = u64;
    this->m_f32 = f32;
    this->m_f64 = f64;
  }

  void ScalarStruct ::
    set_i8(I8 i8)
  {
    this->m_i8 = i8;
  }

  void ScalarStruct ::
    set_i16(I16 i16)
  {
    this->m_i16 = i16;
  }

  void ScalarStruct ::
    set_i32(I32 i32)
  {
    this->m_i32 = i32;
  }

  void ScalarStruct ::
    set_i64(I64 i64)
  {
    this->m_i64 = i64;
  }

  void ScalarStruct ::
    set_u8(U8 u8)
  {
    this->m_u8 = u8;
  }

  void ScalarStruct ::
    set_u16(U16 u16)
  {
    this->m_u16 = u16;
  }

  void ScalarStruct ::
    set_u32(U32 u32)
  {
    this->m_u32 = u32;
  }

  void ScalarStruct ::
    set_u64(U64 u64)
  {
    this->m_u64 = u64;
  }

  void ScalarStruct ::
    set_f32(F32 f32)
  {
    this->m_f32 = f32;
  }

  void ScalarStruct ::
    set_f64(F64 f64)
  {
    this->m_f64 = f64;
  }

}
