// ======================================================================
// \title  ChoiceSlurrySerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for ChoiceSlurry struct
// ======================================================================

#ifndef Ref_ChoiceSlurrySerializableAc_HPP
#define Ref_ChoiceSlurrySerializableAc_HPP

#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"
#include "Ref/TypeDemo/ChoiceEnumAc.hpp"
#include "Ref/TypeDemo/ChoicePairSerializableAc.hpp"
#include "Ref/TypeDemo/TooManyChoicesArrayAc.hpp"

namespace Ref {

  //! Structure of enums (with an multi-dimensional array and structure)
  class ChoiceSlurry :
    public Fw::Serializable
  {

    public:

      // ----------------------------------------------------------------------
      // Types
      // ----------------------------------------------------------------------

      //! The type of choiceAsMemberArray
      using Type_of_choiceAsMemberArray = U8[2];

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representation
        SERIALIZED_SIZE =
          Ref::TooManyChoices::SERIALIZED_SIZE +
          Ref::Choice::SERIALIZED_SIZE +
          Ref::ChoicePair::SERIALIZED_SIZE +
          sizeof(U8) * 2
      };

    public:

      // ----------------------------------------------------------------------
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value)
      ChoiceSlurry();

      //! Member constructor
      ChoiceSlurry(
          const Ref::TooManyChoices& tooManyChoices,
          Ref::Choice::T separateChoice,
          const Ref::ChoicePair& choicePair,
          const Type_of_choiceAsMemberArray& choiceAsMemberArray
      );

      //! Copy constructor
      ChoiceSlurry(
          const ChoiceSlurry& obj //!< The source object
      );

      //! Member constructor (scalar values for arrays)
      ChoiceSlurry(
          const Ref::TooManyChoices& tooManyChoices,
          Ref::Choice::T separateChoice,
          const Ref::ChoicePair& choicePair,
          U8 choiceAsMemberArray
      );

    public:

      // ----------------------------------------------------------------------
      // Operators
      // ----------------------------------------------------------------------

      //! Copy assignment operator
      ChoiceSlurry& operator=(
          const ChoiceSlurry& obj //!< The source object
      );

      //! Equality operator
      bool operator==(
          const ChoiceSlurry& obj //!< The other object
      ) const;

      //! Inequality operator
      bool operator!=(
          const ChoiceSlurry& obj //!< The other object
      ) const;

#ifdef BUILD_UT

      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const ChoiceSlurry& obj //!< The object
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Member functions
      // ----------------------------------------------------------------------

      //! Serialization
      Fw::SerializeStatus serializeTo(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      ) const;

      //! Deserialization
      Fw::SerializeStatus deserializeFrom(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      );

      //! Get the dynamic serialized size of the struct
      FwSizeType serializedSize() const;

#if FW_SERIALIZABLE_TO_STRING

      //! Convert struct to string
      void toString(
          Fw::StringBase& sb //!< The StringBase object to hold the result
      ) const;

#endif

      // ----------------------------------------------------------------------
      // Getter functions
      // ----------------------------------------------------------------------

      //! Get member tooManyChoices
      Ref::TooManyChoices& get_tooManyChoices()
      {
        return this->m_tooManyChoices;
      }

      //! Get member tooManyChoices (const)
      const Ref::TooManyChoices& get_tooManyChoices() const
      {
        return this->m_tooManyChoices;
      }

      //! Get member separateChoice
      Ref::Choice::T get_separateChoice() const
      {
        return this->m_separateChoice.e;
      }

      //! Get member choicePair
      Ref::ChoicePair& get_choicePair()
      {
        return this->m_choicePair;
      }

      //! Get member choicePair (const)
      const Ref::ChoicePair& get_choicePair() const
      {
        return this->m_choicePair;
      }

      //! Get member choiceAsMemberArray
      Type_of_choiceAsMemberArray& get_choiceAsMemberArray()
      {
        return this->m_choiceAsMemberArray;
      }

      //! Get member choiceAsMemberArray (const)
      const Type_of_choiceAsMemberArray& get_choiceAsMemberArray() const
      {
        return this->m_choiceAsMemberArray;
      }

      // ----------------------------------------------------------------------
      // Setter functions
      // ----------------------------------------------------------------------

      //! Set all members
      void set(
          const Ref::TooManyChoices& tooManyChoices,
          Ref::Choice::T separateChoice,
          const Ref::ChoicePair& choicePair,
          const Type_of_choiceAsMemberArray& choiceAsMemberArray
      );

      //! Set member tooManyChoices
      void set_tooManyChoices(const Ref::TooManyChoices& tooManyChoices);

      //! Set member separateChoice
      void set_separateChoice(Ref::Choice::T separateChoice);

      //! Set member choicePair
      void set_choicePair(const Ref::ChoicePair& choicePair);

      //! Set member choiceAsMemberArray
      void set_choiceAsMemberArray(const Type_of_choiceAsMemberArray& choiceAsMemberArray);

    protected:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      Ref::TooManyChoices m_tooManyChoices;
      Ref::Choice m_separateChoice;
      Ref::ChoicePair m_choicePair;
      U8 m_choiceAsMemberArray[2];

  };

}

#endif
