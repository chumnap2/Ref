// ======================================================================
// \title  ChoicePairSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for ChoicePair struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Ref/TypeDemo/ChoicePairSerializableAc.hpp"

namespace Ref {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  ChoicePair ::
    ChoicePair() :
      Serializable(),
      m_firstChoice(Ref::Choice::ONE),
      m_secondChoice(Ref::Choice::ONE)
  {

  }

  ChoicePair ::
    ChoicePair(
        Ref::Choice::T firstChoice,
        Ref::Choice::T secondChoice
    ) :
      Serializable(),
      m_firstChoice(firstChoice),
      m_secondChoice(secondChoice)
  {

  }

  ChoicePair ::
    ChoicePair(const ChoicePair& obj) :
      Serializable(),
      m_firstChoice(obj.m_firstChoice),
      m_secondChoice(obj.m_secondChoice)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  ChoicePair& ChoicePair ::
    operator=(const ChoicePair& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.m_firstChoice, obj.m_secondChoice);
    return *this;
  }

  bool ChoicePair ::
    operator==(const ChoicePair& obj) const
  {
    if (this == &obj) { return true; }
    return (
      (this->m_firstChoice == obj.m_firstChoice) &&
      (this->m_secondChoice == obj.m_secondChoice)
    );
  }

  bool ChoicePair ::
    operator!=(const ChoicePair& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const ChoicePair& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus ChoicePair ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serializeFrom(this->m_firstChoice);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_secondChoice);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus ChoicePair ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserializeTo(this->m_firstChoice);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_secondChoice);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  FwSizeType ChoicePair ::
    serializedSize() const
  {
    FwSizeType size = 0;
    size += Ref::Choice::SERIALIZED_SIZE;
    size += Ref::Choice::SERIALIZED_SIZE;
    return size;
  }

#if FW_SERIALIZABLE_TO_STRING

  void ChoicePair ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String tmp;
    sb = "( ";

    // Format firstChoice
    sb += "firstChoice = ";
    this->m_firstChoice.toString(tmp);
    sb += tmp;
    sb += ", ";

    // Format secondChoice
    sb += "secondChoice = ";
    this->m_secondChoice.toString(tmp);
    sb += tmp;
    sb += " )";
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void ChoicePair ::
    set(
        Ref::Choice::T firstChoice,
        Ref::Choice::T secondChoice
    )
  {
    this->m_firstChoice = firstChoice;
    this->m_secondChoice = secondChoice;
  }

  void ChoicePair ::
    set_firstChoice(Ref::Choice::T firstChoice)
  {
    this->m_firstChoice = firstChoice;
  }

  void ChoicePair ::
    set_secondChoice(Ref::Choice::T secondChoice)
  {
    this->m_secondChoice = secondChoice;
  }

}
