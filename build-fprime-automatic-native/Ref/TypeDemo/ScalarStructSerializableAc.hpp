// ======================================================================
// \title  ScalarStructSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for ScalarStruct struct
// ======================================================================

#ifndef Ref_ScalarStructSerializableAc_HPP
#define Ref_ScalarStructSerializableAc_HPP

#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

namespace Ref {

  //! All scalar inputs
  class ScalarStruct :
    public Fw::Serializable
  {

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representation
        SERIALIZED_SIZE =
          sizeof(I8) +
          sizeof(I16) +
          sizeof(I32) +
          sizeof(I64) +
          sizeof(U8) +
          sizeof(U16) +
          sizeof(U32) +
          sizeof(U64) +
          sizeof(F32) +
          sizeof(F64)
      };

    public:

      // ----------------------------------------------------------------------
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value)
      ScalarStruct();

      //! Member constructor
      ScalarStruct(
          I8 i8,
          I16 i16,
          I32 i32,
          I64 i64,
          U8 u8,
          U16 u16,
          U32 u32,
          U64 u64,
          F32 f32,
          F64 f64
      );

      //! Copy constructor
      ScalarStruct(
          const ScalarStruct& obj //!< The source object
      );

    public:

      // ----------------------------------------------------------------------
      // Operators
      // ----------------------------------------------------------------------

      //! Copy assignment operator
      ScalarStruct& operator=(
          const ScalarStruct& obj //!< The source object
      );

      //! Equality operator
      bool operator==(
          const ScalarStruct& obj //!< The other object
      ) const;

      //! Inequality operator
      bool operator!=(
          const ScalarStruct& obj //!< The other object
      ) const;

#ifdef BUILD_UT

      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const ScalarStruct& obj //!< The object
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Member functions
      // ----------------------------------------------------------------------

      //! Serialization
      Fw::SerializeStatus serializeTo(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      ) const;

      //! Deserialization
      Fw::SerializeStatus deserializeFrom(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      );

      //! Get the dynamic serialized size of the struct
      FwSizeType serializedSize() const;

#if FW_SERIALIZABLE_TO_STRING

      //! Convert struct to string
      void toString(
          Fw::StringBase& sb //!< The StringBase object to hold the result
      ) const;

#endif

      // ----------------------------------------------------------------------
      // Getter functions
      // ----------------------------------------------------------------------

      //! Get member i8
      I8 get_i8() const
      {
        return this->m_i8;
      }

      //! Get member i16
      I16 get_i16() const
      {
        return this->m_i16;
      }

      //! Get member i32
      I32 get_i32() const
      {
        return this->m_i32;
      }

      //! Get member i64
      I64 get_i64() const
      {
        return this->m_i64;
      }

      //! Get member u8
      U8 get_u8() const
      {
        return this->m_u8;
      }

      //! Get member u16
      U16 get_u16() const
      {
        return this->m_u16;
      }

      //! Get member u32
      U32 get_u32() const
      {
        return this->m_u32;
      }

      //! Get member u64
      U64 get_u64() const
      {
        return this->m_u64;
      }

      //! Get member f32
      F32 get_f32() const
      {
        return this->m_f32;
      }

      //! Get member f64
      F64 get_f64() const
      {
        return this->m_f64;
      }

      // ----------------------------------------------------------------------
      // Setter functions
      // ----------------------------------------------------------------------

      //! Set all members
      void set(
          I8 i8,
          I16 i16,
          I32 i32,
          I64 i64,
          U8 u8,
          U16 u16,
          U32 u32,
          U64 u64,
          F32 f32,
          F64 f64
      );

      //! Set member i8
      void set_i8(I8 i8);

      //! Set member i16
      void set_i16(I16 i16);

      //! Set member i32
      void set_i32(I32 i32);

      //! Set member i64
      void set_i64(I64 i64);

      //! Set member u8
      void set_u8(U8 u8);

      //! Set member u16
      void set_u16(U16 u16);

      //! Set member u32
      void set_u32(U32 u32);

      //! Set member u64
      void set_u64(U64 u64);

      //! Set member f32
      void set_f32(F32 f32);

      //! Set member f64
      void set_f64(F64 f64);

    protected:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      I8 m_i8;
      I16 m_i16;
      I32 m_i32;
      I64 m_i64;
      U8 m_u8;
      U16 m_u16;
      U32 m_u32;
      U64 m_u64;
      F32 m_f32;
      F64 m_f64;

  };

}

#endif
