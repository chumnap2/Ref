// ======================================================================
// \title  TimeValueSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for TimeValue struct
// ======================================================================

#ifndef Fw_TimeValueSerializableAc_HPP
#define Fw_TimeValueSerializableAc_HPP

#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"
#include "default/config/FwTimeContextStoreTypeAliasAc.hpp"
#include "default/config/TimeBaseEnumAc.hpp"

namespace Fw {

  //! Data structure for Time
  class TimeValue :
    public Fw::Serializable
  {

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representation
        SERIALIZED_SIZE =
          TimeBase::SERIALIZED_SIZE +
          sizeof(FwTimeContextStoreType) +
          sizeof(U32) +
          sizeof(U32)
      };

    public:

      // ----------------------------------------------------------------------
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value)
      TimeValue();

      //! Member constructor
      TimeValue(
          TimeBase::T timeBase,
          FwTimeContextStoreType timeContext,
          U32 seconds,
          U32 useconds
      );

      //! Copy constructor
      TimeValue(
          const TimeValue& obj //!< The source object
      );

    public:

      // ----------------------------------------------------------------------
      // Operators
      // ----------------------------------------------------------------------

      //! Copy assignment operator
      TimeValue& operator=(
          const TimeValue& obj //!< The source object
      );

      //! Equality operator
      bool operator==(
          const TimeValue& obj //!< The other object
      ) const;

      //! Inequality operator
      bool operator!=(
          const TimeValue& obj //!< The other object
      ) const;

#ifdef BUILD_UT

      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const TimeValue& obj //!< The object
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Member functions
      // ----------------------------------------------------------------------

      //! Serialization
      Fw::SerializeStatus serializeTo(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      ) const;

      //! Deserialization
      Fw::SerializeStatus deserializeFrom(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      );

      //! Get the dynamic serialized size of the struct
      FwSizeType serializedSize() const;

#if FW_SERIALIZABLE_TO_STRING

      //! Convert struct to string
      void toString(
          Fw::StringBase& sb //!< The StringBase object to hold the result
      ) const;

#endif

      // ----------------------------------------------------------------------
      // Getter functions
      // ----------------------------------------------------------------------

      //! Get member timeBase
      TimeBase::T get_timeBase() const
      {
        return this->m_timeBase.e;
      }

      //! Get member timeContext
      FwTimeContextStoreType get_timeContext() const
      {
        return this->m_timeContext;
      }

      //! Get member seconds
      U32 get_seconds() const
      {
        return this->m_seconds;
      }

      //! Get member useconds
      U32 get_useconds() const
      {
        return this->m_useconds;
      }

      // ----------------------------------------------------------------------
      // Setter functions
      // ----------------------------------------------------------------------

      //! Set all members
      void set(
          TimeBase::T timeBase,
          FwTimeContextStoreType timeContext,
          U32 seconds,
          U32 useconds
      );

      //! Set member timeBase
      void set_timeBase(TimeBase::T timeBase);

      //! Set member timeContext
      void set_timeContext(FwTimeContextStoreType timeContext);

      //! Set member seconds
      void set_seconds(U32 seconds);

      //! Set member useconds
      void set_useconds(U32 useconds);

    protected:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      TimeBase m_timeBase;
      FwTimeContextStoreType m_timeContext;
      U32 m_seconds;
      U32 m_useconds;

  };

}

#endif
