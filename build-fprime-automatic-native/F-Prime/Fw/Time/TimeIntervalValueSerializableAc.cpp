// ======================================================================
// \title  TimeIntervalValueSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for TimeIntervalValue struct
// ======================================================================

#include "Fw/Time/TimeIntervalValueSerializableAc.hpp"
#include "Fw/Types/Assert.hpp"

namespace Fw {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  TimeIntervalValue ::
    TimeIntervalValue() :
      Serializable(),
      m_seconds(0),
      m_useconds(0)
  {

  }

  TimeIntervalValue ::
    TimeIntervalValue(
        U32 seconds,
        U32 useconds
    ) :
      Serializable(),
      m_seconds(seconds),
      m_useconds(useconds)
  {

  }

  TimeIntervalValue ::
    TimeIntervalValue(const TimeIntervalValue& obj) :
      Serializable(),
      m_seconds(obj.m_seconds),
      m_useconds(obj.m_useconds)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  TimeIntervalValue& TimeIntervalValue ::
    operator=(const TimeIntervalValue& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.m_seconds, obj.m_useconds);
    return *this;
  }

  bool TimeIntervalValue ::
    operator==(const TimeIntervalValue& obj) const
  {
    if (this == &obj) { return true; }
    return (
      (this->m_seconds == obj.m_seconds) &&
      (this->m_useconds == obj.m_useconds)
    );
  }

  bool TimeIntervalValue ::
    operator!=(const TimeIntervalValue& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const TimeIntervalValue& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus TimeIntervalValue ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serializeFrom(this->m_seconds);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_useconds);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus TimeIntervalValue ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserializeTo(this->m_seconds);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_useconds);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  FwSizeType TimeIntervalValue ::
    serializedSize() const
  {
    FwSizeType size = 0;
    size += sizeof(U32);
    size += sizeof(U32);
    return size;
  }

#if FW_SERIALIZABLE_TO_STRING

  void TimeIntervalValue ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String tmp;
    sb = "( ";

    // Format seconds
    sb += "seconds = ";
    tmp.format("%" PRIu32 "", this->m_seconds);
    sb += tmp;
    sb += ", ";

    // Format useconds
    sb += "useconds = ";
    tmp.format("%" PRIu32 "", this->m_useconds);
    sb += tmp;
    sb += " )";
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void TimeIntervalValue ::
    set(
        U32 seconds,
        U32 useconds
    )
  {
    this->m_seconds = seconds;
    this->m_useconds = useconds;
  }

  void TimeIntervalValue ::
    set_seconds(U32 seconds)
  {
    this->m_seconds = seconds;
  }

  void TimeIntervalValue ::
    set_useconds(U32 useconds)
  {
    this->m_useconds = useconds;
  }

}
