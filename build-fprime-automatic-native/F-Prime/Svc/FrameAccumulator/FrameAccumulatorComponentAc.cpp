// ======================================================================
// \title  FrameAccumulatorComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for FrameAccumulator component base class
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif
#include "Svc/FrameAccumulator/FrameAccumulatorComponentAc.hpp"

namespace Svc {

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void FrameAccumulatorComponentBase ::
    init(FwEnumStoreType instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect input port dataIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_dataIn_InputPorts());
      port++
    ) {
      this->m_dataIn_InputPort[port].init();
      this->m_dataIn_InputPort[port].addCallComp(
        this,
        m_p_dataIn_in
      );
      this->m_dataIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_dataIn_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_dataIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port dataReturnIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_dataReturnIn_InputPorts());
      port++
    ) {
      this->m_dataReturnIn_InputPort[port].init();
      this->m_dataReturnIn_InputPort[port].addCallComp(
        this,
        m_p_dataReturnIn_in
      );
      this->m_dataReturnIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_dataReturnIn_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_dataReturnIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port logOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_logOut_OutputPorts());
      port++
    ) {
      this->m_logOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_logOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_logOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

#if FW_ENABLE_TEXT_LOGGING == 1
    // Connect output port logTextOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_logTextOut_OutputPorts());
      port++
    ) {
      this->m_logTextOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_logTextOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_logTextOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }
#endif

    // Connect output port timeCaller
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_timeCaller_OutputPorts());
      port++
    ) {
      this->m_timeCaller_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_timeCaller_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_timeCaller_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port bufferAllocate
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_bufferAllocate_OutputPorts());
      port++
    ) {
      this->m_bufferAllocate_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_bufferAllocate_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_bufferAllocate_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port bufferDeallocate
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_bufferDeallocate_OutputPorts());
      port++
    ) {
      this->m_bufferDeallocate_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_bufferDeallocate_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_bufferDeallocate_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port dataOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_dataOut_OutputPorts());
      port++
    ) {
      this->m_dataOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_dataOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_dataOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port dataReturnOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_dataReturnOut_OutputPorts());
      port++
    ) {
      this->m_dataReturnOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_dataReturnOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_dataReturnOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Svc::InputComDataWithContextPort* FrameAccumulatorComponentBase ::
    get_dataIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_dataIn_InputPort[portNum];
  }

  Svc::InputComDataWithContextPort* FrameAccumulatorComponentBase ::
    get_dataReturnIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_dataReturnIn_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect input ports to special output ports
  // ----------------------------------------------------------------------

  void FrameAccumulatorComponentBase ::
    set_logOut_OutputPort(
        FwIndexType portNum,
        Fw::InputLogPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void FrameAccumulatorComponentBase ::
    set_logTextOut_OutputPort(
        FwIndexType portNum,
        Fw::InputLogTextPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logTextOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logTextOut_OutputPort[portNum].addCallPort(port);
  }

#endif

  void FrameAccumulatorComponentBase ::
    set_timeCaller_OutputPort(
        FwIndexType portNum,
        Fw::InputTimePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_timeCaller_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].addCallPort(port);
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void FrameAccumulatorComponentBase ::
    set_bufferAllocate_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferGetPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferAllocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_bufferAllocate_OutputPort[portNum].addCallPort(port);
  }

  void FrameAccumulatorComponentBase ::
    set_bufferDeallocate_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferDeallocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_bufferDeallocate_OutputPort[portNum].addCallPort(port);
  }

  void FrameAccumulatorComponentBase ::
    set_dataOut_OutputPort(
        FwIndexType portNum,
        Svc::InputComDataWithContextPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_dataOut_OutputPort[portNum].addCallPort(port);
  }

  void FrameAccumulatorComponentBase ::
    set_dataReturnOut_OutputPort(
        FwIndexType portNum,
        Svc::InputComDataWithContextPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_dataReturnOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to special output ports
  // ----------------------------------------------------------------------

  void FrameAccumulatorComponentBase ::
    set_logOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logOut_OutputPort[portNum].registerSerialPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void FrameAccumulatorComponentBase ::
    set_logTextOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logTextOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logTextOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  void FrameAccumulatorComponentBase ::
    set_timeCaller_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_timeCaller_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].registerSerialPort(port);
  }

#endif

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to typed output ports
  // ----------------------------------------------------------------------

  void FrameAccumulatorComponentBase ::
    set_bufferDeallocate_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferDeallocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_bufferDeallocate_OutputPort[portNum].registerSerialPort(port);
  }

  void FrameAccumulatorComponentBase ::
    set_dataOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_dataOut_OutputPort[portNum].registerSerialPort(port);
  }

  void FrameAccumulatorComponentBase ::
    set_dataReturnOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_dataReturnOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  FrameAccumulatorComponentBase ::
    FrameAccumulatorComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {

  }

  FrameAccumulatorComponentBase ::
    ~FrameAccumulatorComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType FrameAccumulatorComponentBase ::
    getNum_dataIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_dataIn_InputPort));
  }

  FwIndexType FrameAccumulatorComponentBase ::
    getNum_dataReturnIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_dataReturnIn_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special output ports
  // ----------------------------------------------------------------------

  FwIndexType FrameAccumulatorComponentBase ::
    getNum_logOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_logOut_OutputPort));
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  FwIndexType FrameAccumulatorComponentBase ::
    getNum_logTextOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_logTextOut_OutputPort));
  }

#endif

  FwIndexType FrameAccumulatorComponentBase ::
    getNum_timeCaller_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_timeCaller_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  FwIndexType FrameAccumulatorComponentBase ::
    getNum_bufferAllocate_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_bufferAllocate_OutputPort));
  }

  FwIndexType FrameAccumulatorComponentBase ::
    getNum_bufferDeallocate_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_bufferDeallocate_OutputPort));
  }

  FwIndexType FrameAccumulatorComponentBase ::
    getNum_dataOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_dataOut_OutputPort));
  }

  FwIndexType FrameAccumulatorComponentBase ::
    getNum_dataReturnOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_dataReturnOut_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for special output ports
  // ----------------------------------------------------------------------

  bool FrameAccumulatorComponentBase ::
    isConnected_logOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_logOut_OutputPort[portNum].isConnected();
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  bool FrameAccumulatorComponentBase ::
    isConnected_logTextOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logTextOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_logTextOut_OutputPort[portNum].isConnected();
  }

#endif

  bool FrameAccumulatorComponentBase ::
    isConnected_timeCaller_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_timeCaller_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_timeCaller_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool FrameAccumulatorComponentBase ::
    isConnected_bufferAllocate_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferAllocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_bufferAllocate_OutputPort[portNum].isConnected();
  }

  bool FrameAccumulatorComponentBase ::
    isConnected_bufferDeallocate_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferDeallocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_bufferDeallocate_OutputPort[portNum].isConnected();
  }

  bool FrameAccumulatorComponentBase ::
    isConnected_dataOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_dataOut_OutputPort[portNum].isConnected();
  }

  bool FrameAccumulatorComponentBase ::
    isConnected_dataReturnOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_dataReturnOut_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void FrameAccumulatorComponentBase ::
    dataIn_handlerBase(
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Lock guard mutex before calling
    this->lock();

    // Call handler function
    this->dataIn_handler(
      portNum,
      data,
      context
    );

    // Unlock guard mutex
    this->unLock();
  }

  void FrameAccumulatorComponentBase ::
    dataReturnIn_handlerBase(
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->dataReturnIn_handler(
      portNum,
      data,
      context
    );
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  Fw::Buffer FrameAccumulatorComponentBase ::
    bufferAllocate_out(
        FwIndexType portNum,
        FwSizeType size
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferAllocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_bufferAllocate_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    return this->m_bufferAllocate_OutputPort[portNum].invoke(
      size
    );
  }

  void FrameAccumulatorComponentBase ::
    bufferDeallocate_out(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferDeallocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_bufferDeallocate_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_bufferDeallocate_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  void FrameAccumulatorComponentBase ::
    dataOut_out(
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_dataOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_dataOut_OutputPort[portNum].invoke(
      data,
      context
    );
  }

  void FrameAccumulatorComponentBase ::
    dataReturnOut_out(
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_dataReturnOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_dataReturnOut_OutputPort[portNum].invoke(
      data,
      context
    );
  }

  // ----------------------------------------------------------------------
  // Event logging functions
  // ----------------------------------------------------------------------

  void FrameAccumulatorComponentBase ::
    log_WARNING_HI_NoBufferAvailable() const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_NOBUFFERAVAILABLE;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;

#if FW_AMPCS_COMPATIBLE
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(0));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Could not allocate a valid buffer to fit the detected frame";
#else
      const char* _formatString =
        "%s: Could not allocate a valid buffer to fit the detected frame";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "NoBufferAvailable "
      );

      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logString
      );
    }
#endif
  }

  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time FrameAccumulatorComponentBase ::
    getTime() const
  {
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_timeCaller_OutputPort[0].invoke(_time);
      return _time;
    }
    else {
      return Fw::Time(TimeBase::TB_NONE, 0, 0);
    }
  }

  // ----------------------------------------------------------------------
  // Mutex operations for guarded ports
  //
  // You can override these operations to provide more sophisticated
  // synchronization
  // ----------------------------------------------------------------------

  void FrameAccumulatorComponentBase ::
    lock()
  {
    this->m_guardedPortMutex.lock();
  }

  void FrameAccumulatorComponentBase ::
    unLock()
  {
    this->m_guardedPortMutex.unLock();
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void FrameAccumulatorComponentBase ::
    m_p_dataIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    FW_ASSERT(callComp);
    FrameAccumulatorComponentBase* compPtr = static_cast<FrameAccumulatorComponentBase*>(callComp);
    compPtr->dataIn_handlerBase(
      portNum,
      data,
      context
    );
  }

  void FrameAccumulatorComponentBase ::
    m_p_dataReturnIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    FW_ASSERT(callComp);
    FrameAccumulatorComponentBase* compPtr = static_cast<FrameAccumulatorComponentBase*>(callComp);
    compPtr->dataReturnIn_handlerBase(
      portNum,
      data,
      context
    );
  }

}
