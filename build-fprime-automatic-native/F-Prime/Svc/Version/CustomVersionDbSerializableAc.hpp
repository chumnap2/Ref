// ======================================================================
// \title  CustomVersionDbSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for CustomVersionDb struct
// ======================================================================

#ifndef Svc_CustomVersionDbSerializableAc_HPP
#define Svc_CustomVersionDbSerializableAc_HPP

#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"
#include "Svc/Ports/VersionPorts/VersionStatusEnumAc.hpp"
#include "default/config/VersionEnumEnumAc.hpp"

namespace Svc {

  //! Data Structure for custom version Tlm
  class CustomVersionDb :
    public Fw::Serializable
  {

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the serial representation
        SERIALIZED_SIZE =
          Svc::VersionCfg::VersionEnum::SERIALIZED_SIZE +
          Fw::StringBase::STATIC_SERIALIZED_SIZE(80) +
          Svc::VersionStatus::SERIALIZED_SIZE
      };

    public:

      // ----------------------------------------------------------------------
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value)
      CustomVersionDb();

      //! Member constructor
      CustomVersionDb(
          Svc::VersionCfg::VersionEnum::T version_enum,
          const Fw::StringBase& version_value,
          Svc::VersionStatus::T version_status
      );

      //! Copy constructor
      CustomVersionDb(
          const CustomVersionDb& obj //!< The source object
      );

    public:

      // ----------------------------------------------------------------------
      // Operators
      // ----------------------------------------------------------------------

      //! Copy assignment operator
      CustomVersionDb& operator=(
          const CustomVersionDb& obj //!< The source object
      );

      //! Equality operator
      bool operator==(
          const CustomVersionDb& obj //!< The other object
      ) const;

      //! Inequality operator
      bool operator!=(
          const CustomVersionDb& obj //!< The other object
      ) const;

#ifdef BUILD_UT

      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const CustomVersionDb& obj //!< The object
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Member functions
      // ----------------------------------------------------------------------

      //! Serialization
      Fw::SerializeStatus serializeTo(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      ) const;

      //! Deserialization
      Fw::SerializeStatus deserializeFrom(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      );

      //! Get the dynamic serialized size of the struct
      FwSizeType serializedSize() const;

#if FW_SERIALIZABLE_TO_STRING

      //! Convert struct to string
      void toString(
          Fw::StringBase& sb //!< The StringBase object to hold the result
      ) const;

#endif

      // ----------------------------------------------------------------------
      // Getter functions
      // ----------------------------------------------------------------------

      //! Get member version_enum
      Svc::VersionCfg::VersionEnum::T get_version_enum() const
      {
        return this->m_version_enum.e;
      }

      //! Get member version_value
      Fw::ExternalString& get_version_value()
      {
        return this->m_version_value;
      }

      //! Get member version_value (const)
      const Fw::ExternalString& get_version_value() const
      {
        return this->m_version_value;
      }

      //! Get member version_status
      Svc::VersionStatus::T get_version_status() const
      {
        return this->m_version_status.e;
      }

      // ----------------------------------------------------------------------
      // Setter functions
      // ----------------------------------------------------------------------

      //! Set all members
      void set(
          Svc::VersionCfg::VersionEnum::T version_enum,
          const Fw::StringBase& version_value,
          Svc::VersionStatus::T version_status
      );

      //! Set member version_enum
      void set_version_enum(Svc::VersionCfg::VersionEnum::T version_enum);

      //! Set member version_value
      void set_version_value(const Fw::StringBase& version_value);

      //! Set member version_status
      void set_version_status(Svc::VersionStatus::T version_status);

    protected:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      Svc::VersionCfg::VersionEnum m_version_enum;
      char m___fprime_ac_version_value_buffer[Fw::StringBase::BUFFER_SIZE(80)];
      Fw::ExternalString m_version_value;
      Svc::VersionStatus m_version_status;

  };

}

#endif
