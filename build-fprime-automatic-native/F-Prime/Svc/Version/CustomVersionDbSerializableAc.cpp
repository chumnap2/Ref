// ======================================================================
// \title  CustomVersionDbSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for CustomVersionDb struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Svc/Version/CustomVersionDbSerializableAc.hpp"

namespace Svc {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  CustomVersionDb ::
    CustomVersionDb() :
      Serializable(),
      m_version_enum(Svc::VersionCfg::VersionEnum::PROJECT_VERSION_00),
      m_version_value(m___fprime_ac_version_value_buffer, sizeof m___fprime_ac_version_value_buffer, Fw::String("")),
      m_version_status(Svc::VersionStatus::OK)
  {

  }

  CustomVersionDb ::
    CustomVersionDb(
        Svc::VersionCfg::VersionEnum::T version_enum,
        const Fw::StringBase& version_value,
        Svc::VersionStatus::T version_status
    ) :
      Serializable(),
      m_version_enum(version_enum),
      m_version_value(m___fprime_ac_version_value_buffer, sizeof m___fprime_ac_version_value_buffer, version_value),
      m_version_status(version_status)
  {

  }

  CustomVersionDb ::
    CustomVersionDb(const CustomVersionDb& obj) :
      Serializable(),
      m_version_enum(obj.m_version_enum),
      m_version_value(m___fprime_ac_version_value_buffer, sizeof m___fprime_ac_version_value_buffer, obj.m_version_value),
      m_version_status(obj.m_version_status)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  CustomVersionDb& CustomVersionDb ::
    operator=(const CustomVersionDb& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.m_version_enum, obj.m_version_value, obj.m_version_status);
    return *this;
  }

  bool CustomVersionDb ::
    operator==(const CustomVersionDb& obj) const
  {
    if (this == &obj) { return true; }
    return (
      (this->m_version_enum == obj.m_version_enum) &&
      (this->m_version_value == obj.m_version_value) &&
      (this->m_version_status == obj.m_version_status)
    );
  }

  bool CustomVersionDb ::
    operator!=(const CustomVersionDb& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const CustomVersionDb& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus CustomVersionDb ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serializeFrom(this->m_version_enum);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_version_value);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_version_status);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus CustomVersionDb ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserializeTo(this->m_version_enum);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_version_value);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_version_status);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  FwSizeType CustomVersionDb ::
    serializedSize() const
  {
    FwSizeType size = 0;
    size += Svc::VersionCfg::VersionEnum::SERIALIZED_SIZE;
    size += this->m_version_value.serializedSize();
    size += Svc::VersionStatus::SERIALIZED_SIZE;
    return size;
  }

#if FW_SERIALIZABLE_TO_STRING

  void CustomVersionDb ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String tmp;
    sb = "( ";

    // Format version_enum
    sb += "version_enum = ";
    this->m_version_enum.toString(tmp);
    sb += tmp;
    sb += ", ";

    // Format version_value
    sb += "version_value = ";
    sb += this->m_version_value;
    sb += ", ";

    // Format version_status
    sb += "version_status = ";
    this->m_version_status.toString(tmp);
    sb += tmp;
    sb += " )";
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void CustomVersionDb ::
    set(
        Svc::VersionCfg::VersionEnum::T version_enum,
        const Fw::StringBase& version_value,
        Svc::VersionStatus::T version_status
    )
  {
    this->m_version_enum = version_enum;
    this->m_version_value = version_value;
    this->m_version_status = version_status;
  }

  void CustomVersionDb ::
    set_version_enum(Svc::VersionCfg::VersionEnum::T version_enum)
  {
    this->m_version_enum = version_enum;
  }

  void CustomVersionDb ::
    set_version_value(const Fw::StringBase& version_value)
  {
    this->m_version_value = version_value;
  }

  void CustomVersionDb ::
    set_version_status(Svc::VersionStatus::T version_status)
  {
    this->m_version_status = version_status;
  }

}
