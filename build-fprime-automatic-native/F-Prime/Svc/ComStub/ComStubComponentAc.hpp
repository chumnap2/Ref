// ======================================================================
// \title  ComStubComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for ComStub component base class
// ======================================================================

#ifndef Svc_ComStubComponentAc_HPP
#define Svc_ComStubComponentAc_HPP

#include "Drv/ByteStreamDriverModel/ByteStreamDataPortAc.hpp"
#include "Drv/ByteStreamDriverModel/ByteStreamReadyPortAc.hpp"
#include "Drv/ByteStreamDriverModel/ByteStreamSendPortAc.hpp"
#include "Fw/Buffer/BufferSendPortAc.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Ports/SuccessCondition/SuccessConditionPortAc.hpp"
#include "Svc/Ports/CommsPorts/ComDataWithContextPortAc.hpp"

namespace Svc {

  //! \class ComStubComponentBase
  //! \brief Auto-generated base for ComStub component
  //!
  //! Communication adapter interface implementing communication adapter interface via a Drv.ByteStreamDriver
  //! ComStub can use both synchronous and asynchronous byte stream drivers, users should connect the appropriate
  //! based on their driver type
  class ComStubComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class tester to support autocoded test harness
      friend class ComStubTesterBase;
      //! Friend class tester implementation to support white-box testing
      friend class ComStubTester;

    protected:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_DATAIN_INPUT_PORTS = 1,
        NUM_DATARETURNIN_INPUT_PORTS = 1,
        NUM_DRVASYNCSENDRETURNIN_INPUT_PORTS = 1,
        NUM_DRVCONNECTED_INPUT_PORTS = 1,
        NUM_DRVRECEIVEIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed output ports
      enum {
        NUM_COMSTATUSOUT_OUTPUT_PORTS = 1,
        NUM_DATAOUT_OUTPUT_PORTS = 1,
        NUM_DATARETURNOUT_OUTPUT_PORTS = 1,
        NUM_DRVASYNCSENDOUT_OUTPUT_PORTS = 1,
        NUM_DRVRECEIVERETURNOUT_OUTPUT_PORTS = 1,
        NUM_DRVSENDOUT_OUTPUT_PORTS = 1,
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize ComStubComponentBase object
      void init(
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return dataIn[portNum]
      Svc::InputComDataWithContextPort* get_dataIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return dataReturnIn[portNum]
      Svc::InputComDataWithContextPort* get_dataReturnIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return drvAsyncSendReturnIn[portNum]
      Drv::InputByteStreamDataPort* get_drvAsyncSendReturnIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return drvConnected[portNum]
      Drv::InputByteStreamReadyPort* get_drvConnected_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return drvReceiveIn[portNum]
      Drv::InputByteStreamDataPort* get_drvReceiveIn_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect typed input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to comStatusOut[portNum]
      void set_comStatusOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSuccessConditionPort* port //!< The input port
      );

      //! Connect port to dataOut[portNum]
      void set_dataOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Svc::InputComDataWithContextPort* port //!< The input port
      );

      //! Connect port to dataReturnOut[portNum]
      void set_dataReturnOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Svc::InputComDataWithContextPort* port //!< The input port
      );

      //! Connect port to drvAsyncSendOut[portNum]
      void set_drvAsyncSendOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputBufferSendPort* port //!< The input port
      );

      //! Connect port to drvReceiveReturnOut[portNum]
      void set_drvReceiveReturnOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputBufferSendPort* port //!< The input port
      );

      //! Connect port to drvSendOut[portNum]
      void set_drvSendOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Drv::InputByteStreamSendPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to comStatusOut[portNum]
      void set_comStatusOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to dataOut[portNum]
      void set_dataOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to dataReturnOut[portNum]
      void set_dataReturnOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to drvAsyncSendOut[portNum]
      void set_drvAsyncSendOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to drvReceiveReturnOut[portNum]
      void set_drvReceiveReturnOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    protected:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct ComStubComponentBase object
      ComStubComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy ComStubComponentBase object
      virtual ~ComStubComponentBase();

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of dataIn input ports
      //!
      //! \return The number of dataIn input ports
      FwIndexType getNum_dataIn_InputPorts() const;

      //! Get the number of dataReturnIn input ports
      //!
      //! \return The number of dataReturnIn input ports
      FwIndexType getNum_dataReturnIn_InputPorts() const;

      //! Get the number of drvAsyncSendReturnIn input ports
      //!
      //! \return The number of drvAsyncSendReturnIn input ports
      FwIndexType getNum_drvAsyncSendReturnIn_InputPorts() const;

      //! Get the number of drvConnected input ports
      //!
      //! \return The number of drvConnected input ports
      FwIndexType getNum_drvConnected_InputPorts() const;

      //! Get the number of drvReceiveIn input ports
      //!
      //! \return The number of drvReceiveIn input ports
      FwIndexType getNum_drvReceiveIn_InputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed output ports
      // ----------------------------------------------------------------------

      //! Get the number of comStatusOut output ports
      //!
      //! \return The number of comStatusOut output ports
      FwIndexType getNum_comStatusOut_OutputPorts() const;

      //! Get the number of dataOut output ports
      //!
      //! \return The number of dataOut output ports
      FwIndexType getNum_dataOut_OutputPorts() const;

      //! Get the number of dataReturnOut output ports
      //!
      //! \return The number of dataReturnOut output ports
      FwIndexType getNum_dataReturnOut_OutputPorts() const;

      //! Get the number of drvAsyncSendOut output ports
      //!
      //! \return The number of drvAsyncSendOut output ports
      FwIndexType getNum_drvAsyncSendOut_OutputPorts() const;

      //! Get the number of drvReceiveReturnOut output ports
      //!
      //! \return The number of drvReceiveReturnOut output ports
      FwIndexType getNum_drvReceiveReturnOut_OutputPorts() const;

      //! Get the number of drvSendOut output ports
      //!
      //! \return The number of drvSendOut output ports
      FwIndexType getNum_drvSendOut_OutputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Connection status queries for typed output ports
      // ----------------------------------------------------------------------

      //! Check whether port comStatusOut is connected
      //!
      //! \return Whether port comStatusOut is connected
      bool isConnected_comStatusOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port dataOut is connected
      //!
      //! \return Whether port dataOut is connected
      bool isConnected_dataOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port dataReturnOut is connected
      //!
      //! \return Whether port dataReturnOut is connected
      bool isConnected_dataReturnOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port drvAsyncSendOut is connected
      //!
      //! \return Whether port drvAsyncSendOut is connected
      bool isConnected_drvAsyncSendOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port drvReceiveReturnOut is connected
      //!
      //! \return Whether port drvReceiveReturnOut is connected
      bool isConnected_drvReceiveReturnOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port drvSendOut is connected
      //!
      //! \return Whether port drvSendOut is connected
      bool isConnected_drvSendOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

    protected:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port dataIn
      virtual void dataIn_handler(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      ) = 0;

      //! Handler for input port dataReturnIn
      virtual void dataReturnIn_handler(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      ) = 0;

      //! Handler for input port drvAsyncSendReturnIn
      virtual void drvAsyncSendReturnIn_handler(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& buffer,
          const Drv::ByteStreamStatus& status
      ) = 0;

      //! Handler for input port drvConnected
      virtual void drvConnected_handler(
          FwIndexType portNum //!< The port number
      ) = 0;

      //! Handler for input port drvReceiveIn
      virtual void drvReceiveIn_handler(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& buffer,
          const Drv::ByteStreamStatus& status
      ) = 0;

    protected:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port dataIn
      void dataIn_handlerBase(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      );

      //! Handler base-class function for input port dataReturnIn
      void dataReturnIn_handlerBase(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      );

      //! Handler base-class function for input port drvAsyncSendReturnIn
      void drvAsyncSendReturnIn_handlerBase(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& buffer,
          const Drv::ByteStreamStatus& status
      );

      //! Handler base-class function for input port drvConnected
      void drvConnected_handlerBase(
          FwIndexType portNum //!< The port number
      );

      //! Handler base-class function for input port drvReceiveIn
      void drvReceiveIn_handlerBase(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& buffer,
          const Drv::ByteStreamStatus& status
      );

    protected:

      // ----------------------------------------------------------------------
      // Invocation functions for typed output ports
      // ----------------------------------------------------------------------

      //! Invoke output port comStatusOut
      void comStatusOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Success& condition //!< Condition success/failure
      );

      //! Invoke output port dataOut
      void dataOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      );

      //! Invoke output port dataReturnOut
      void dataReturnOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      );

      //! Invoke output port drvAsyncSendOut
      void drvAsyncSendOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

      //! Invoke output port drvReceiveReturnOut
      void drvReceiveReturnOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

      //! Invoke output port drvSendOut
      Drv::ByteStreamStatus drvSendOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& sendBuffer //!< Data to send
      );

    private:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port dataIn
      static void m_p_dataIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      );

      //! Callback for port dataReturnIn
      static void m_p_dataReturnIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      );

      //! Callback for port drvAsyncSendReturnIn
      static void m_p_drvAsyncSendReturnIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::Buffer& buffer,
          const Drv::ByteStreamStatus& status
      );

      //! Callback for port drvConnected
      static void m_p_drvConnected_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum //!< The port number
      );

      //! Callback for port drvReceiveIn
      static void m_p_drvReceiveIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::Buffer& buffer,
          const Drv::ByteStreamStatus& status
      );

    private:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port dataIn
      Svc::InputComDataWithContextPort m_dataIn_InputPort[NUM_DATAIN_INPUT_PORTS];

      //! Input port dataReturnIn
      Svc::InputComDataWithContextPort m_dataReturnIn_InputPort[NUM_DATARETURNIN_INPUT_PORTS];

      //! Input port drvAsyncSendReturnIn
      Drv::InputByteStreamDataPort m_drvAsyncSendReturnIn_InputPort[NUM_DRVASYNCSENDRETURNIN_INPUT_PORTS];

      //! Input port drvConnected
      Drv::InputByteStreamReadyPort m_drvConnected_InputPort[NUM_DRVCONNECTED_INPUT_PORTS];

      //! Input port drvReceiveIn
      Drv::InputByteStreamDataPort m_drvReceiveIn_InputPort[NUM_DRVRECEIVEIN_INPUT_PORTS];

    private:

      // ----------------------------------------------------------------------
      // Typed output ports
      // ----------------------------------------------------------------------

      //! Output port comStatusOut
      Fw::OutputSuccessConditionPort m_comStatusOut_OutputPort[NUM_COMSTATUSOUT_OUTPUT_PORTS];

      //! Output port dataOut
      Svc::OutputComDataWithContextPort m_dataOut_OutputPort[NUM_DATAOUT_OUTPUT_PORTS];

      //! Output port dataReturnOut
      Svc::OutputComDataWithContextPort m_dataReturnOut_OutputPort[NUM_DATARETURNOUT_OUTPUT_PORTS];

      //! Output port drvAsyncSendOut
      Fw::OutputBufferSendPort m_drvAsyncSendOut_OutputPort[NUM_DRVASYNCSENDOUT_OUTPUT_PORTS];

      //! Output port drvReceiveReturnOut
      Fw::OutputBufferSendPort m_drvReceiveReturnOut_OutputPort[NUM_DRVRECEIVERETURNOUT_OUTPUT_PORTS];

      //! Output port drvSendOut
      Drv::OutputByteStreamSendPort m_drvSendOut_OutputPort[NUM_DRVSENDOUT_OUTPUT_PORTS];

  };

}

#endif
