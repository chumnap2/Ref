// ======================================================================
// \title  ComStubComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for ComStub component base class
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif
#include "Svc/ComStub/ComStubComponentAc.hpp"

namespace Svc {

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void ComStubComponentBase ::
    init(FwEnumStoreType instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect input port dataIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_dataIn_InputPorts());
      port++
    ) {
      this->m_dataIn_InputPort[port].init();
      this->m_dataIn_InputPort[port].addCallComp(
        this,
        m_p_dataIn_in
      );
      this->m_dataIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_dataIn_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_dataIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port dataReturnIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_dataReturnIn_InputPorts());
      port++
    ) {
      this->m_dataReturnIn_InputPort[port].init();
      this->m_dataReturnIn_InputPort[port].addCallComp(
        this,
        m_p_dataReturnIn_in
      );
      this->m_dataReturnIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_dataReturnIn_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_dataReturnIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port drvAsyncSendReturnIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_drvAsyncSendReturnIn_InputPorts());
      port++
    ) {
      this->m_drvAsyncSendReturnIn_InputPort[port].init();
      this->m_drvAsyncSendReturnIn_InputPort[port].addCallComp(
        this,
        m_p_drvAsyncSendReturnIn_in
      );
      this->m_drvAsyncSendReturnIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_drvAsyncSendReturnIn_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_drvAsyncSendReturnIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port drvConnected
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_drvConnected_InputPorts());
      port++
    ) {
      this->m_drvConnected_InputPort[port].init();
      this->m_drvConnected_InputPort[port].addCallComp(
        this,
        m_p_drvConnected_in
      );
      this->m_drvConnected_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_drvConnected_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_drvConnected_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port drvReceiveIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_drvReceiveIn_InputPorts());
      port++
    ) {
      this->m_drvReceiveIn_InputPort[port].init();
      this->m_drvReceiveIn_InputPort[port].addCallComp(
        this,
        m_p_drvReceiveIn_in
      );
      this->m_drvReceiveIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_drvReceiveIn_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_drvReceiveIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port comStatusOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_comStatusOut_OutputPorts());
      port++
    ) {
      this->m_comStatusOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_comStatusOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_comStatusOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port dataOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_dataOut_OutputPorts());
      port++
    ) {
      this->m_dataOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_dataOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_dataOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port dataReturnOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_dataReturnOut_OutputPorts());
      port++
    ) {
      this->m_dataReturnOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_dataReturnOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_dataReturnOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port drvAsyncSendOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_drvAsyncSendOut_OutputPorts());
      port++
    ) {
      this->m_drvAsyncSendOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_drvAsyncSendOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_drvAsyncSendOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port drvReceiveReturnOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_drvReceiveReturnOut_OutputPorts());
      port++
    ) {
      this->m_drvReceiveReturnOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_drvReceiveReturnOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_drvReceiveReturnOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port drvSendOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_drvSendOut_OutputPorts());
      port++
    ) {
      this->m_drvSendOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_drvSendOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_drvSendOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Svc::InputComDataWithContextPort* ComStubComponentBase ::
    get_dataIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_dataIn_InputPort[portNum];
  }

  Svc::InputComDataWithContextPort* ComStubComponentBase ::
    get_dataReturnIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_dataReturnIn_InputPort[portNum];
  }

  Drv::InputByteStreamDataPort* ComStubComponentBase ::
    get_drvAsyncSendReturnIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvAsyncSendReturnIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_drvAsyncSendReturnIn_InputPort[portNum];
  }

  Drv::InputByteStreamReadyPort* ComStubComponentBase ::
    get_drvConnected_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvConnected_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_drvConnected_InputPort[portNum];
  }

  Drv::InputByteStreamDataPort* ComStubComponentBase ::
    get_drvReceiveIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvReceiveIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_drvReceiveIn_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void ComStubComponentBase ::
    set_comStatusOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSuccessConditionPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_comStatusOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_comStatusOut_OutputPort[portNum].addCallPort(port);
  }

  void ComStubComponentBase ::
    set_dataOut_OutputPort(
        FwIndexType portNum,
        Svc::InputComDataWithContextPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_dataOut_OutputPort[portNum].addCallPort(port);
  }

  void ComStubComponentBase ::
    set_dataReturnOut_OutputPort(
        FwIndexType portNum,
        Svc::InputComDataWithContextPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_dataReturnOut_OutputPort[portNum].addCallPort(port);
  }

  void ComStubComponentBase ::
    set_drvAsyncSendOut_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvAsyncSendOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_drvAsyncSendOut_OutputPort[portNum].addCallPort(port);
  }

  void ComStubComponentBase ::
    set_drvReceiveReturnOut_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvReceiveReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_drvReceiveReturnOut_OutputPort[portNum].addCallPort(port);
  }

  void ComStubComponentBase ::
    set_drvSendOut_OutputPort(
        FwIndexType portNum,
        Drv::InputByteStreamSendPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvSendOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_drvSendOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to typed output ports
  // ----------------------------------------------------------------------

  void ComStubComponentBase ::
    set_comStatusOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_comStatusOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_comStatusOut_OutputPort[portNum].registerSerialPort(port);
  }

  void ComStubComponentBase ::
    set_dataOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_dataOut_OutputPort[portNum].registerSerialPort(port);
  }

  void ComStubComponentBase ::
    set_dataReturnOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_dataReturnOut_OutputPort[portNum].registerSerialPort(port);
  }

  void ComStubComponentBase ::
    set_drvAsyncSendOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvAsyncSendOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_drvAsyncSendOut_OutputPort[portNum].registerSerialPort(port);
  }

  void ComStubComponentBase ::
    set_drvReceiveReturnOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvReceiveReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_drvReceiveReturnOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  ComStubComponentBase ::
    ComStubComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {

  }

  ComStubComponentBase ::
    ~ComStubComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType ComStubComponentBase ::
    getNum_dataIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_dataIn_InputPort));
  }

  FwIndexType ComStubComponentBase ::
    getNum_dataReturnIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_dataReturnIn_InputPort));
  }

  FwIndexType ComStubComponentBase ::
    getNum_drvAsyncSendReturnIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_drvAsyncSendReturnIn_InputPort));
  }

  FwIndexType ComStubComponentBase ::
    getNum_drvConnected_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_drvConnected_InputPort));
  }

  FwIndexType ComStubComponentBase ::
    getNum_drvReceiveIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_drvReceiveIn_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  FwIndexType ComStubComponentBase ::
    getNum_comStatusOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_comStatusOut_OutputPort));
  }

  FwIndexType ComStubComponentBase ::
    getNum_dataOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_dataOut_OutputPort));
  }

  FwIndexType ComStubComponentBase ::
    getNum_dataReturnOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_dataReturnOut_OutputPort));
  }

  FwIndexType ComStubComponentBase ::
    getNum_drvAsyncSendOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_drvAsyncSendOut_OutputPort));
  }

  FwIndexType ComStubComponentBase ::
    getNum_drvReceiveReturnOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_drvReceiveReturnOut_OutputPort));
  }

  FwIndexType ComStubComponentBase ::
    getNum_drvSendOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_drvSendOut_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool ComStubComponentBase ::
    isConnected_comStatusOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_comStatusOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_comStatusOut_OutputPort[portNum].isConnected();
  }

  bool ComStubComponentBase ::
    isConnected_dataOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_dataOut_OutputPort[portNum].isConnected();
  }

  bool ComStubComponentBase ::
    isConnected_dataReturnOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_dataReturnOut_OutputPort[portNum].isConnected();
  }

  bool ComStubComponentBase ::
    isConnected_drvAsyncSendOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvAsyncSendOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_drvAsyncSendOut_OutputPort[portNum].isConnected();
  }

  bool ComStubComponentBase ::
    isConnected_drvReceiveReturnOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvReceiveReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_drvReceiveReturnOut_OutputPort[portNum].isConnected();
  }

  bool ComStubComponentBase ::
    isConnected_drvSendOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvSendOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_drvSendOut_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void ComStubComponentBase ::
    dataIn_handlerBase(
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->dataIn_handler(
      portNum,
      data,
      context
    );
  }

  void ComStubComponentBase ::
    dataReturnIn_handlerBase(
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->dataReturnIn_handler(
      portNum,
      data,
      context
    );
  }

  void ComStubComponentBase ::
    drvAsyncSendReturnIn_handlerBase(
        FwIndexType portNum,
        Fw::Buffer& buffer,
        const Drv::ByteStreamStatus& status
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvAsyncSendReturnIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->drvAsyncSendReturnIn_handler(
      portNum,
      buffer,
      status
    );
  }

  void ComStubComponentBase ::
    drvConnected_handlerBase(FwIndexType portNum)
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvConnected_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->drvConnected_handler(portNum);
  }

  void ComStubComponentBase ::
    drvReceiveIn_handlerBase(
        FwIndexType portNum,
        Fw::Buffer& buffer,
        const Drv::ByteStreamStatus& status
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvReceiveIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->drvReceiveIn_handler(
      portNum,
      buffer,
      status
    );
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  void ComStubComponentBase ::
    comStatusOut_out(
        FwIndexType portNum,
        Fw::Success& condition
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_comStatusOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_comStatusOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_comStatusOut_OutputPort[portNum].invoke(
      condition
    );
  }

  void ComStubComponentBase ::
    dataOut_out(
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_dataOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_dataOut_OutputPort[portNum].invoke(
      data,
      context
    );
  }

  void ComStubComponentBase ::
    dataReturnOut_out(
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_dataReturnOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_dataReturnOut_OutputPort[portNum].invoke(
      data,
      context
    );
  }

  void ComStubComponentBase ::
    drvAsyncSendOut_out(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvAsyncSendOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_drvAsyncSendOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_drvAsyncSendOut_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  void ComStubComponentBase ::
    drvReceiveReturnOut_out(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvReceiveReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_drvReceiveReturnOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_drvReceiveReturnOut_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  Drv::ByteStreamStatus ComStubComponentBase ::
    drvSendOut_out(
        FwIndexType portNum,
        Fw::Buffer& sendBuffer
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_drvSendOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_drvSendOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    return this->m_drvSendOut_OutputPort[portNum].invoke(
      sendBuffer
    );
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void ComStubComponentBase ::
    m_p_dataIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    FW_ASSERT(callComp);
    ComStubComponentBase* compPtr = static_cast<ComStubComponentBase*>(callComp);
    compPtr->dataIn_handlerBase(
      portNum,
      data,
      context
    );
  }

  void ComStubComponentBase ::
    m_p_dataReturnIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    FW_ASSERT(callComp);
    ComStubComponentBase* compPtr = static_cast<ComStubComponentBase*>(callComp);
    compPtr->dataReturnIn_handlerBase(
      portNum,
      data,
      context
    );
  }

  void ComStubComponentBase ::
    m_p_drvAsyncSendReturnIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& buffer,
        const Drv::ByteStreamStatus& status
    )
  {
    FW_ASSERT(callComp);
    ComStubComponentBase* compPtr = static_cast<ComStubComponentBase*>(callComp);
    compPtr->drvAsyncSendReturnIn_handlerBase(
      portNum,
      buffer,
      status
    );
  }

  void ComStubComponentBase ::
    m_p_drvConnected_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum
    )
  {
    FW_ASSERT(callComp);
    ComStubComponentBase* compPtr = static_cast<ComStubComponentBase*>(callComp);
    compPtr->drvConnected_handlerBase(portNum);
  }

  void ComStubComponentBase ::
    m_p_drvReceiveIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& buffer,
        const Drv::ByteStreamStatus& status
    )
  {
    FW_ASSERT(callComp);
    ComStubComponentBase* compPtr = static_cast<ComStubComponentBase*>(callComp);
    compPtr->drvReceiveIn_handlerBase(
      portNum,
      buffer,
      status
    );
  }

}
