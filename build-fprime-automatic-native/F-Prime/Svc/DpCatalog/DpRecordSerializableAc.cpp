// ======================================================================
// \title  DpRecordSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for DpRecord struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Svc/DpCatalog/DpRecordSerializableAc.hpp"

namespace Svc {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  DpRecord ::
    DpRecord() :
      Serializable(),
      m_id(0),
      m_tSec(0),
      m_tSub(0),
      m_priority(0),
      m_size(0),
      m_blocks(0),
      m_state(Fw::DpState::UNTRANSMITTED)
  {

  }

  DpRecord ::
    DpRecord(
        FwDpIdType id,
        U32 tSec,
        U32 tSub,
        U32 priority,
        U64 size,
        U32 blocks,
        Fw::DpState::T state
    ) :
      Serializable(),
      m_id(id),
      m_tSec(tSec),
      m_tSub(tSub),
      m_priority(priority),
      m_size(size),
      m_blocks(blocks),
      m_state(state)
  {

  }

  DpRecord ::
    DpRecord(const DpRecord& obj) :
      Serializable(),
      m_id(obj.m_id),
      m_tSec(obj.m_tSec),
      m_tSub(obj.m_tSub),
      m_priority(obj.m_priority),
      m_size(obj.m_size),
      m_blocks(obj.m_blocks),
      m_state(obj.m_state)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  DpRecord& DpRecord ::
    operator=(const DpRecord& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.m_id, obj.m_tSec, obj.m_tSub, obj.m_priority, obj.m_size, obj.m_blocks, obj.m_state);
    return *this;
  }

  bool DpRecord ::
    operator==(const DpRecord& obj) const
  {
    if (this == &obj) { return true; }
    return (
      (this->m_id == obj.m_id) &&
      (this->m_tSec == obj.m_tSec) &&
      (this->m_tSub == obj.m_tSub) &&
      (this->m_priority == obj.m_priority) &&
      (this->m_size == obj.m_size) &&
      (this->m_blocks == obj.m_blocks) &&
      (this->m_state == obj.m_state)
    );
  }

  bool DpRecord ::
    operator!=(const DpRecord& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const DpRecord& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus DpRecord ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serializeFrom(this->m_id);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_tSec);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_tSub);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_priority);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_size);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_blocks);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_state);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus DpRecord ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserializeTo(this->m_id);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_tSec);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_tSub);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_priority);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_size);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_blocks);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_state);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  FwSizeType DpRecord ::
    serializedSize() const
  {
    FwSizeType size = 0;
    size += sizeof(FwDpIdType);
    size += sizeof(U32);
    size += sizeof(U32);
    size += sizeof(U32);
    size += sizeof(U64);
    size += sizeof(U32);
    size += Fw::DpState::SERIALIZED_SIZE;
    return size;
  }

#if FW_SERIALIZABLE_TO_STRING

  void DpRecord ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String tmp;
    sb = "( ";

    // Format id
    sb += "id = ";
    tmp.format("%" PRIu32 "", this->m_id);
    sb += tmp;
    sb += ", ";

    // Format tSec
    sb += "tSec = ";
    tmp.format("%" PRIu32 "", this->m_tSec);
    sb += tmp;
    sb += ", ";

    // Format tSub
    sb += "tSub = ";
    tmp.format("%" PRIu32 "", this->m_tSub);
    sb += tmp;
    sb += ", ";

    // Format priority
    sb += "priority = ";
    tmp.format("%" PRIu32 "", this->m_priority);
    sb += tmp;
    sb += ", ";

    // Format size
    sb += "size = ";
    tmp.format("%" PRIu64 "", this->m_size);
    sb += tmp;
    sb += ", ";

    // Format blocks
    sb += "blocks = ";
    tmp.format("%" PRIu32 "", this->m_blocks);
    sb += tmp;
    sb += ", ";

    // Format state
    sb += "state = ";
    this->m_state.toString(tmp);
    sb += tmp;
    sb += " )";
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void DpRecord ::
    set(
        FwDpIdType id,
        U32 tSec,
        U32 tSub,
        U32 priority,
        U64 size,
        U32 blocks,
        Fw::DpState::T state
    )
  {
    this->m_id = id;
    this->m_tSec = tSec;
    this->m_tSub = tSub;
    this->m_priority = priority;
    this->m_size = size;
    this->m_blocks = blocks;
    this->m_state = state;
  }

  void DpRecord ::
    set_id(FwDpIdType id)
  {
    this->m_id = id;
  }

  void DpRecord ::
    set_tSec(U32 tSec)
  {
    this->m_tSec = tSec;
  }

  void DpRecord ::
    set_tSub(U32 tSub)
  {
    this->m_tSub = tSub;
  }

  void DpRecord ::
    set_priority(U32 priority)
  {
    this->m_priority = priority;
  }

  void DpRecord ::
    set_size(U64 size)
  {
    this->m_size = size;
  }

  void DpRecord ::
    set_blocks(U32 blocks)
  {
    this->m_blocks = blocks;
  }

  void DpRecord ::
    set_state(Fw::DpState::T state)
  {
    this->m_state = state;
  }

}
