// ======================================================================
// \title  TMHeaderSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for TMHeader struct
// ======================================================================

#ifndef Svc_Ccsds_TMHeaderSerializableAc_HPP
#define Svc_Ccsds_TMHeaderSerializableAc_HPP

#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

namespace Svc {

  namespace Ccsds {

    //! Describes the frame header format for a Telemetry (TM) Transfer Frame header
    class TMHeader :
      public Fw::Serializable
    {

      public:

        // ----------------------------------------------------------------------
        // Constants
        // ----------------------------------------------------------------------

        enum {
          //! The size of the serial representation
          SERIALIZED_SIZE =
            sizeof(U16) +
            sizeof(U8) +
            sizeof(U8) +
            sizeof(U16)
        };

      public:

        // ----------------------------------------------------------------------
        // Constructors
        // ----------------------------------------------------------------------

        //! Constructor (default value)
        TMHeader();

        //! Member constructor
        TMHeader(
            U16 globalVcId,
            U8 masterFrameCount,
            U8 virtualFrameCount,
            U16 dataFieldStatus
        );

        //! Copy constructor
        TMHeader(
            const TMHeader& obj //!< The source object
        );

      public:

        // ----------------------------------------------------------------------
        // Operators
        // ----------------------------------------------------------------------

        //! Copy assignment operator
        TMHeader& operator=(
            const TMHeader& obj //!< The source object
        );

        //! Equality operator
        bool operator==(
            const TMHeader& obj //!< The other object
        ) const;

        //! Inequality operator
        bool operator!=(
            const TMHeader& obj //!< The other object
        ) const;

#ifdef BUILD_UT

        //! Ostream operator
        friend std::ostream& operator<<(
            std::ostream& os, //!< The ostream
            const TMHeader& obj //!< The object
        );

#endif

      public:

        // ----------------------------------------------------------------------
        // Member functions
        // ----------------------------------------------------------------------

        //! Serialization
        Fw::SerializeStatus serializeTo(
            Fw::SerializeBufferBase& buffer //!< The serial buffer
        ) const;

        //! Deserialization
        Fw::SerializeStatus deserializeFrom(
            Fw::SerializeBufferBase& buffer //!< The serial buffer
        );

        //! Get the dynamic serialized size of the struct
        FwSizeType serializedSize() const;

#if FW_SERIALIZABLE_TO_STRING

        //! Convert struct to string
        void toString(
            Fw::StringBase& sb //!< The StringBase object to hold the result
        ) const;

#endif

        // ----------------------------------------------------------------------
        // Getter functions
        // ----------------------------------------------------------------------

        //! Get member globalVcId
        U16 get_globalVcId() const
        {
          return this->m_globalVcId;
        }

        //! Get member masterFrameCount
        U8 get_masterFrameCount() const
        {
          return this->m_masterFrameCount;
        }

        //! Get member virtualFrameCount
        U8 get_virtualFrameCount() const
        {
          return this->m_virtualFrameCount;
        }

        //! Get member dataFieldStatus
        U16 get_dataFieldStatus() const
        {
          return this->m_dataFieldStatus;
        }

        // ----------------------------------------------------------------------
        // Setter functions
        // ----------------------------------------------------------------------

        //! Set all members
        void set(
            U16 globalVcId,
            U8 masterFrameCount,
            U8 virtualFrameCount,
            U16 dataFieldStatus
        );

        //! Set member globalVcId
        void set_globalVcId(U16 globalVcId);

        //! Set member masterFrameCount
        void set_masterFrameCount(U8 masterFrameCount);

        //! Set member virtualFrameCount
        void set_virtualFrameCount(U8 virtualFrameCount);

        //! Set member dataFieldStatus
        void set_dataFieldStatus(U16 dataFieldStatus);

      protected:

        // ----------------------------------------------------------------------
        // Member variables
        // ----------------------------------------------------------------------

        U16 m_globalVcId;
        U8 m_masterFrameCount;
        U8 m_virtualFrameCount;
        U16 m_dataFieldStatus;

    };

  }

}

#endif
