// ======================================================================
// \title  TMHeaderSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for TMHeader struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Svc/Ccsds/Types/TMHeaderSerializableAc.hpp"

namespace Svc {

  namespace Ccsds {

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    TMHeader ::
      TMHeader() :
        Serializable(),
        m_globalVcId(0),
        m_masterFrameCount(0),
        m_virtualFrameCount(0),
        m_dataFieldStatus(0)
    {

    }

    TMHeader ::
      TMHeader(
          U16 globalVcId,
          U8 masterFrameCount,
          U8 virtualFrameCount,
          U16 dataFieldStatus
      ) :
        Serializable(),
        m_globalVcId(globalVcId),
        m_masterFrameCount(masterFrameCount),
        m_virtualFrameCount(virtualFrameCount),
        m_dataFieldStatus(dataFieldStatus)
    {

    }

    TMHeader ::
      TMHeader(const TMHeader& obj) :
        Serializable(),
        m_globalVcId(obj.m_globalVcId),
        m_masterFrameCount(obj.m_masterFrameCount),
        m_virtualFrameCount(obj.m_virtualFrameCount),
        m_dataFieldStatus(obj.m_dataFieldStatus)
    {

    }

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    TMHeader& TMHeader ::
      operator=(const TMHeader& obj)
    {
      if (this == &obj) {
        return *this;
      }

      set(obj.m_globalVcId, obj.m_masterFrameCount, obj.m_virtualFrameCount, obj.m_dataFieldStatus);
      return *this;
    }

    bool TMHeader ::
      operator==(const TMHeader& obj) const
    {
      if (this == &obj) { return true; }
      return (
        (this->m_globalVcId == obj.m_globalVcId) &&
        (this->m_masterFrameCount == obj.m_masterFrameCount) &&
        (this->m_virtualFrameCount == obj.m_virtualFrameCount) &&
        (this->m_dataFieldStatus == obj.m_dataFieldStatus)
      );
    }

    bool TMHeader ::
      operator!=(const TMHeader& obj) const
    {
      return !(*this == obj);
    }

#ifdef BUILD_UT

    std::ostream& operator<<(std::ostream& os, const TMHeader& obj) {
      Fw::String s;
      obj.toString(s);
      os << s.toChar();
      return os;
    }

#endif

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    Fw::SerializeStatus TMHeader ::
      serializeTo(Fw::SerializeBufferBase& buffer) const
    {
      Fw::SerializeStatus status;

      status = buffer.serializeFrom(this->m_globalVcId);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
      status = buffer.serializeFrom(this->m_masterFrameCount);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
      status = buffer.serializeFrom(this->m_virtualFrameCount);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
      status = buffer.serializeFrom(this->m_dataFieldStatus);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }

      return status;
    }

    Fw::SerializeStatus TMHeader ::
      deserializeFrom(Fw::SerializeBufferBase& buffer)
    {
      Fw::SerializeStatus status;

      status = buffer.deserializeTo(this->m_globalVcId);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
      status = buffer.deserializeTo(this->m_masterFrameCount);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
      status = buffer.deserializeTo(this->m_virtualFrameCount);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
      status = buffer.deserializeTo(this->m_dataFieldStatus);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }

      return status;
    }

    FwSizeType TMHeader ::
      serializedSize() const
    {
      FwSizeType size = 0;
      size += sizeof(U16);
      size += sizeof(U8);
      size += sizeof(U8);
      size += sizeof(U16);
      return size;
    }

#if FW_SERIALIZABLE_TO_STRING

    void TMHeader ::
      toString(Fw::StringBase& sb) const
    {
      Fw::String tmp;
      sb = "( ";

      // Format globalVcId
      sb += "globalVcId = ";
      tmp.format("%" PRIu16 "", this->m_globalVcId);
      sb += tmp;
      sb += ", ";

      // Format masterFrameCount
      sb += "masterFrameCount = ";
      tmp.format("%" PRIu8 "", this->m_masterFrameCount);
      sb += tmp;
      sb += ", ";

      // Format virtualFrameCount
      sb += "virtualFrameCount = ";
      tmp.format("%" PRIu8 "", this->m_virtualFrameCount);
      sb += tmp;
      sb += ", ";

      // Format dataFieldStatus
      sb += "dataFieldStatus = ";
      tmp.format("%" PRIu16 "", this->m_dataFieldStatus);
      sb += tmp;
      sb += " )";
    }

#endif

    // ----------------------------------------------------------------------
    // Setter functions
    // ----------------------------------------------------------------------

    void TMHeader ::
      set(
          U16 globalVcId,
          U8 masterFrameCount,
          U8 virtualFrameCount,
          U16 dataFieldStatus
      )
    {
      this->m_globalVcId = globalVcId;
      this->m_masterFrameCount = masterFrameCount;
      this->m_virtualFrameCount = virtualFrameCount;
      this->m_dataFieldStatus = dataFieldStatus;
    }

    void TMHeader ::
      set_globalVcId(U16 globalVcId)
    {
      this->m_globalVcId = globalVcId;
    }

    void TMHeader ::
      set_masterFrameCount(U8 masterFrameCount)
    {
      this->m_masterFrameCount = masterFrameCount;
    }

    void TMHeader ::
      set_virtualFrameCount(U8 virtualFrameCount)
    {
      this->m_virtualFrameCount = virtualFrameCount;
    }

    void TMHeader ::
      set_dataFieldStatus(U16 dataFieldStatus)
    {
      this->m_dataFieldStatus = dataFieldStatus;
    }

  }

}
