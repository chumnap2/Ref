// ======================================================================
// \title  TCHeaderSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for TCHeader struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Svc/Ccsds/Types/TCHeaderSerializableAc.hpp"

namespace Svc {

  namespace Ccsds {

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    TCHeader ::
      TCHeader() :
        Serializable(),
        m_flagsAndScId(0),
        m_vcIdAndLength(0),
        m_frameSequenceNum(0)
    {

    }

    TCHeader ::
      TCHeader(
          U16 flagsAndScId,
          U16 vcIdAndLength,
          U8 frameSequenceNum
      ) :
        Serializable(),
        m_flagsAndScId(flagsAndScId),
        m_vcIdAndLength(vcIdAndLength),
        m_frameSequenceNum(frameSequenceNum)
    {

    }

    TCHeader ::
      TCHeader(const TCHeader& obj) :
        Serializable(),
        m_flagsAndScId(obj.m_flagsAndScId),
        m_vcIdAndLength(obj.m_vcIdAndLength),
        m_frameSequenceNum(obj.m_frameSequenceNum)
    {

    }

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    TCHeader& TCHeader ::
      operator=(const TCHeader& obj)
    {
      if (this == &obj) {
        return *this;
      }

      set(obj.m_flagsAndScId, obj.m_vcIdAndLength, obj.m_frameSequenceNum);
      return *this;
    }

    bool TCHeader ::
      operator==(const TCHeader& obj) const
    {
      if (this == &obj) { return true; }
      return (
        (this->m_flagsAndScId == obj.m_flagsAndScId) &&
        (this->m_vcIdAndLength == obj.m_vcIdAndLength) &&
        (this->m_frameSequenceNum == obj.m_frameSequenceNum)
      );
    }

    bool TCHeader ::
      operator!=(const TCHeader& obj) const
    {
      return !(*this == obj);
    }

#ifdef BUILD_UT

    std::ostream& operator<<(std::ostream& os, const TCHeader& obj) {
      Fw::String s;
      obj.toString(s);
      os << s.toChar();
      return os;
    }

#endif

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    Fw::SerializeStatus TCHeader ::
      serializeTo(Fw::SerializeBufferBase& buffer) const
    {
      Fw::SerializeStatus status;

      status = buffer.serializeFrom(this->m_flagsAndScId);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
      status = buffer.serializeFrom(this->m_vcIdAndLength);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
      status = buffer.serializeFrom(this->m_frameSequenceNum);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }

      return status;
    }

    Fw::SerializeStatus TCHeader ::
      deserializeFrom(Fw::SerializeBufferBase& buffer)
    {
      Fw::SerializeStatus status;

      status = buffer.deserializeTo(this->m_flagsAndScId);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
      status = buffer.deserializeTo(this->m_vcIdAndLength);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
      status = buffer.deserializeTo(this->m_frameSequenceNum);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }

      return status;
    }

    FwSizeType TCHeader ::
      serializedSize() const
    {
      FwSizeType size = 0;
      size += sizeof(U16);
      size += sizeof(U16);
      size += sizeof(U8);
      return size;
    }

#if FW_SERIALIZABLE_TO_STRING

    void TCHeader ::
      toString(Fw::StringBase& sb) const
    {
      Fw::String tmp;
      sb = "( ";

      // Format flagsAndScId
      sb += "flagsAndScId = ";
      tmp.format("%" PRIu16 "", this->m_flagsAndScId);
      sb += tmp;
      sb += ", ";

      // Format vcIdAndLength
      sb += "vcIdAndLength = ";
      tmp.format("%" PRIu16 "", this->m_vcIdAndLength);
      sb += tmp;
      sb += ", ";

      // Format frameSequenceNum
      sb += "frameSequenceNum = ";
      tmp.format("%" PRIu8 "", this->m_frameSequenceNum);
      sb += tmp;
      sb += " )";
    }

#endif

    // ----------------------------------------------------------------------
    // Setter functions
    // ----------------------------------------------------------------------

    void TCHeader ::
      set(
          U16 flagsAndScId,
          U16 vcIdAndLength,
          U8 frameSequenceNum
      )
    {
      this->m_flagsAndScId = flagsAndScId;
      this->m_vcIdAndLength = vcIdAndLength;
      this->m_frameSequenceNum = frameSequenceNum;
    }

    void TCHeader ::
      set_flagsAndScId(U16 flagsAndScId)
    {
      this->m_flagsAndScId = flagsAndScId;
    }

    void TCHeader ::
      set_vcIdAndLength(U16 vcIdAndLength)
    {
      this->m_vcIdAndLength = vcIdAndLength;
    }

    void TCHeader ::
      set_frameSequenceNum(U8 frameSequenceNum)
    {
      this->m_frameSequenceNum = frameSequenceNum;
    }

  }

}
