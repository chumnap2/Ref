// ======================================================================
// \title  TCHeaderSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for TCHeader struct
// ======================================================================

#ifndef Svc_Ccsds_TCHeaderSerializableAc_HPP
#define Svc_Ccsds_TCHeaderSerializableAc_HPP

#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

namespace Svc {

  namespace Ccsds {

    //! Describes the frame header format for a Telecommand (TC) Transfer Frame header
    class TCHeader :
      public Fw::Serializable
    {

      public:

        // ----------------------------------------------------------------------
        // Constants
        // ----------------------------------------------------------------------

        enum {
          //! The size of the serial representation
          SERIALIZED_SIZE =
            sizeof(U16) +
            sizeof(U16) +
            sizeof(U8)
        };

      public:

        // ----------------------------------------------------------------------
        // Constructors
        // ----------------------------------------------------------------------

        //! Constructor (default value)
        TCHeader();

        //! Member constructor
        TCHeader(
            U16 flagsAndScId,
            U16 vcIdAndLength,
            U8 frameSequenceNum
        );

        //! Copy constructor
        TCHeader(
            const TCHeader& obj //!< The source object
        );

      public:

        // ----------------------------------------------------------------------
        // Operators
        // ----------------------------------------------------------------------

        //! Copy assignment operator
        TCHeader& operator=(
            const TCHeader& obj //!< The source object
        );

        //! Equality operator
        bool operator==(
            const TCHeader& obj //!< The other object
        ) const;

        //! Inequality operator
        bool operator!=(
            const TCHeader& obj //!< The other object
        ) const;

#ifdef BUILD_UT

        //! Ostream operator
        friend std::ostream& operator<<(
            std::ostream& os, //!< The ostream
            const TCHeader& obj //!< The object
        );

#endif

      public:

        // ----------------------------------------------------------------------
        // Member functions
        // ----------------------------------------------------------------------

        //! Serialization
        Fw::SerializeStatus serializeTo(
            Fw::SerializeBufferBase& buffer //!< The serial buffer
        ) const;

        //! Deserialization
        Fw::SerializeStatus deserializeFrom(
            Fw::SerializeBufferBase& buffer //!< The serial buffer
        );

        //! Get the dynamic serialized size of the struct
        FwSizeType serializedSize() const;

#if FW_SERIALIZABLE_TO_STRING

        //! Convert struct to string
        void toString(
            Fw::StringBase& sb //!< The StringBase object to hold the result
        ) const;

#endif

        // ----------------------------------------------------------------------
        // Getter functions
        // ----------------------------------------------------------------------

        //! Get member flagsAndScId
        U16 get_flagsAndScId() const
        {
          return this->m_flagsAndScId;
        }

        //! Get member vcIdAndLength
        U16 get_vcIdAndLength() const
        {
          return this->m_vcIdAndLength;
        }

        //! Get member frameSequenceNum
        U8 get_frameSequenceNum() const
        {
          return this->m_frameSequenceNum;
        }

        // ----------------------------------------------------------------------
        // Setter functions
        // ----------------------------------------------------------------------

        //! Set all members
        void set(
            U16 flagsAndScId,
            U16 vcIdAndLength,
            U8 frameSequenceNum
        );

        //! Set member flagsAndScId
        void set_flagsAndScId(U16 flagsAndScId);

        //! Set member vcIdAndLength
        void set_vcIdAndLength(U16 vcIdAndLength);

        //! Set member frameSequenceNum
        void set_frameSequenceNum(U8 frameSequenceNum);

      protected:

        // ----------------------------------------------------------------------
        // Member variables
        // ----------------------------------------------------------------------

        U16 m_flagsAndScId;
        U16 m_vcIdAndLength;
        U8 m_frameSequenceNum;

    };

  }

}

#endif
