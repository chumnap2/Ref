// ======================================================================
// \title  TMTrailerSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for TMTrailer struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Svc/Ccsds/Types/TMTrailerSerializableAc.hpp"

namespace Svc {

  namespace Ccsds {

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    TMTrailer ::
      TMTrailer() :
        Serializable(),
        m_fecf(0)
    {

    }

    TMTrailer ::
      TMTrailer(U16 fecf) :
        Serializable(),
        m_fecf(fecf)
    {

    }

    TMTrailer ::
      TMTrailer(const TMTrailer& obj) :
        Serializable(),
        m_fecf(obj.m_fecf)
    {

    }

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    TMTrailer& TMTrailer ::
      operator=(const TMTrailer& obj)
    {
      if (this == &obj) {
        return *this;
      }

      set(obj.m_fecf);
      return *this;
    }

    bool TMTrailer ::
      operator==(const TMTrailer& obj) const
    {
      return (this->m_fecf == obj.m_fecf);
    }

    bool TMTrailer ::
      operator!=(const TMTrailer& obj) const
    {
      return !(*this == obj);
    }

#ifdef BUILD_UT

    std::ostream& operator<<(std::ostream& os, const TMTrailer& obj) {
      Fw::String s;
      obj.toString(s);
      os << s.toChar();
      return os;
    }

#endif

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    Fw::SerializeStatus TMTrailer ::
      serializeTo(Fw::SerializeBufferBase& buffer) const
    {
      Fw::SerializeStatus status;

      status = buffer.serializeFrom(this->m_fecf);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }

      return status;
    }

    Fw::SerializeStatus TMTrailer ::
      deserializeFrom(Fw::SerializeBufferBase& buffer)
    {
      Fw::SerializeStatus status;

      status = buffer.deserializeTo(this->m_fecf);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }

      return status;
    }

    FwSizeType TMTrailer ::
      serializedSize() const
    {
      FwSizeType size = 0;
      size += sizeof(U16);
      return size;
    }

#if FW_SERIALIZABLE_TO_STRING

    void TMTrailer ::
      toString(Fw::StringBase& sb) const
    {
      Fw::String tmp;
      sb = "( ";

      // Format fecf
      sb += "fecf = ";
      tmp.format("%" PRIu16 "", this->m_fecf);
      sb += tmp;
      sb += " )";
    }

#endif

    // ----------------------------------------------------------------------
    // Setter functions
    // ----------------------------------------------------------------------

    void TMTrailer ::
      set(U16 fecf)
    {
      this->m_fecf = fecf;
    }

    void TMTrailer ::
      set_fecf(U16 fecf)
    {
      this->m_fecf = fecf;
    }

  }

}
