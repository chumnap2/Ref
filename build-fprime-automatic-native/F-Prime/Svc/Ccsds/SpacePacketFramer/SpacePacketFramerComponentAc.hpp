// ======================================================================
// \title  SpacePacketFramerComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for SpacePacketFramer component base class
// ======================================================================

#ifndef Svc_Ccsds_SpacePacketFramerComponentAc_HPP
#define Svc_Ccsds_SpacePacketFramerComponentAc_HPP

#include "Fw/Buffer/BufferGetPortAc.hpp"
#include "Fw/Buffer/BufferSendPortAc.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Log/LogPortAc.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Ports/SuccessCondition/SuccessConditionPortAc.hpp"
#include "Fw/Prm/PrmGetPortAc.hpp"
#include "Fw/Prm/PrmSetPortAc.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Fw/Tlm/TlmPortAc.hpp"
#include "Svc/Ccsds/Ports/ApidSequenceCountPortAc.hpp"
#include "Svc/Ports/CommsPorts/ComDataWithContextPortAc.hpp"

namespace Svc {

  namespace Ccsds {

    //! \class SpacePacketFramerComponentBase
    //! \brief Auto-generated base for SpacePacketFramer component
    //!
    //! Deframer for the CCSDS Space Packet protocol
    class SpacePacketFramerComponentBase :
      public Fw::PassiveComponentBase
    {

        // ----------------------------------------------------------------------
        // Friend classes
        // ----------------------------------------------------------------------

        //! Friend class tester to support autocoded test harness
        friend class SpacePacketFramerTesterBase;
        //! Friend class tester implementation to support white-box testing
        friend class SpacePacketFramerTester;

      protected:

        // ----------------------------------------------------------------------
        // Constants
        // ----------------------------------------------------------------------

        //! Enumerations for numbers of typed input ports
        enum {
          NUM_COMSTATUSIN_INPUT_PORTS = 1,
          NUM_DATAIN_INPUT_PORTS = 1,
          NUM_DATARETURNIN_INPUT_PORTS = 1,
        };

        //! Enumerations for numbers of special output ports
        enum {
          NUM_LOGOUT_OUTPUT_PORTS = 1,
          NUM_LOGTEXTOUT_OUTPUT_PORTS = 1,
          NUM_PRMGETOUT_OUTPUT_PORTS = 1,
          NUM_PRMSETOUT_OUTPUT_PORTS = 1,
          NUM_TIMECALLER_OUTPUT_PORTS = 1,
          NUM_TLMOUT_OUTPUT_PORTS = 1,
        };

        //! Enumerations for numbers of typed output ports
        enum {
          NUM_BUFFERALLOCATE_OUTPUT_PORTS = 1,
          NUM_BUFFERDEALLOCATE_OUTPUT_PORTS = 1,
          NUM_COMSTATUSOUT_OUTPUT_PORTS = 1,
          NUM_DATAOUT_OUTPUT_PORTS = 1,
          NUM_DATARETURNOUT_OUTPUT_PORTS = 1,
          NUM_GETAPIDSEQCOUNT_OUTPUT_PORTS = 1,
        };

      public:

        // ----------------------------------------------------------------------
        // Component initialization
        // ----------------------------------------------------------------------

        //! Initialize SpacePacketFramerComponentBase object
        void init(
            FwEnumStoreType instance = 0 //!< The instance number
        );

      public:

        // ----------------------------------------------------------------------
        // Getters for typed input ports
        // ----------------------------------------------------------------------

        //! Get typed input port at index
        //!
        //! \return comStatusIn[portNum]
        Fw::InputSuccessConditionPort* get_comStatusIn_InputPort(
            FwIndexType portNum //!< The port number
        );

        //! Get typed input port at index
        //!
        //! \return dataIn[portNum]
        Svc::InputComDataWithContextPort* get_dataIn_InputPort(
            FwIndexType portNum //!< The port number
        );

        //! Get typed input port at index
        //!
        //! \return dataReturnIn[portNum]
        Svc::InputComDataWithContextPort* get_dataReturnIn_InputPort(
            FwIndexType portNum //!< The port number
        );

      public:

        // ----------------------------------------------------------------------
        // Connect input ports to special output ports
        // ----------------------------------------------------------------------

        //! Connect port to logOut[portNum]
        void set_logOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputLogPort* port //!< The input port
        );

#if FW_ENABLE_TEXT_LOGGING == 1

        //! Connect port to logTextOut[portNum]
        void set_logTextOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputLogTextPort* port //!< The input port
        );

#endif

        //! Connect port to prmGetOut[portNum]
        void set_prmGetOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputPrmGetPort* port //!< The input port
        );

        //! Connect port to prmSetOut[portNum]
        void set_prmSetOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputPrmSetPort* port //!< The input port
        );

        //! Connect port to timeCaller[portNum]
        void set_timeCaller_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputTimePort* port //!< The input port
        );

        //! Connect port to tlmOut[portNum]
        void set_tlmOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputTlmPort* port //!< The input port
        );

      public:

        // ----------------------------------------------------------------------
        // Connect typed input ports to typed output ports
        // ----------------------------------------------------------------------

        //! Connect port to bufferAllocate[portNum]
        void set_bufferAllocate_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputBufferGetPort* port //!< The input port
        );

        //! Connect port to bufferDeallocate[portNum]
        void set_bufferDeallocate_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputBufferSendPort* port //!< The input port
        );

        //! Connect port to comStatusOut[portNum]
        void set_comStatusOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputSuccessConditionPort* port //!< The input port
        );

        //! Connect port to dataOut[portNum]
        void set_dataOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Svc::InputComDataWithContextPort* port //!< The input port
        );

        //! Connect port to dataReturnOut[portNum]
        void set_dataReturnOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Svc::InputComDataWithContextPort* port //!< The input port
        );

        //! Connect port to getApidSeqCount[portNum]
        void set_getApidSeqCount_OutputPort(
            FwIndexType portNum, //!< The port number
            Svc::Ccsds::InputApidSequenceCountPort* port //!< The input port
        );

#if FW_PORT_SERIALIZATION

      public:

        // ----------------------------------------------------------------------
        // Connect serial input ports to special output ports
        // ----------------------------------------------------------------------

        //! Connect port to logOut[portNum]
        void set_logOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputSerializePort* port //!< The port
        );

#if FW_ENABLE_TEXT_LOGGING == 1

        //! Connect port to logTextOut[portNum]
        void set_logTextOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputSerializePort* port //!< The port
        );

#endif

        //! Connect port to prmSetOut[portNum]
        void set_prmSetOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputSerializePort* port //!< The port
        );

        //! Connect port to timeCaller[portNum]
        void set_timeCaller_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputSerializePort* port //!< The port
        );

        //! Connect port to tlmOut[portNum]
        void set_tlmOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputSerializePort* port //!< The port
        );

#endif

#if FW_PORT_SERIALIZATION

      public:

        // ----------------------------------------------------------------------
        // Connect serial input ports to typed output ports
        // ----------------------------------------------------------------------

        //! Connect port to bufferDeallocate[portNum]
        void set_bufferDeallocate_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputSerializePort* port //!< The port
        );

        //! Connect port to comStatusOut[portNum]
        void set_comStatusOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputSerializePort* port //!< The port
        );

        //! Connect port to dataOut[portNum]
        void set_dataOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputSerializePort* port //!< The port
        );

        //! Connect port to dataReturnOut[portNum]
        void set_dataReturnOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputSerializePort* port //!< The port
        );

#endif

      protected:

        // ----------------------------------------------------------------------
        // Component construction and destruction
        // ----------------------------------------------------------------------

        //! Construct SpacePacketFramerComponentBase object
        SpacePacketFramerComponentBase(
            const char* compName = "" //!< The component name
        );

        //! Destroy SpacePacketFramerComponentBase object
        virtual ~SpacePacketFramerComponentBase();

      protected:

        // ----------------------------------------------------------------------
        // Getters for numbers of typed input ports
        // ----------------------------------------------------------------------

        //! Get the number of comStatusIn input ports
        //!
        //! \return The number of comStatusIn input ports
        FwIndexType getNum_comStatusIn_InputPorts() const;

        //! Get the number of dataIn input ports
        //!
        //! \return The number of dataIn input ports
        FwIndexType getNum_dataIn_InputPorts() const;

        //! Get the number of dataReturnIn input ports
        //!
        //! \return The number of dataReturnIn input ports
        FwIndexType getNum_dataReturnIn_InputPorts() const;

      protected:

        // ----------------------------------------------------------------------
        // Getters for numbers of special output ports
        // ----------------------------------------------------------------------

        //! Get the number of logOut output ports
        //!
        //! \return The number of logOut output ports
        FwIndexType getNum_logOut_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

        //! Get the number of logTextOut output ports
        //!
        //! \return The number of logTextOut output ports
        FwIndexType getNum_logTextOut_OutputPorts() const;

#endif

        //! Get the number of prmGetOut output ports
        //!
        //! \return The number of prmGetOut output ports
        FwIndexType getNum_prmGetOut_OutputPorts() const;

        //! Get the number of prmSetOut output ports
        //!
        //! \return The number of prmSetOut output ports
        FwIndexType getNum_prmSetOut_OutputPorts() const;

        //! Get the number of timeCaller output ports
        //!
        //! \return The number of timeCaller output ports
        FwIndexType getNum_timeCaller_OutputPorts() const;

        //! Get the number of tlmOut output ports
        //!
        //! \return The number of tlmOut output ports
        FwIndexType getNum_tlmOut_OutputPorts() const;

      protected:

        // ----------------------------------------------------------------------
        // Getters for numbers of typed output ports
        // ----------------------------------------------------------------------

        //! Get the number of bufferAllocate output ports
        //!
        //! \return The number of bufferAllocate output ports
        FwIndexType getNum_bufferAllocate_OutputPorts() const;

        //! Get the number of bufferDeallocate output ports
        //!
        //! \return The number of bufferDeallocate output ports
        FwIndexType getNum_bufferDeallocate_OutputPorts() const;

        //! Get the number of comStatusOut output ports
        //!
        //! \return The number of comStatusOut output ports
        FwIndexType getNum_comStatusOut_OutputPorts() const;

        //! Get the number of dataOut output ports
        //!
        //! \return The number of dataOut output ports
        FwIndexType getNum_dataOut_OutputPorts() const;

        //! Get the number of dataReturnOut output ports
        //!
        //! \return The number of dataReturnOut output ports
        FwIndexType getNum_dataReturnOut_OutputPorts() const;

        //! Get the number of getApidSeqCount output ports
        //!
        //! \return The number of getApidSeqCount output ports
        FwIndexType getNum_getApidSeqCount_OutputPorts() const;

      protected:

        // ----------------------------------------------------------------------
        // Connection status queries for special output ports
        // ----------------------------------------------------------------------

        //! Check whether port logOut is connected
        //!
        //! \return Whether port logOut is connected
        bool isConnected_logOut_OutputPort(
            FwIndexType portNum //!< The port number
        );

#if FW_ENABLE_TEXT_LOGGING == 1

        //! Check whether port logTextOut is connected
        //!
        //! \return Whether port logTextOut is connected
        bool isConnected_logTextOut_OutputPort(
            FwIndexType portNum //!< The port number
        );

#endif

        //! Check whether port prmGetOut is connected
        //!
        //! \return Whether port prmGetOut is connected
        bool isConnected_prmGetOut_OutputPort(
            FwIndexType portNum //!< The port number
        );

        //! Check whether port prmSetOut is connected
        //!
        //! \return Whether port prmSetOut is connected
        bool isConnected_prmSetOut_OutputPort(
            FwIndexType portNum //!< The port number
        );

        //! Check whether port timeCaller is connected
        //!
        //! \return Whether port timeCaller is connected
        bool isConnected_timeCaller_OutputPort(
            FwIndexType portNum //!< The port number
        );

        //! Check whether port tlmOut is connected
        //!
        //! \return Whether port tlmOut is connected
        bool isConnected_tlmOut_OutputPort(
            FwIndexType portNum //!< The port number
        );

      protected:

        // ----------------------------------------------------------------------
        // Connection status queries for typed output ports
        // ----------------------------------------------------------------------

        //! Check whether port bufferAllocate is connected
        //!
        //! \return Whether port bufferAllocate is connected
        bool isConnected_bufferAllocate_OutputPort(
            FwIndexType portNum //!< The port number
        );

        //! Check whether port bufferDeallocate is connected
        //!
        //! \return Whether port bufferDeallocate is connected
        bool isConnected_bufferDeallocate_OutputPort(
            FwIndexType portNum //!< The port number
        );

        //! Check whether port comStatusOut is connected
        //!
        //! \return Whether port comStatusOut is connected
        bool isConnected_comStatusOut_OutputPort(
            FwIndexType portNum //!< The port number
        );

        //! Check whether port dataOut is connected
        //!
        //! \return Whether port dataOut is connected
        bool isConnected_dataOut_OutputPort(
            FwIndexType portNum //!< The port number
        );

        //! Check whether port dataReturnOut is connected
        //!
        //! \return Whether port dataReturnOut is connected
        bool isConnected_dataReturnOut_OutputPort(
            FwIndexType portNum //!< The port number
        );

        //! Check whether port getApidSeqCount is connected
        //!
        //! \return Whether port getApidSeqCount is connected
        bool isConnected_getApidSeqCount_OutputPort(
            FwIndexType portNum //!< The port number
        );

      protected:

        // ----------------------------------------------------------------------
        // Handlers to implement for typed input ports
        // ----------------------------------------------------------------------

        //! Handler for input port comStatusIn
        virtual void comStatusIn_handler(
            FwIndexType portNum, //!< The port number
            Fw::Success& condition //!< Condition success/failure
        ) = 0;

        //! Handler for input port dataIn
        virtual void dataIn_handler(
            FwIndexType portNum, //!< The port number
            Fw::Buffer& data,
            const ComCfg::FrameContext& context
        ) = 0;

        //! Handler for input port dataReturnIn
        virtual void dataReturnIn_handler(
            FwIndexType portNum, //!< The port number
            Fw::Buffer& data,
            const ComCfg::FrameContext& context
        ) = 0;

      protected:

        // ----------------------------------------------------------------------
        // Port handler base-class functions for typed input ports
        //
        // Call these functions directly to bypass the corresponding ports
        // ----------------------------------------------------------------------

        //! Handler base-class function for input port comStatusIn
        void comStatusIn_handlerBase(
            FwIndexType portNum, //!< The port number
            Fw::Success& condition //!< Condition success/failure
        );

        //! Handler base-class function for input port dataIn
        void dataIn_handlerBase(
            FwIndexType portNum, //!< The port number
            Fw::Buffer& data,
            const ComCfg::FrameContext& context
        );

        //! Handler base-class function for input port dataReturnIn
        void dataReturnIn_handlerBase(
            FwIndexType portNum, //!< The port number
            Fw::Buffer& data,
            const ComCfg::FrameContext& context
        );

      protected:

        // ----------------------------------------------------------------------
        // Invocation functions for typed output ports
        // ----------------------------------------------------------------------

        //! Invoke output port bufferAllocate
        Fw::Buffer bufferAllocate_out(
            FwIndexType portNum, //!< The port number
            FwSizeType size //!< The requested size
        );

        //! Invoke output port bufferDeallocate
        void bufferDeallocate_out(
            FwIndexType portNum, //!< The port number
            Fw::Buffer& fwBuffer //!< The buffer
        );

        //! Invoke output port comStatusOut
        void comStatusOut_out(
            FwIndexType portNum, //!< The port number
            Fw::Success& condition //!< Condition success/failure
        );

        //! Invoke output port dataOut
        void dataOut_out(
            FwIndexType portNum, //!< The port number
            Fw::Buffer& data,
            const ComCfg::FrameContext& context
        );

        //! Invoke output port dataReturnOut
        void dataReturnOut_out(
            FwIndexType portNum, //!< The port number
            Fw::Buffer& data,
            const ComCfg::FrameContext& context
        );

        //! Invoke output port getApidSeqCount
        U16 getApidSeqCount_out(
            FwIndexType portNum, //!< The port number
            const ComCfg::APID& apid,
            U16 sequenceCount
        );

      protected:

        // ----------------------------------------------------------------------
        // Time
        // ----------------------------------------------------------------------

        //! Get the time
        //!
        //! \\return The current time
        Fw::Time getTime() const;

      private:

        // ----------------------------------------------------------------------
        // Calls for messages received on typed input ports
        // ----------------------------------------------------------------------

        //! Callback for port comStatusIn
        static void m_p_comStatusIn_in(
            Fw::PassiveComponentBase* callComp, //!< The component instance
            FwIndexType portNum, //!< The port number
            Fw::Success& condition //!< Condition success/failure
        );

        //! Callback for port dataIn
        static void m_p_dataIn_in(
            Fw::PassiveComponentBase* callComp, //!< The component instance
            FwIndexType portNum, //!< The port number
            Fw::Buffer& data,
            const ComCfg::FrameContext& context
        );

        //! Callback for port dataReturnIn
        static void m_p_dataReturnIn_in(
            Fw::PassiveComponentBase* callComp, //!< The component instance
            FwIndexType portNum, //!< The port number
            Fw::Buffer& data,
            const ComCfg::FrameContext& context
        );

      private:

        // ----------------------------------------------------------------------
        // Typed input ports
        // ----------------------------------------------------------------------

        //! Input port comStatusIn
        Fw::InputSuccessConditionPort m_comStatusIn_InputPort[NUM_COMSTATUSIN_INPUT_PORTS];

        //! Input port dataIn
        Svc::InputComDataWithContextPort m_dataIn_InputPort[NUM_DATAIN_INPUT_PORTS];

        //! Input port dataReturnIn
        Svc::InputComDataWithContextPort m_dataReturnIn_InputPort[NUM_DATARETURNIN_INPUT_PORTS];

      private:

        // ----------------------------------------------------------------------
        // Special output ports
        // ----------------------------------------------------------------------

        //! Output port logOut
        Fw::OutputLogPort m_logOut_OutputPort[NUM_LOGOUT_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

        //! Output port logTextOut
        Fw::OutputLogTextPort m_logTextOut_OutputPort[NUM_LOGTEXTOUT_OUTPUT_PORTS];

#endif

        //! Output port prmGetOut
        Fw::OutputPrmGetPort m_prmGetOut_OutputPort[NUM_PRMGETOUT_OUTPUT_PORTS];

        //! Output port prmSetOut
        Fw::OutputPrmSetPort m_prmSetOut_OutputPort[NUM_PRMSETOUT_OUTPUT_PORTS];

        //! Output port timeCaller
        Fw::OutputTimePort m_timeCaller_OutputPort[NUM_TIMECALLER_OUTPUT_PORTS];

        //! Output port tlmOut
        Fw::OutputTlmPort m_tlmOut_OutputPort[NUM_TLMOUT_OUTPUT_PORTS];

      private:

        // ----------------------------------------------------------------------
        // Typed output ports
        // ----------------------------------------------------------------------

        //! Output port bufferAllocate
        Fw::OutputBufferGetPort m_bufferAllocate_OutputPort[NUM_BUFFERALLOCATE_OUTPUT_PORTS];

        //! Output port bufferDeallocate
        Fw::OutputBufferSendPort m_bufferDeallocate_OutputPort[NUM_BUFFERDEALLOCATE_OUTPUT_PORTS];

        //! Output port comStatusOut
        Fw::OutputSuccessConditionPort m_comStatusOut_OutputPort[NUM_COMSTATUSOUT_OUTPUT_PORTS];

        //! Output port dataOut
        Svc::OutputComDataWithContextPort m_dataOut_OutputPort[NUM_DATAOUT_OUTPUT_PORTS];

        //! Output port dataReturnOut
        Svc::OutputComDataWithContextPort m_dataReturnOut_OutputPort[NUM_DATARETURNOUT_OUTPUT_PORTS];

        //! Output port getApidSeqCount
        Svc::Ccsds::OutputApidSequenceCountPort m_getApidSeqCount_OutputPort[NUM_GETAPIDSEQCOUNT_OUTPUT_PORTS];

    };

  }

}

#endif
