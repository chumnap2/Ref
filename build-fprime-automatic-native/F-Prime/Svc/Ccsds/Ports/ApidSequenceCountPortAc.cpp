// ======================================================================
// \title  ApidSequenceCountPortAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for ApidSequenceCount port
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Svc/Ccsds/Ports/ApidSequenceCountPortAc.hpp"

namespace Svc {

  namespace Ccsds {

    // ----------------------------------------------------------------------
    // Input Port Member functions
    // ----------------------------------------------------------------------

    InputApidSequenceCountPort ::
      InputApidSequenceCountPort() :
        Fw::InputPortBase(),
        m_func(nullptr)
    {

    }

    void InputApidSequenceCountPort ::
      init()
    {
      Fw::InputPortBase::init();
    }

    void InputApidSequenceCountPort ::
      addCallComp(
          Fw::PassiveComponentBase* callComp,
          CompFuncPtr funcPtr
      )
    {
      FW_ASSERT(callComp != nullptr);
      FW_ASSERT(funcPtr != nullptr);

      this->m_comp = callComp;
      this->m_func = funcPtr;
      this->m_connObj = callComp;
    }

    U16 InputApidSequenceCountPort ::
      invoke(
          const ComCfg::APID& apid,
          U16 sequenceCount
      )
    {
#if FW_PORT_TRACING == 1
      this->trace();
#endif

      FW_ASSERT(this->m_comp != nullptr);
      FW_ASSERT(this->m_func != nullptr);

      return this->m_func(this->m_comp, this->m_portNum, apid, sequenceCount);
    }

#if FW_PORT_SERIALIZATION == 1

    Fw::SerializeStatus InputApidSequenceCountPort ::
      invokeSerial(Fw::SerializeBufferBase& _buffer)
    {
      // For ports with a return type, invokeSerial is not used
      (void) _buffer;

      FW_ASSERT(0);
      return Fw::FW_SERIALIZE_OK;
    }

#endif

    // ----------------------------------------------------------------------
    // Output Port Member functions
    // ----------------------------------------------------------------------

    OutputApidSequenceCountPort ::
      OutputApidSequenceCountPort() :
        Fw::OutputPortBase(),
        m_port(nullptr)
    {

    }

    void OutputApidSequenceCountPort ::
      init()
    {
      Fw::OutputPortBase::init();
    }

    void OutputApidSequenceCountPort ::
      addCallPort(InputApidSequenceCountPort* callPort)
    {
      FW_ASSERT(callPort != nullptr);

      this->m_port = callPort;
      this->m_connObj = callPort;

#if FW_PORT_SERIALIZATION == 1
      this->m_serPort = nullptr;
#endif
    }

    U16 OutputApidSequenceCountPort ::
      invoke(
          const ComCfg::APID& apid,
          U16 sequenceCount
      ) const
    {
#if FW_PORT_TRACING == 1
      this->trace();
#endif

      FW_ASSERT(this->m_port != nullptr);
      return this->m_port->invoke(apid, sequenceCount);
    }

  }

}
