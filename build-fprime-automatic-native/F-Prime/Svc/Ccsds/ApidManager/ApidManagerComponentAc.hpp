// ======================================================================
// \title  ApidManagerComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for ApidManager component base class
// ======================================================================

#ifndef Svc_Ccsds_ApidManagerComponentAc_HPP
#define Svc_Ccsds_ApidManagerComponentAc_HPP

#include <atomic>

#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Log/LogString.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Os/Mutex.hpp"
#include "Svc/Ccsds/Ports/ApidSequenceCountPortAc.hpp"

namespace Svc {

  namespace Ccsds {

    //! \class ApidManagerComponentBase
    //! \brief Auto-generated base for ApidManager component
    //!
    //! Maps output of ComQueue to CCSDS APIDs
    class ApidManagerComponentBase :
      public Fw::PassiveComponentBase
    {

        // ----------------------------------------------------------------------
        // Friend classes
        // ----------------------------------------------------------------------

        //! Friend class tester to support autocoded test harness
        friend class ApidManagerTesterBase;
        //! Friend class tester implementation to support white-box testing
        friend class ApidManagerTester;

      protected:

        // ----------------------------------------------------------------------
        // Constants
        // ----------------------------------------------------------------------

        //! Enumerations for numbers of typed input ports
        enum {
          NUM_GETAPIDSEQCOUNTIN_INPUT_PORTS = 1,
          NUM_VALIDATEAPIDSEQCOUNTIN_INPUT_PORTS = 1,
        };

        //! Enumerations for numbers of special output ports
        enum {
          NUM_LOGOUT_OUTPUT_PORTS = 1,
          NUM_LOGTEXTOUT_OUTPUT_PORTS = 1,
          NUM_TIMECALLER_OUTPUT_PORTS = 1,
        };

        //! Event IDs
        enum {
          EVENTID_UNEXPECTEDSEQUENCECOUNT = 0x0, //!< Deframing received an unexpected sequence count
          EVENTID_APIDTABLEFULL = 0x1, //!< Received an unregistered APID
        };

      public:

        // ----------------------------------------------------------------------
        // Component initialization
        // ----------------------------------------------------------------------

        //! Initialize ApidManagerComponentBase object
        void init(
            FwEnumStoreType instance = 0 //!< The instance number
        );

      public:

        // ----------------------------------------------------------------------
        // Getters for typed input ports
        // ----------------------------------------------------------------------

        //! Get typed input port at index
        //!
        //! \return getApidSeqCountIn[portNum]
        Svc::Ccsds::InputApidSequenceCountPort* get_getApidSeqCountIn_InputPort(
            FwIndexType portNum //!< The port number
        );

        //! Get typed input port at index
        //!
        //! \return validateApidSeqCountIn[portNum]
        Svc::Ccsds::InputApidSequenceCountPort* get_validateApidSeqCountIn_InputPort(
            FwIndexType portNum //!< The port number
        );

      public:

        // ----------------------------------------------------------------------
        // Connect input ports to special output ports
        // ----------------------------------------------------------------------

        //! Connect port to logOut[portNum]
        void set_logOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputLogPort* port //!< The input port
        );

#if FW_ENABLE_TEXT_LOGGING == 1

        //! Connect port to logTextOut[portNum]
        void set_logTextOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputLogTextPort* port //!< The input port
        );

#endif

        //! Connect port to timeCaller[portNum]
        void set_timeCaller_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputTimePort* port //!< The input port
        );

#if FW_PORT_SERIALIZATION

      public:

        // ----------------------------------------------------------------------
        // Connect serial input ports to special output ports
        // ----------------------------------------------------------------------

        //! Connect port to logOut[portNum]
        void set_logOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputSerializePort* port //!< The port
        );

#if FW_ENABLE_TEXT_LOGGING == 1

        //! Connect port to logTextOut[portNum]
        void set_logTextOut_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputSerializePort* port //!< The port
        );

#endif

        //! Connect port to timeCaller[portNum]
        void set_timeCaller_OutputPort(
            FwIndexType portNum, //!< The port number
            Fw::InputSerializePort* port //!< The port
        );

#endif

      protected:

        // ----------------------------------------------------------------------
        // Component construction and destruction
        // ----------------------------------------------------------------------

        //! Construct ApidManagerComponentBase object
        ApidManagerComponentBase(
            const char* compName = "" //!< The component name
        );

        //! Destroy ApidManagerComponentBase object
        virtual ~ApidManagerComponentBase();

      protected:

        // ----------------------------------------------------------------------
        // Getters for numbers of typed input ports
        // ----------------------------------------------------------------------

        //! Get the number of getApidSeqCountIn input ports
        //!
        //! \return The number of getApidSeqCountIn input ports
        FwIndexType getNum_getApidSeqCountIn_InputPorts() const;

        //! Get the number of validateApidSeqCountIn input ports
        //!
        //! \return The number of validateApidSeqCountIn input ports
        FwIndexType getNum_validateApidSeqCountIn_InputPorts() const;

      protected:

        // ----------------------------------------------------------------------
        // Getters for numbers of special output ports
        // ----------------------------------------------------------------------

        //! Get the number of logOut output ports
        //!
        //! \return The number of logOut output ports
        FwIndexType getNum_logOut_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

        //! Get the number of logTextOut output ports
        //!
        //! \return The number of logTextOut output ports
        FwIndexType getNum_logTextOut_OutputPorts() const;

#endif

        //! Get the number of timeCaller output ports
        //!
        //! \return The number of timeCaller output ports
        FwIndexType getNum_timeCaller_OutputPorts() const;

      protected:

        // ----------------------------------------------------------------------
        // Connection status queries for special output ports
        // ----------------------------------------------------------------------

        //! Check whether port logOut is connected
        //!
        //! \return Whether port logOut is connected
        bool isConnected_logOut_OutputPort(
            FwIndexType portNum //!< The port number
        );

#if FW_ENABLE_TEXT_LOGGING == 1

        //! Check whether port logTextOut is connected
        //!
        //! \return Whether port logTextOut is connected
        bool isConnected_logTextOut_OutputPort(
            FwIndexType portNum //!< The port number
        );

#endif

        //! Check whether port timeCaller is connected
        //!
        //! \return Whether port timeCaller is connected
        bool isConnected_timeCaller_OutputPort(
            FwIndexType portNum //!< The port number
        );

      protected:

        // ----------------------------------------------------------------------
        // Handlers to implement for typed input ports
        // ----------------------------------------------------------------------

        //! Handler for input port getApidSeqCountIn
        virtual U16 getApidSeqCountIn_handler(
            FwIndexType portNum, //!< The port number
            const ComCfg::APID& apid,
            U16 sequenceCount
        ) = 0;

        //! Handler for input port validateApidSeqCountIn
        virtual U16 validateApidSeqCountIn_handler(
            FwIndexType portNum, //!< The port number
            const ComCfg::APID& apid,
            U16 sequenceCount
        ) = 0;

      protected:

        // ----------------------------------------------------------------------
        // Port handler base-class functions for typed input ports
        //
        // Call these functions directly to bypass the corresponding ports
        // ----------------------------------------------------------------------

        //! Handler base-class function for input port getApidSeqCountIn
        U16 getApidSeqCountIn_handlerBase(
            FwIndexType portNum, //!< The port number
            const ComCfg::APID& apid,
            U16 sequenceCount
        );

        //! Handler base-class function for input port validateApidSeqCountIn
        U16 validateApidSeqCountIn_handlerBase(
            FwIndexType portNum, //!< The port number
            const ComCfg::APID& apid,
            U16 sequenceCount
        );

      protected:

        // ----------------------------------------------------------------------
        // Event logging functions
        // ----------------------------------------------------------------------

        //! Log event UnexpectedSequenceCount
        //!
        //! Deframing received an unexpected sequence count
        void log_WARNING_LO_UnexpectedSequenceCount(
            U16 transmitted,
            U16 expected
        ) const;

        //! Log event ApidTableFull
        //!
        //! Received an unregistered APID
        void log_WARNING_HI_ApidTableFull(U16 invalidApidValue) const;

      protected:

        // ----------------------------------------------------------------------
        // Time
        // ----------------------------------------------------------------------

        //! Get the time
        //!
        //! \\return The current time
        Fw::Time getTime() const;

      protected:

        // ----------------------------------------------------------------------
        // Mutex operations for guarded ports
        //
        // You can override these operations to provide more sophisticated
        // synchronization
        // ----------------------------------------------------------------------

        //! Lock the guarded mutex
        virtual void lock();

        //! Unlock the guarded mutex
        virtual void unLock();

      private:

        // ----------------------------------------------------------------------
        // Calls for messages received on typed input ports
        // ----------------------------------------------------------------------

        //! Callback for port getApidSeqCountIn
        static U16 m_p_getApidSeqCountIn_in(
            Fw::PassiveComponentBase* callComp, //!< The component instance
            FwIndexType portNum, //!< The port number
            const ComCfg::APID& apid,
            U16 sequenceCount
        );

        //! Callback for port validateApidSeqCountIn
        static U16 m_p_validateApidSeqCountIn_in(
            Fw::PassiveComponentBase* callComp, //!< The component instance
            FwIndexType portNum, //!< The port number
            const ComCfg::APID& apid,
            U16 sequenceCount
        );

      private:

        // ----------------------------------------------------------------------
        // Typed input ports
        // ----------------------------------------------------------------------

        //! Input port getApidSeqCountIn
        Svc::Ccsds::InputApidSequenceCountPort m_getApidSeqCountIn_InputPort[NUM_GETAPIDSEQCOUNTIN_INPUT_PORTS];

        //! Input port validateApidSeqCountIn
        Svc::Ccsds::InputApidSequenceCountPort m_validateApidSeqCountIn_InputPort[NUM_VALIDATEAPIDSEQCOUNTIN_INPUT_PORTS];

      private:

        // ----------------------------------------------------------------------
        // Special output ports
        // ----------------------------------------------------------------------

        //! Output port logOut
        Fw::OutputLogPort m_logOut_OutputPort[NUM_LOGOUT_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

        //! Output port logTextOut
        Fw::OutputLogTextPort m_logTextOut_OutputPort[NUM_LOGTEXTOUT_OUTPUT_PORTS];

#endif

        //! Output port timeCaller
        Fw::OutputTimePort m_timeCaller_OutputPort[NUM_TIMECALLER_OUTPUT_PORTS];

      private:

        // ----------------------------------------------------------------------
        // Mutexes
        // ----------------------------------------------------------------------

        //! Mutex for guarded ports
        Os::Mutex m_guardedPortMutex;

    };

  }

}

#endif
