// ======================================================================
// \title  ComQueueComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for ComQueue component base class
// ======================================================================

#ifndef Svc_ComQueueComponentAc_HPP
#define Svc_ComQueueComponentAc_HPP

#include <atomic>

#include "Fw/Buffer/BufferSendPortAc.hpp"
#include "Fw/Com/ComPortAc.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Log/LogString.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Ports/SuccessCondition/SuccessConditionPortAc.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Fw/Tlm/TlmPortAc.hpp"
#include "Fw/Tlm/TlmString.hpp"
#include "Svc/ComQueue/BuffQueueDepthArrayAc.hpp"
#include "Svc/ComQueue/ComQueueDepthArrayAc.hpp"
#include "Svc/ComQueue/QueueTypeEnumAc.hpp"
#include "Svc/Ports/CommsPorts/ComDataWithContextPortAc.hpp"
#include "Svc/Sched/SchedPortAc.hpp"

namespace Svc {

  //! \class ComQueueComponentBase
  //! \brief Auto-generated base for ComQueue component
  //!
  //! Component used to queue buffer types
  class ComQueueComponentBase :
    public Fw::ActiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class tester to support autocoded test harness
      friend class ComQueueTesterBase;
      //! Friend class tester implementation to support white-box testing
      friend class ComQueueTester;

    protected:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_BUFFERQUEUEIN_INPUT_PORTS = 1,
        NUM_COMPACKETQUEUEIN_INPUT_PORTS = 2,
        NUM_COMSTATUSIN_INPUT_PORTS = 1,
        NUM_DATARETURNIN_INPUT_PORTS = 1,
        NUM_RUN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of special output ports
      enum {
        NUM_LOG_OUTPUT_PORTS = 1,
        NUM_LOGTEXT_OUTPUT_PORTS = 1,
        NUM_TIME_OUTPUT_PORTS = 1,
        NUM_TLM_OUTPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed output ports
      enum {
        NUM_BUFFERRETURNOUT_OUTPUT_PORTS = 1,
        NUM_DATAOUT_OUTPUT_PORTS = 1,
      };

      //! Event IDs
      enum {
        EVENTID_QUEUEOVERFLOW = 0x0, //!< Queue overflow event
      };

      //! Channel IDs
      enum {
        CHANNELID_COMQUEUEDEPTH = 0x0, //!< Channel ID for comQueueDepth
        CHANNELID_BUFFQUEUEDEPTH = 0x1, //!< Channel ID for buffQueueDepth
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize ComQueueComponentBase object
      void init(
          FwSizeType queueDepth, //!< The queue depth
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return bufferQueueIn[portNum]
      Fw::InputBufferSendPort* get_bufferQueueIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return comPacketQueueIn[portNum]
      Fw::InputComPort* get_comPacketQueueIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return comStatusIn[portNum]
      Fw::InputSuccessConditionPort* get_comStatusIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return dataReturnIn[portNum]
      Svc::InputComDataWithContextPort* get_dataReturnIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return run[portNum]
      Svc::InputSchedPort* get_run_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to Log[portNum]
      void set_Log_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogPort* port //!< The input port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to LogText[portNum]
      void set_LogText_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogTextPort* port //!< The input port
      );

#endif

      //! Connect port to Time[portNum]
      void set_Time_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTimePort* port //!< The input port
      );

      //! Connect port to Tlm[portNum]
      void set_Tlm_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTlmPort* port //!< The input port
      );

    public:

      // ----------------------------------------------------------------------
      // Connect typed input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to bufferReturnOut[portNum]
      void set_bufferReturnOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputBufferSendPort* port //!< The input port
      );

      //! Connect port to dataOut[portNum]
      void set_dataOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Svc::InputComDataWithContextPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to Log[portNum]
      void set_Log_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to LogText[portNum]
      void set_LogText_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

      //! Connect port to Time[portNum]
      void set_Time_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to Tlm[portNum]
      void set_Tlm_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to bufferReturnOut[portNum]
      void set_bufferReturnOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to dataOut[portNum]
      void set_dataOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    protected:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct ComQueueComponentBase object
      ComQueueComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy ComQueueComponentBase object
      virtual ~ComQueueComponentBase();

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of bufferQueueIn input ports
      //!
      //! \return The number of bufferQueueIn input ports
      FwIndexType getNum_bufferQueueIn_InputPorts() const;

      //! Get the number of comPacketQueueIn input ports
      //!
      //! \return The number of comPacketQueueIn input ports
      FwIndexType getNum_comPacketQueueIn_InputPorts() const;

      //! Get the number of comStatusIn input ports
      //!
      //! \return The number of comStatusIn input ports
      FwIndexType getNum_comStatusIn_InputPorts() const;

      //! Get the number of dataReturnIn input ports
      //!
      //! \return The number of dataReturnIn input ports
      FwIndexType getNum_dataReturnIn_InputPorts() const;

      //! Get the number of run input ports
      //!
      //! \return The number of run input ports
      FwIndexType getNum_run_InputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of special output ports
      // ----------------------------------------------------------------------

      //! Get the number of Log output ports
      //!
      //! \return The number of Log output ports
      FwIndexType getNum_Log_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get the number of LogText output ports
      //!
      //! \return The number of LogText output ports
      FwIndexType getNum_LogText_OutputPorts() const;

#endif

      //! Get the number of Time output ports
      //!
      //! \return The number of Time output ports
      FwIndexType getNum_Time_OutputPorts() const;

      //! Get the number of Tlm output ports
      //!
      //! \return The number of Tlm output ports
      FwIndexType getNum_Tlm_OutputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed output ports
      // ----------------------------------------------------------------------

      //! Get the number of bufferReturnOut output ports
      //!
      //! \return The number of bufferReturnOut output ports
      FwIndexType getNum_bufferReturnOut_OutputPorts() const;

      //! Get the number of dataOut output ports
      //!
      //! \return The number of dataOut output ports
      FwIndexType getNum_dataOut_OutputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Connection status queries for special output ports
      // ----------------------------------------------------------------------

      //! Check whether port Log is connected
      //!
      //! \return Whether port Log is connected
      bool isConnected_Log_OutputPort(
          FwIndexType portNum //!< The port number
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Check whether port LogText is connected
      //!
      //! \return Whether port LogText is connected
      bool isConnected_LogText_OutputPort(
          FwIndexType portNum //!< The port number
      );

#endif

      //! Check whether port Time is connected
      //!
      //! \return Whether port Time is connected
      bool isConnected_Time_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port Tlm is connected
      //!
      //! \return Whether port Tlm is connected
      bool isConnected_Tlm_OutputPort(
          FwIndexType portNum //!< The port number
      );

    protected:

      // ----------------------------------------------------------------------
      // Connection status queries for typed output ports
      // ----------------------------------------------------------------------

      //! Check whether port bufferReturnOut is connected
      //!
      //! \return Whether port bufferReturnOut is connected
      bool isConnected_bufferReturnOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port dataOut is connected
      //!
      //! \return Whether port dataOut is connected
      bool isConnected_dataOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

    protected:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port bufferQueueIn
      virtual void bufferQueueIn_handler(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      ) = 0;

      //! Handler for input port comPacketQueueIn
      virtual void comPacketQueueIn_handler(
          FwIndexType portNum, //!< The port number
          Fw::ComBuffer& data, //!< Buffer containing packet data
          U32 context //!< Call context value; meaning chosen by user
      ) = 0;

      //! Handler for input port comStatusIn
      virtual void comStatusIn_handler(
          FwIndexType portNum, //!< The port number
          Fw::Success& condition //!< Condition success/failure
      ) = 0;

      //! Handler for input port dataReturnIn
      virtual void dataReturnIn_handler(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      ) = 0;

      //! Handler for input port run
      virtual void run_handler(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      ) = 0;

    protected:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port bufferQueueIn
      void bufferQueueIn_handlerBase(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

      //! Handler base-class function for input port comPacketQueueIn
      void comPacketQueueIn_handlerBase(
          FwIndexType portNum, //!< The port number
          Fw::ComBuffer& data, //!< Buffer containing packet data
          U32 context //!< Call context value; meaning chosen by user
      );

      //! Handler base-class function for input port comStatusIn
      void comStatusIn_handlerBase(
          FwIndexType portNum, //!< The port number
          Fw::Success& condition //!< Condition success/failure
      );

      //! Handler base-class function for input port dataReturnIn
      void dataReturnIn_handlerBase(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      );

      //! Handler base-class function for input port run
      void run_handlerBase(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    protected:

      // ----------------------------------------------------------------------
      // Pre-message hooks for typed async input ports
      //
      // Each of these functions is invoked just before processing a message
      // on the corresponding port. By default, they do nothing. You can
      // override them to provide specific pre-message behavior.
      // ----------------------------------------------------------------------

      //! Pre-message hook for async input port bufferQueueIn
      virtual void bufferQueueIn_preMsgHook(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

      //! Pre-message hook for async input port comPacketQueueIn
      virtual void comPacketQueueIn_preMsgHook(
          FwIndexType portNum, //!< The port number
          Fw::ComBuffer& data, //!< Buffer containing packet data
          U32 context //!< Call context value; meaning chosen by user
      );

      //! Pre-message hook for async input port comStatusIn
      virtual void comStatusIn_preMsgHook(
          FwIndexType portNum, //!< The port number
          Fw::Success& condition //!< Condition success/failure
      );

      //! Pre-message hook for async input port run
      virtual void run_preMsgHook(
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    protected:

      // ----------------------------------------------------------------------
      // Hooks for typed async input ports
      //
      // Each of these functions is invoked when placing a message on the
      // queue would cause the queue to overlow. You should override them to provide
      // specific overflow behavior.
      // ----------------------------------------------------------------------

      //! Overflow hook for async input port bufferQueueIn
      virtual void bufferQueueIn_overflowHook(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      ) = 0;

    protected:

      // ----------------------------------------------------------------------
      // Invocation functions for typed output ports
      // ----------------------------------------------------------------------

      //! Invoke output port bufferReturnOut
      void bufferReturnOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

      //! Invoke output port dataOut
      void dataOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      );

    protected:

      // ----------------------------------------------------------------------
      // Event logging functions
      // ----------------------------------------------------------------------

      //! Log event QueueOverflow
      //!
      //! Queue overflow event
      void log_WARNING_HI_QueueOverflow(
          Svc::QueueType queueType, //!< The Queue data type
          U32 index //!< index of overflowed queue
      ) const;

    protected:

      // ----------------------------------------------------------------------
      // Telemetry write functions
      // ----------------------------------------------------------------------

      //! Write telemetry channel comQueueDepth
      //!
      //! Depth of queues of Fw::ComBuffer type
      void tlmWrite_comQueueDepth(
          const Svc::ComQueueDepth& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

      //! Write telemetry channel buffQueueDepth
      //!
      //! Depth of queues of Fw::Buffer type
      void tlmWrite_buffQueueDepth(
          const Svc::BuffQueueDepth& arg, //!< The telemetry value
          Fw::Time _tlmTime = Fw::Time() //!< Timestamp. Default: unspecified, request from getTime port
      ) const;

    protected:

      // ----------------------------------------------------------------------
      // Time
      // ----------------------------------------------------------------------

      //! Get the time
      //!
      //! \\return The current time
      Fw::Time getTime() const;

    private:

      // ----------------------------------------------------------------------
      // Message dispatch functions
      // ----------------------------------------------------------------------

      //! Called in the message loop to dispatch a message from the queue
      virtual MsgDispatchStatus doDispatch();

    private:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port bufferQueueIn
      static void m_p_bufferQueueIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

      //! Callback for port comPacketQueueIn
      static void m_p_comPacketQueueIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::ComBuffer& data, //!< Buffer containing packet data
          U32 context //!< Call context value; meaning chosen by user
      );

      //! Callback for port comStatusIn
      static void m_p_comStatusIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::Success& condition //!< Condition success/failure
      );

      //! Callback for port dataReturnIn
      static void m_p_dataReturnIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      );

      //! Callback for port run
      static void m_p_run_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          U32 context //!< The call order
      );

    private:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port bufferQueueIn
      Fw::InputBufferSendPort m_bufferQueueIn_InputPort[NUM_BUFFERQUEUEIN_INPUT_PORTS];

      //! Input port comPacketQueueIn
      Fw::InputComPort m_comPacketQueueIn_InputPort[NUM_COMPACKETQUEUEIN_INPUT_PORTS];

      //! Input port comStatusIn
      Fw::InputSuccessConditionPort m_comStatusIn_InputPort[NUM_COMSTATUSIN_INPUT_PORTS];

      //! Input port dataReturnIn
      Svc::InputComDataWithContextPort m_dataReturnIn_InputPort[NUM_DATARETURNIN_INPUT_PORTS];

      //! Input port run
      Svc::InputSchedPort m_run_InputPort[NUM_RUN_INPUT_PORTS];

    private:

      // ----------------------------------------------------------------------
      // Special output ports
      // ----------------------------------------------------------------------

      //! Output port Log
      Fw::OutputLogPort m_Log_OutputPort[NUM_LOG_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Output port LogText
      Fw::OutputLogTextPort m_LogText_OutputPort[NUM_LOGTEXT_OUTPUT_PORTS];

#endif

      //! Output port Time
      Fw::OutputTimePort m_Time_OutputPort[NUM_TIME_OUTPUT_PORTS];

      //! Output port Tlm
      Fw::OutputTlmPort m_Tlm_OutputPort[NUM_TLM_OUTPUT_PORTS];

    private:

      // ----------------------------------------------------------------------
      // Typed output ports
      // ----------------------------------------------------------------------

      //! Output port bufferReturnOut
      Fw::OutputBufferSendPort m_bufferReturnOut_OutputPort[NUM_BUFFERRETURNOUT_OUTPUT_PORTS];

      //! Output port dataOut
      Svc::OutputComDataWithContextPort m_dataOut_OutputPort[NUM_DATAOUT_OUTPUT_PORTS];

  };

}

#endif
