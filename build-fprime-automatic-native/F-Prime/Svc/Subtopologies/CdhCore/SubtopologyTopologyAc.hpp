// ======================================================================
// \title  SubtopologyTopologyAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Subtopology topology
// ======================================================================

#ifndef CdhCore_SubtopologyTopologyAc_HPP
#define CdhCore_SubtopologyTopologyAc_HPP

#include "Svc/AssertFatalAdapter/AssertFatalAdapter.hpp"
#include "Svc/CmdDispatcher/CommandDispatcher.hpp"
#include "Svc/EventManager/EventManager.hpp"
#include "Svc/FatalHandler/FatalHandler.hpp"
#include "Svc/Health/Health.hpp"
#include "Svc/PassiveConsoleTextLogger/PassiveTextLogger.hpp"
#include "Svc/Subtopologies/CdhCore/SubtopologyTopologyDefs.hpp"
#include "Svc/TlmChan/TlmChan.hpp"
#include "Svc/Version/Version.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace CdhCore {

  //! cmdDisp
  extern Svc::CommandDispatcher cmdDisp;

}

namespace CdhCore {

  //! events
  extern Svc::EventManager events;

}

namespace CdhCore {

  //! fatalAdapter
  extern Svc::AssertFatalAdapter fatalAdapter;

}

namespace CdhCore {

  //! fatalHandler
  extern Svc::FatalHandler fatalHandler;

}

namespace CdhCore {

  //! health
  extern Svc::Health health;

}

namespace CdhCore {

  //! textLogger
  extern Svc::PassiveTextLogger textLogger;

}

namespace CdhCore {

  //! tlmSend
  extern Svc::TlmChan tlmSend;

}

namespace CdhCore {

  //! version
  extern Svc::Version version;

}

namespace CdhCore {

  // ----------------------------------------------------------------------
  // Constants
  // ----------------------------------------------------------------------

  namespace ConfigConstants {
    namespace CdhCore_health {
      enum {
          HEALTH_WATCHDOG_CODE = 0x123
      };
    }
  }

  namespace BaseIds {
    enum {
      CdhCore_cmdDisp = 0x1000000,
      CdhCore_events = 0x1001000,
      CdhCore_health = 0x1002000,
      CdhCore_version = 0x1003000,
      CdhCore_textLogger = 0x1004000,
      CdhCore_fatalAdapter = 0x1005000,
      CdhCore_tlmSend = 0x1006000,
      CdhCore_fatalHandler = 0x1007000,
    };
  }

  namespace InstanceIds {
    enum {
      CdhCore_cmdDisp,
      CdhCore_events,
      CdhCore_fatalAdapter,
      CdhCore_fatalHandler,
      CdhCore_health,
      CdhCore_textLogger,
      CdhCore_tlmSend,
      CdhCore_version,
    };
  }

  namespace Priorities {
    enum {
      CdhCore_cmdDisp = 102,
      CdhCore_events = 100,
      CdhCore_tlmSend = 99,
    };
  }

  namespace QueueSizes {
    enum {
      CdhCore_cmdDisp = 10,
      CdhCore_events = 10,
      CdhCore_health = 25,
      CdhCore_tlmSend = 10,
    };
  }

  namespace StackSizes {
    enum {
      CdhCore_cmdDisp = 65536,
      CdhCore_events = 65536,
      CdhCore_tlmSend = 65536,
    };
  }

  namespace TaskIds {
    enum {
      CdhCore_cmdDisp,
      CdhCore_events,
      CdhCore_tlmSend,
    };
  }

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  //! Initialize components
  void initComponents(
      const TopologyState& state //!< The topology state
  );

  //! Configure components
  void configComponents(
      const TopologyState& state //!< The topology state
  );

  //! Set component base Ids
  void setBaseIds();

  //! Connect components
  void connectComponents();

  //! Register commands
  void regCommands();

  //! Read parameters
  void readParameters();

  //! Load parameters
  void loadParameters();

  //! Start tasks
  void startTasks(
      const TopologyState& state //!< The topology state
  );

  //! Stop tasks
  void stopTasks(
      const TopologyState& state //!< The topology state
  );

  //! Free threads
  void freeThreads(
      const TopologyState& state //!< The topology state
  );

  //! Tear down components
  void tearDownComponents(
      const TopologyState& state //!< The topology state
  );

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  //! Set up the topology
  void setup(
      const TopologyState& state //!< The topology state
  );

  //! Tear down the topology
  void teardown(
      const TopologyState& state //!< The topology state
  );

}

#endif
