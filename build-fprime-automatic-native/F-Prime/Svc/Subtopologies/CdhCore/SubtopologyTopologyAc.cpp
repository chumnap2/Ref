// ======================================================================
// \title  SubtopologyTopologyAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Subtopology topology
// ======================================================================

#include "Svc/Subtopologies/CdhCore/SubtopologyTopologyAc.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace CdhCore {

  Svc::CommandDispatcher cmdDisp(FW_OPTIONAL_NAME("cmdDisp"));

}

namespace CdhCore {

  Svc::EventManager events(FW_OPTIONAL_NAME("events"));

}

namespace CdhCore {

  Svc::AssertFatalAdapter fatalAdapter(FW_OPTIONAL_NAME("fatalAdapter"));

}

namespace CdhCore {

  Svc::FatalHandler fatalHandler(FW_OPTIONAL_NAME("fatalHandler"));

}

namespace CdhCore {

  Svc::Health health(FW_OPTIONAL_NAME("health"));

}

namespace CdhCore {

  Svc::PassiveTextLogger textLogger(FW_OPTIONAL_NAME("textLogger"));

}

namespace CdhCore {

  Svc::TlmChan tlmSend(FW_OPTIONAL_NAME("tlmSend"));

}

namespace CdhCore {

  Svc::Version version(FW_OPTIONAL_NAME("version"));

}

namespace CdhCore {

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  void initComponents(const TopologyState& state) {
    CdhCore::cmdDisp.init(QueueSizes::CdhCore_cmdDisp, InstanceIds::CdhCore_cmdDisp);
    CdhCore::events.init(QueueSizes::CdhCore_events, InstanceIds::CdhCore_events);
    CdhCore::fatalAdapter.init(InstanceIds::CdhCore_fatalAdapter);
    CdhCore::fatalHandler.init(InstanceIds::CdhCore_fatalHandler);
    CdhCore::health.init(QueueSizes::CdhCore_health, InstanceIds::CdhCore_health);
    CdhCore::textLogger.init(InstanceIds::CdhCore_textLogger);
    CdhCore::tlmSend.init(QueueSizes::CdhCore_tlmSend, InstanceIds::CdhCore_tlmSend);
    CdhCore::version.init(InstanceIds::CdhCore_version);
  }

  void configComponents(const TopologyState& state) {
    // Health is supplied a set of ping entires.
    CdhCore::health.setPingEntries(
        ConfigObjects::CdhCore_health::pingEntries,
        FW_NUM_ARRAY_ELEMENTS(ConfigObjects::CdhCore_health::pingEntries),
        ConfigConstants::CdhCore_health::HEALTH_WATCHDOG_CODE
    );
    // Startup TLM and Config verbosity for Versions
    CdhCore::version.config(true);
  }

  void setBaseIds() {
    CdhCore::cmdDisp.setIdBase(BaseIds::CdhCore_cmdDisp);
    CdhCore::events.setIdBase(BaseIds::CdhCore_events);
    CdhCore::health.setIdBase(BaseIds::CdhCore_health);
    CdhCore::version.setIdBase(BaseIds::CdhCore_version);
    CdhCore::textLogger.setIdBase(BaseIds::CdhCore_textLogger);
    CdhCore::fatalAdapter.setIdBase(BaseIds::CdhCore_fatalAdapter);
    CdhCore::tlmSend.setIdBase(BaseIds::CdhCore_tlmSend);
    CdhCore::fatalHandler.setIdBase(BaseIds::CdhCore_fatalHandler);
  }

  void connectComponents() {

    // FaultProtection
    CdhCore::events.set_FatalAnnounce_OutputPort(
        0,
        CdhCore::fatalHandler.get_FatalReceive_InputPort(0)
    );
  }

  void regCommands() {
    CdhCore::cmdDisp.regCommands();
    CdhCore::events.regCommands();
    CdhCore::health.regCommands();
    CdhCore::version.regCommands();
  }

  void readParameters() {
    // Nothing to do
  }

  void loadParameters() {
    // Nothing to do
  }

  void startTasks(const TopologyState& state) {
    CdhCore::cmdDisp.start(
      static_cast<FwTaskPriorityType>(Priorities::CdhCore_cmdDisp),
      static_cast<Os::Task::ParamType>(StackSizes::CdhCore_cmdDisp),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::CdhCore_cmdDisp)
    );
    CdhCore::events.start(
      static_cast<FwTaskPriorityType>(Priorities::CdhCore_events),
      static_cast<Os::Task::ParamType>(StackSizes::CdhCore_events),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::CdhCore_events)
    );
    CdhCore::tlmSend.start(
      static_cast<FwTaskPriorityType>(Priorities::CdhCore_tlmSend),
      static_cast<Os::Task::ParamType>(StackSizes::CdhCore_tlmSend),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::CdhCore_tlmSend)
    );
  }

  void stopTasks(const TopologyState& state) {
    CdhCore::cmdDisp.exit();
    CdhCore::events.exit();
    CdhCore::tlmSend.exit();
  }

  void freeThreads(const TopologyState& state) {
    (void) CdhCore::cmdDisp.ActiveComponentBase::join();
    (void) CdhCore::events.ActiveComponentBase::join();
    (void) CdhCore::tlmSend.ActiveComponentBase::join();
  }

  void tearDownComponents(const TopologyState& state) {
    // Nothing to do
  }

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  void setup(const TopologyState& state) {
    initComponents(state);
    configComponents(state);
    setBaseIds();
    connectComponents();
    regCommands();
    readParameters();
    loadParameters();
    startTasks(state);
  }

  void teardown(const TopologyState& state) {
    stopTasks(state);
    freeThreads(state);
    tearDownComponents(state);
  }

}
