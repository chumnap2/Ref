// ======================================================================
// \title  SubtopologyTopologyAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Subtopology topology
// ======================================================================

#include "Svc/Subtopologies/DataProducts/SubtopologyTopologyAc.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace DataProducts {

  Svc::BufferManager dpBufferManager(FW_OPTIONAL_NAME("dpBufferManager"));

}

namespace DataProducts {

  Svc::DpCatalog dpCat(FW_OPTIONAL_NAME("dpCat"));

}

namespace DataProducts {

  Svc::DpManager dpMgr(FW_OPTIONAL_NAME("dpMgr"));

}

namespace DataProducts {

  Svc::DpWriter dpWriter(FW_OPTIONAL_NAME("dpWriter"));

}

namespace DataProducts {

  // ----------------------------------------------------------------------
  // Component configuration objects
  // ----------------------------------------------------------------------

  namespace ConfigObjects {

    namespace DataProducts_dpBufferManager {
      Svc::BufferManager::BufferBins bins;
    }

  }

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  void initComponents(const TopologyState& state) {
    DataProducts::dpBufferManager.init(InstanceIds::DataProducts_dpBufferManager);
    DataProducts::dpCat.init(QueueSizes::DataProducts_dpCat, InstanceIds::DataProducts_dpCat);
    DataProducts::dpMgr.init(QueueSizes::DataProducts_dpMgr, InstanceIds::DataProducts_dpMgr);
    DataProducts::dpWriter.init(QueueSizes::DataProducts_dpWriter, InstanceIds::DataProducts_dpWriter);
  }

  void configComponents(const TopologyState& state) {
    memset(&ConfigObjects::DataProducts_dpBufferManager::bins, 0, sizeof(ConfigObjects::DataProducts_dpBufferManager::bins));
    ConfigObjects::DataProducts_dpBufferManager::bins.bins[0].bufferSize = DataProductsConfig::BuffMgr::dpBufferStoreSize;
    ConfigObjects::DataProducts_dpBufferManager::bins.bins[0].numBuffers = DataProductsConfig::BuffMgr::dpBufferStoreCount;
    DataProducts::dpBufferManager.setup(
        DataProductsConfig::BuffMgr::dpBufferManagerId,
        0,
        DataProducts::Allocation::memAllocator,
        ConfigObjects::DataProducts_dpBufferManager::bins
    );
    Fw::FileNameString dpDir(DataProductsConfig::Paths::dpDir);
    Fw::FileNameString dpState(DataProductsConfig::Paths::dpState);
    Os::FileSystem::createDirectory(dpDir.toChar());
    DataProducts::dpCat.configure(&dpDir,1,dpState,0, DataProducts::Allocation::memAllocator);
    DataProducts::dpWriter.configure(dpDir);
  }

  void setBaseIds() {
    DataProducts::dpCat.setIdBase(BaseIds::DataProducts_dpCat);
    DataProducts::dpMgr.setIdBase(BaseIds::DataProducts_dpMgr);
    DataProducts::dpWriter.setIdBase(BaseIds::DataProducts_dpWriter);
    DataProducts::dpBufferManager.setIdBase(BaseIds::DataProducts_dpBufferManager);
  }

  void connectComponents() {

    // DataProducts
    DataProducts::dpMgr.set_bufferGetOut_OutputPort(
        0,
        DataProducts::dpBufferManager.get_bufferGetCallee_InputPort(0)
    );
    DataProducts::dpMgr.set_productSendOut_OutputPort(
        0,
        DataProducts::dpWriter.get_bufferSendIn_InputPort(0)
    );
    DataProducts::dpWriter.set_deallocBufferSendOut_OutputPort(
        0,
        DataProducts::dpBufferManager.get_bufferSendIn_InputPort(0)
    );
  }

  void regCommands() {
    DataProducts::dpCat.regCommands();
    DataProducts::dpMgr.regCommands();
    DataProducts::dpWriter.regCommands();
  }

  void readParameters() {
    // Nothing to do
  }

  void loadParameters() {
    // Nothing to do
  }

  void startTasks(const TopologyState& state) {
    DataProducts::dpCat.start(
      static_cast<FwTaskPriorityType>(Priorities::DataProducts_dpCat),
      static_cast<Os::Task::ParamType>(StackSizes::DataProducts_dpCat),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::DataProducts_dpCat)
    );
    DataProducts::dpMgr.start(
      static_cast<FwTaskPriorityType>(Priorities::DataProducts_dpMgr),
      static_cast<Os::Task::ParamType>(StackSizes::DataProducts_dpMgr),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::DataProducts_dpMgr)
    );
    DataProducts::dpWriter.start(
      static_cast<FwTaskPriorityType>(Priorities::DataProducts_dpWriter),
      static_cast<Os::Task::ParamType>(StackSizes::DataProducts_dpWriter),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::DataProducts_dpWriter)
    );
  }

  void stopTasks(const TopologyState& state) {
    DataProducts::dpCat.exit();
    DataProducts::dpMgr.exit();
    DataProducts::dpWriter.exit();
  }

  void freeThreads(const TopologyState& state) {
    (void) DataProducts::dpCat.ActiveComponentBase::join();
    (void) DataProducts::dpMgr.ActiveComponentBase::join();
    (void) DataProducts::dpWriter.ActiveComponentBase::join();
  }

  void tearDownComponents(const TopologyState& state) {
    DataProducts::dpCat.shutdown();
    DataProducts::dpBufferManager.cleanup();
  }

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  void setup(const TopologyState& state) {
    initComponents(state);
    configComponents(state);
    setBaseIds();
    connectComponents();
    regCommands();
    readParameters();
    loadParameters();
    startTasks(state);
  }

  void teardown(const TopologyState& state) {
    stopTasks(state);
    freeThreads(state);
    tearDownComponents(state);
  }

}
