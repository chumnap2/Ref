// ======================================================================
// \title  SubtopologyTopologyAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Subtopology topology
// ======================================================================

#ifndef DataProducts_SubtopologyTopologyAc_HPP
#define DataProducts_SubtopologyTopologyAc_HPP

#include "Svc/BufferManager/BufferManager.hpp"
#include "Svc/DpCatalog/DpCatalog.hpp"
#include "Svc/DpManager/DpManager.hpp"
#include "Svc/DpWriter/DpWriter.hpp"
#include "Svc/Subtopologies/DataProducts/SubtopologyTopologyDefs.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace DataProducts {

  //! dpBufferManager
  extern Svc::BufferManager dpBufferManager;

}

namespace DataProducts {

  //! dpCat
  extern Svc::DpCatalog dpCat;

}

namespace DataProducts {

  //! dpMgr
  extern Svc::DpManager dpMgr;

}

namespace DataProducts {

  //! dpWriter
  extern Svc::DpWriter dpWriter;

}

namespace DataProducts {

  // ----------------------------------------------------------------------
  // Constants
  // ----------------------------------------------------------------------

  namespace BaseIds {
    enum {
      DataProducts_dpCat = 0x4000000,
      DataProducts_dpMgr = 0x4001000,
      DataProducts_dpWriter = 0x4002000,
      DataProducts_dpBufferManager = 0x4003000,
    };
  }

  namespace InstanceIds {
    enum {
      DataProducts_dpBufferManager,
      DataProducts_dpCat,
      DataProducts_dpMgr,
      DataProducts_dpWriter,
    };
  }

  namespace Priorities {
    enum {
      DataProducts_dpCat = 101,
      DataProducts_dpMgr = 100,
      DataProducts_dpWriter = 99,
    };
  }

  namespace QueueSizes {
    enum {
      DataProducts_dpCat = 10,
      DataProducts_dpMgr = 10,
      DataProducts_dpWriter = 10,
    };
  }

  namespace StackSizes {
    enum {
      DataProducts_dpCat = 65536,
      DataProducts_dpMgr = 65536,
      DataProducts_dpWriter = 65536,
    };
  }

  namespace TaskIds {
    enum {
      DataProducts_dpCat,
      DataProducts_dpMgr,
      DataProducts_dpWriter,
    };
  }

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  //! Initialize components
  void initComponents(
      const TopologyState& state //!< The topology state
  );

  //! Configure components
  void configComponents(
      const TopologyState& state //!< The topology state
  );

  //! Set component base Ids
  void setBaseIds();

  //! Connect components
  void connectComponents();

  //! Register commands
  void regCommands();

  //! Read parameters
  void readParameters();

  //! Load parameters
  void loadParameters();

  //! Start tasks
  void startTasks(
      const TopologyState& state //!< The topology state
  );

  //! Stop tasks
  void stopTasks(
      const TopologyState& state //!< The topology state
  );

  //! Free threads
  void freeThreads(
      const TopologyState& state //!< The topology state
  );

  //! Tear down components
  void tearDownComponents(
      const TopologyState& state //!< The topology state
  );

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  //! Set up the topology
  void setup(
      const TopologyState& state //!< The topology state
  );

  //! Tear down the topology
  void teardown(
      const TopologyState& state //!< The topology state
  );

}

#endif
