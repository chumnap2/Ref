// ======================================================================
// \title  SubtopologyTopologyAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Subtopology topology
// ======================================================================

#ifndef FileHandling_SubtopologyTopologyAc_HPP
#define FileHandling_SubtopologyTopologyAc_HPP

#include "Svc/FileDownlink/FileDownlink.hpp"
#include "Svc/FileManager/FileManager.hpp"
#include "Svc/FileUplink/FileUplink.hpp"
#include "Svc/PrmDb/PrmDb.hpp"
#include "Svc/Subtopologies/FileHandling/SubtopologyTopologyDefs.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace FileHandling {

  //! fileDownlink
  extern Svc::FileDownlink fileDownlink;

}

namespace FileHandling {

  //! fileManager
  extern Svc::FileManager fileManager;

}

namespace FileHandling {

  //! fileUplink
  extern Svc::FileUplink fileUplink;

}

namespace FileHandling {

  //! prmDb
  extern Svc::PrmDb prmDb;

}

namespace FileHandling {

  // ----------------------------------------------------------------------
  // Constants
  // ----------------------------------------------------------------------

  namespace BaseIds {
    enum {
      FileHandling_fileUplink = 0x5000000,
      FileHandling_fileDownlink = 0x5001000,
      FileHandling_fileManager = 0x5002000,
      FileHandling_prmDb = 0x5003000,
    };
  }

  namespace InstanceIds {
    enum {
      FileHandling_fileDownlink,
      FileHandling_fileManager,
      FileHandling_fileUplink,
      FileHandling_prmDb,
    };
  }

  namespace Priorities {
    enum {
      FileHandling_fileDownlink = 100,
      FileHandling_fileManager = 99,
      FileHandling_fileUplink = 101,
      FileHandling_prmDb = 98,
    };
  }

  namespace QueueSizes {
    enum {
      FileHandling_fileDownlink = 10,
      FileHandling_fileManager = 10,
      FileHandling_fileUplink = 10,
      FileHandling_prmDb = 10,
    };
  }

  namespace StackSizes {
    enum {
      FileHandling_fileDownlink = 65536,
      FileHandling_fileManager = 65536,
      FileHandling_fileUplink = 65536,
      FileHandling_prmDb = 65536,
    };
  }

  namespace TaskIds {
    enum {
      FileHandling_fileDownlink,
      FileHandling_fileManager,
      FileHandling_fileUplink,
      FileHandling_prmDb,
    };
  }

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  //! Initialize components
  void initComponents(
      const TopologyState& state //!< The topology state
  );

  //! Configure components
  void configComponents(
      const TopologyState& state //!< The topology state
  );

  //! Set component base Ids
  void setBaseIds();

  //! Connect components
  void connectComponents();

  //! Register commands
  void regCommands();

  //! Read parameters
  void readParameters();

  //! Load parameters
  void loadParameters();

  //! Start tasks
  void startTasks(
      const TopologyState& state //!< The topology state
  );

  //! Stop tasks
  void stopTasks(
      const TopologyState& state //!< The topology state
  );

  //! Free threads
  void freeThreads(
      const TopologyState& state //!< The topology state
  );

  //! Tear down components
  void tearDownComponents(
      const TopologyState& state //!< The topology state
  );

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  //! Set up the topology
  void setup(
      const TopologyState& state //!< The topology state
  );

  //! Tear down the topology
  void teardown(
      const TopologyState& state //!< The topology state
  );

}

#endif
