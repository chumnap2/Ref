// ======================================================================
// \title  SubtopologyTopologyAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Subtopology topology
// ======================================================================

#include "Svc/Subtopologies/FileHandling/SubtopologyTopologyAc.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace FileHandling {

  Svc::FileDownlink fileDownlink(FW_OPTIONAL_NAME("fileDownlink"));

}

namespace FileHandling {

  Svc::FileManager fileManager(FW_OPTIONAL_NAME("fileManager"));

}

namespace FileHandling {

  Svc::FileUplink fileUplink(FW_OPTIONAL_NAME("fileUplink"));

}

namespace FileHandling {

  Svc::PrmDb prmDb(FW_OPTIONAL_NAME("prmDb"));

}

namespace FileHandling {

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  void initComponents(const TopologyState& state) {
    FileHandling::fileDownlink.init(QueueSizes::FileHandling_fileDownlink, InstanceIds::FileHandling_fileDownlink);
    FileHandling::fileManager.init(QueueSizes::FileHandling_fileManager, InstanceIds::FileHandling_fileManager);
    FileHandling::fileUplink.init(QueueSizes::FileHandling_fileUplink, InstanceIds::FileHandling_fileUplink);
    FileHandling::prmDb.init(QueueSizes::FileHandling_prmDb, InstanceIds::FileHandling_prmDb);
  }

  void configComponents(const TopologyState& state) {
    FileHandling::fileDownlink.configure(
        FileHandlingConfig::DownlinkConfig::timeout,
        FileHandlingConfig::DownlinkConfig::cooldown,
        FileHandlingConfig::DownlinkConfig::cycleTime,
        FileHandlingConfig::DownlinkConfig::fileQueueDepth
    );
    FileHandling::prmDb.configure("PrmDb.dat");
  }

  void setBaseIds() {
    FileHandling::fileUplink.setIdBase(BaseIds::FileHandling_fileUplink);
    FileHandling::fileDownlink.setIdBase(BaseIds::FileHandling_fileDownlink);
    FileHandling::fileManager.setIdBase(BaseIds::FileHandling_fileManager);
    FileHandling::prmDb.setIdBase(BaseIds::FileHandling_prmDb);
  }

  void connectComponents() {
    // Nothing to do
  }

  void regCommands() {
    FileHandling::fileDownlink.regCommands();
    FileHandling::fileManager.regCommands();
    FileHandling::prmDb.regCommands();
  }

  void readParameters() {
    FileHandling::prmDb.readParamFile();
  }

  void loadParameters() {
    // Nothing to do
  }

  void startTasks(const TopologyState& state) {
    FileHandling::fileDownlink.start(
      static_cast<FwTaskPriorityType>(Priorities::FileHandling_fileDownlink),
      static_cast<Os::Task::ParamType>(StackSizes::FileHandling_fileDownlink),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::FileHandling_fileDownlink)
    );
    FileHandling::fileManager.start(
      static_cast<FwTaskPriorityType>(Priorities::FileHandling_fileManager),
      static_cast<Os::Task::ParamType>(StackSizes::FileHandling_fileManager),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::FileHandling_fileManager)
    );
    FileHandling::fileUplink.start(
      static_cast<FwTaskPriorityType>(Priorities::FileHandling_fileUplink),
      static_cast<Os::Task::ParamType>(StackSizes::FileHandling_fileUplink),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::FileHandling_fileUplink)
    );
    FileHandling::prmDb.start(
      static_cast<FwTaskPriorityType>(Priorities::FileHandling_prmDb),
      static_cast<Os::Task::ParamType>(StackSizes::FileHandling_prmDb),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::FileHandling_prmDb)
    );
  }

  void stopTasks(const TopologyState& state) {
    FileHandling::fileDownlink.exit();
    FileHandling::fileManager.exit();
    FileHandling::fileUplink.exit();
    FileHandling::prmDb.exit();
  }

  void freeThreads(const TopologyState& state) {
    (void) FileHandling::fileDownlink.ActiveComponentBase::join();
    (void) FileHandling::fileManager.ActiveComponentBase::join();
    (void) FileHandling::fileUplink.ActiveComponentBase::join();
    (void) FileHandling::prmDb.ActiveComponentBase::join();
  }

  void tearDownComponents(const TopologyState& state) {
    // Nothing to do
  }

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  void setup(const TopologyState& state) {
    initComponents(state);
    configComponents(state);
    setBaseIds();
    connectComponents();
    regCommands();
    readParameters();
    loadParameters();
    startTasks(state);
  }

  void teardown(const TopologyState& state) {
    stopTasks(state);
    freeThreads(state);
    tearDownComponents(state);
  }

}
