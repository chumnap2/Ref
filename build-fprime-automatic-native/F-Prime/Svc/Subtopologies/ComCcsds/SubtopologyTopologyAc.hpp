// ======================================================================
// \title  SubtopologyTopologyAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for Subtopology topology
// ======================================================================

#ifndef ComCcsds_SubtopologyTopologyAc_HPP
#define ComCcsds_SubtopologyTopologyAc_HPP

#include "Svc/BufferManager/BufferManager.hpp"
#include "Svc/Ccsds/ApidManager/ApidManager.hpp"
#include "Svc/Ccsds/SpacePacketDeframer/SpacePacketDeframer.hpp"
#include "Svc/Ccsds/SpacePacketFramer/SpacePacketFramer.hpp"
#include "Svc/Ccsds/TcDeframer/TcDeframer.hpp"
#include "Svc/Ccsds/TmFramer/TmFramer.hpp"
#include "Svc/ComQueue/ComQueue.hpp"
#include "Svc/ComStub/ComStub.hpp"
#include "Svc/FprimeRouter/FprimeRouter.hpp"
#include "Svc/FrameAccumulator/FrameAccumulator.hpp"
#include "Svc/Subtopologies/ComCcsds/SubtopologyTopologyDefs.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace ComCcsds {

  //! apidManager
  extern Svc::Ccsds::ApidManager apidManager;

}

namespace ComCcsds {

  //! comQueue
  extern Svc::ComQueue comQueue;

}

namespace ComCcsds {

  //! comStub
  extern Svc::ComStub comStub;

}

namespace ComCcsds {

  //! commsBufferManager
  extern Svc::BufferManager commsBufferManager;

}

namespace ComCcsds {

  //! fprimeRouter
  extern Svc::FprimeRouter fprimeRouter;

}

namespace ComCcsds {

  //! frameAccumulator
  extern Svc::FrameAccumulator frameAccumulator;

}

namespace ComCcsds {

  //! spacePacketDeframer
  extern Svc::Ccsds::SpacePacketDeframer spacePacketDeframer;

}

namespace ComCcsds {

  //! spacePacketFramer
  extern Svc::Ccsds::SpacePacketFramer spacePacketFramer;

}

namespace ComCcsds {

  //! tcDeframer
  extern Svc::Ccsds::TcDeframer tcDeframer;

}

namespace ComCcsds {

  //! tmFramer
  extern Svc::Ccsds::TmFramer tmFramer;

}

namespace ComCcsds {

  // ----------------------------------------------------------------------
  // Constants
  // ----------------------------------------------------------------------

  namespace BaseIds {
    enum {
      ComCcsds_comQueue = 0x2000000,
      ComCcsds_frameAccumulator = 0x2001000,
      ComCcsds_commsBufferManager = 0x2002000,
      ComCcsds_fprimeRouter = 0x2003000,
      ComCcsds_comStub = 0x2004000,
      ComCcsds_tcDeframer = 0x2005000,
      ComCcsds_spacePacketDeframer = 0x2006000,
      ComCcsds_tmFramer = 0x2007000,
      ComCcsds_spacePacketFramer = 0x2008000,
      ComCcsds_apidManager = 0x2009000,
    };
  }

  namespace InstanceIds {
    enum {
      ComCcsds_apidManager,
      ComCcsds_comQueue,
      ComCcsds_comStub,
      ComCcsds_commsBufferManager,
      ComCcsds_fprimeRouter,
      ComCcsds_frameAccumulator,
      ComCcsds_spacePacketDeframer,
      ComCcsds_spacePacketFramer,
      ComCcsds_tcDeframer,
      ComCcsds_tmFramer,
    };
  }

  namespace Priorities {
    enum {
      ComCcsds_comQueue = 101,
    };
  }

  namespace QueueSizes {
    enum {
      ComCcsds_comQueue = 50,
    };
  }

  namespace StackSizes {
    enum {
      ComCcsds_comQueue = 65536,
    };
  }

  namespace TaskIds {
    enum {
      ComCcsds_comQueue,
    };
  }

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  //! Initialize components
  void initComponents(
      const TopologyState& state //!< The topology state
  );

  //! Configure components
  void configComponents(
      const TopologyState& state //!< The topology state
  );

  //! Set component base Ids
  void setBaseIds();

  //! Connect components
  void connectComponents();

  //! Register commands
  void regCommands();

  //! Read parameters
  void readParameters();

  //! Load parameters
  void loadParameters();

  //! Start tasks
  void startTasks(
      const TopologyState& state //!< The topology state
  );

  //! Stop tasks
  void stopTasks(
      const TopologyState& state //!< The topology state
  );

  //! Free threads
  void freeThreads(
      const TopologyState& state //!< The topology state
  );

  //! Tear down components
  void tearDownComponents(
      const TopologyState& state //!< The topology state
  );

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  //! Set up the topology
  void setup(
      const TopologyState& state //!< The topology state
  );

  //! Tear down the topology
  void teardown(
      const TopologyState& state //!< The topology state
  );

}

#endif
