// ======================================================================
// \title  SubtopologyTopologyAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for Subtopology topology
// ======================================================================

#include "Svc/Subtopologies/ComCcsds/SubtopologyTopologyAc.hpp"

// ----------------------------------------------------------------------
// Component instances
// ----------------------------------------------------------------------

namespace ComCcsds {

  Svc::Ccsds::ApidManager apidManager(FW_OPTIONAL_NAME("apidManager"));

}

namespace ComCcsds {

  Svc::ComQueue comQueue(FW_OPTIONAL_NAME("comQueue"));

}

namespace ComCcsds {

  Svc::ComStub comStub(FW_OPTIONAL_NAME("comStub"));

}

namespace ComCcsds {

  Svc::BufferManager commsBufferManager(FW_OPTIONAL_NAME("commsBufferManager"));

}

namespace ComCcsds {

  Svc::FprimeRouter fprimeRouter(FW_OPTIONAL_NAME("fprimeRouter"));

}

namespace ComCcsds {

  Svc::FrameAccumulator frameAccumulator(FW_OPTIONAL_NAME("frameAccumulator"));

}

namespace ComCcsds {

  Svc::Ccsds::SpacePacketDeframer spacePacketDeframer(FW_OPTIONAL_NAME("spacePacketDeframer"));

}

namespace ComCcsds {

  Svc::Ccsds::SpacePacketFramer spacePacketFramer(FW_OPTIONAL_NAME("spacePacketFramer"));

}

namespace ComCcsds {

  Svc::Ccsds::TcDeframer tcDeframer(FW_OPTIONAL_NAME("tcDeframer"));

}

namespace ComCcsds {

  Svc::Ccsds::TmFramer tmFramer(FW_OPTIONAL_NAME("tmFramer"));

}

namespace ComCcsds {

  // ----------------------------------------------------------------------
  // Component configuration objects
  // ----------------------------------------------------------------------

  namespace ConfigObjects {

    namespace ComCcsds_commsBufferManager {
      Svc::BufferManager::BufferBins bins;
    }

    namespace ComCcsds_frameAccumulator {
      Svc::FrameDetectors::CcsdsTcFrameDetector frameDetector;
    }

  }

  // ----------------------------------------------------------------------
  // Helper functions
  // ----------------------------------------------------------------------

  void initComponents(const TopologyState& state) {
    ComCcsds::apidManager.init(InstanceIds::ComCcsds_apidManager);
    ComCcsds::comQueue.init(QueueSizes::ComCcsds_comQueue, InstanceIds::ComCcsds_comQueue);
    ComCcsds::comStub.init(InstanceIds::ComCcsds_comStub);
    ComCcsds::commsBufferManager.init(InstanceIds::ComCcsds_commsBufferManager);
    ComCcsds::fprimeRouter.init(InstanceIds::ComCcsds_fprimeRouter);
    ComCcsds::frameAccumulator.init(InstanceIds::ComCcsds_frameAccumulator);
    ComCcsds::spacePacketDeframer.init(InstanceIds::ComCcsds_spacePacketDeframer);
    ComCcsds::spacePacketFramer.init(InstanceIds::ComCcsds_spacePacketFramer);
    ComCcsds::tcDeframer.init(InstanceIds::ComCcsds_tcDeframer);
    ComCcsds::tmFramer.init(InstanceIds::ComCcsds_tmFramer);
  }

  void configComponents(const TopologyState& state) {
    using namespace ComCcsds;
    Svc::ComQueue::QueueConfigurationTable configurationTable;

    // Events (highest-priority)
    configurationTable.entries[Ports_ComPacketQueue::EVENTS].depth = ComCcsdsConfig::QueueDepths::events;
    configurationTable.entries[Ports_ComPacketQueue::EVENTS].priority = ComCcsdsConfig::QueuePriorities::events;

    // Telemetry
    configurationTable.entries[Ports_ComPacketQueue::TELEMETRY].depth = ComCcsdsConfig::QueueDepths::tlm;
    configurationTable.entries[Ports_ComPacketQueue::TELEMETRY].priority = ComCcsdsConfig::QueuePriorities::tlm;

    // File Downlink Queue (buffer queue using NUM_CONSTANTS offset)
    configurationTable.entries[Ports_ComPacketQueue::NUM_CONSTANTS + Ports_ComBufferQueue::FILE].depth = ComCcsdsConfig::QueueDepths::file;
    configurationTable.entries[Ports_ComPacketQueue::NUM_CONSTANTS + Ports_ComBufferQueue::FILE].priority = ComCcsdsConfig::QueuePriorities::file;

    // Allocation identifier is 0 as the MallocAllocator discards it
    ComCcsds::comQueue.configure(configurationTable, 0, ComCcsds::Allocation::memAllocator);
    memset(&ConfigObjects::ComCcsds_commsBufferManager::bins, 0, sizeof(ConfigObjects::ComCcsds_commsBufferManager::bins));
    ConfigObjects::ComCcsds_commsBufferManager::bins.bins[0].bufferSize = ComCcsdsConfig::BuffMgr::commsBuffSize;
    ConfigObjects::ComCcsds_commsBufferManager::bins.bins[0].numBuffers = ComCcsdsConfig::BuffMgr::commsBuffCount;
    ConfigObjects::ComCcsds_commsBufferManager::bins.bins[1].bufferSize = ComCcsdsConfig::BuffMgr::commsFileBuffSize;
    ConfigObjects::ComCcsds_commsBufferManager::bins.bins[1].numBuffers = ComCcsdsConfig::BuffMgr::commsFileBuffCount;
    ComCcsds::commsBufferManager.setup(
        ComCcsdsConfig::BuffMgr::commsBuffMgrId,
        0,
        ComCcsds::Allocation::memAllocator,
        ConfigObjects::ComCcsds_commsBufferManager::bins
    );
    ComCcsds::frameAccumulator.configure(
        ConfigObjects::ComCcsds_frameAccumulator::frameDetector,
        1,
        ComCcsds::Allocation::memAllocator,
        ComCcsdsConfig::BuffMgr::frameAccumulatorSize
    );
  }

  void setBaseIds() {
    ComCcsds::comQueue.setIdBase(BaseIds::ComCcsds_comQueue);
    ComCcsds::frameAccumulator.setIdBase(BaseIds::ComCcsds_frameAccumulator);
    ComCcsds::commsBufferManager.setIdBase(BaseIds::ComCcsds_commsBufferManager);
    ComCcsds::fprimeRouter.setIdBase(BaseIds::ComCcsds_fprimeRouter);
    ComCcsds::comStub.setIdBase(BaseIds::ComCcsds_comStub);
    ComCcsds::tcDeframer.setIdBase(BaseIds::ComCcsds_tcDeframer);
    ComCcsds::spacePacketDeframer.setIdBase(BaseIds::ComCcsds_spacePacketDeframer);
    ComCcsds::tmFramer.setIdBase(BaseIds::ComCcsds_tmFramer);
    ComCcsds::spacePacketFramer.setIdBase(BaseIds::ComCcsds_spacePacketFramer);
    ComCcsds::apidManager.setIdBase(BaseIds::ComCcsds_apidManager);
  }

  void connectComponents() {

    // Downlink
    ComCcsds::comQueue.set_dataOut_OutputPort(
        0,
        ComCcsds::spacePacketFramer.get_dataIn_InputPort(0)
    );
    ComCcsds::comStub.set_comStatusOut_OutputPort(
        0,
        ComCcsds::tmFramer.get_comStatusIn_InputPort(0)
    );
    ComCcsds::comStub.set_dataReturnOut_OutputPort(
        0,
        ComCcsds::tmFramer.get_dataReturnIn_InputPort(0)
    );
    ComCcsds::spacePacketFramer.set_bufferAllocate_OutputPort(
        0,
        ComCcsds::commsBufferManager.get_bufferGetCallee_InputPort(0)
    );
    ComCcsds::spacePacketFramer.set_bufferDeallocate_OutputPort(
        0,
        ComCcsds::commsBufferManager.get_bufferSendIn_InputPort(0)
    );
    ComCcsds::spacePacketFramer.set_comStatusOut_OutputPort(
        0,
        ComCcsds::comQueue.get_comStatusIn_InputPort(0)
    );
    ComCcsds::spacePacketFramer.set_dataOut_OutputPort(
        0,
        ComCcsds::tmFramer.get_dataIn_InputPort(0)
    );
    ComCcsds::spacePacketFramer.set_dataReturnOut_OutputPort(
        0,
        ComCcsds::comQueue.get_dataReturnIn_InputPort(0)
    );
    ComCcsds::spacePacketFramer.set_getApidSeqCount_OutputPort(
        0,
        ComCcsds::apidManager.get_getApidSeqCountIn_InputPort(0)
    );
    ComCcsds::tmFramer.set_comStatusOut_OutputPort(
        0,
        ComCcsds::spacePacketFramer.get_comStatusIn_InputPort(0)
    );
    ComCcsds::tmFramer.set_dataOut_OutputPort(
        0,
        ComCcsds::comStub.get_dataIn_InputPort(0)
    );
    ComCcsds::tmFramer.set_dataReturnOut_OutputPort(
        0,
        ComCcsds::spacePacketFramer.get_dataReturnIn_InputPort(0)
    );

    // Uplink
    ComCcsds::comStub.set_dataOut_OutputPort(
        0,
        ComCcsds::frameAccumulator.get_dataIn_InputPort(0)
    );
    ComCcsds::fprimeRouter.set_bufferAllocate_OutputPort(
        0,
        ComCcsds::commsBufferManager.get_bufferGetCallee_InputPort(0)
    );
    ComCcsds::fprimeRouter.set_bufferDeallocate_OutputPort(
        0,
        ComCcsds::commsBufferManager.get_bufferSendIn_InputPort(0)
    );
    ComCcsds::fprimeRouter.set_dataReturnOut_OutputPort(
        0,
        ComCcsds::spacePacketDeframer.get_dataReturnIn_InputPort(0)
    );
    ComCcsds::frameAccumulator.set_bufferAllocate_OutputPort(
        0,
        ComCcsds::commsBufferManager.get_bufferGetCallee_InputPort(0)
    );
    ComCcsds::frameAccumulator.set_bufferDeallocate_OutputPort(
        0,
        ComCcsds::commsBufferManager.get_bufferSendIn_InputPort(0)
    );
    ComCcsds::frameAccumulator.set_dataOut_OutputPort(
        0,
        ComCcsds::tcDeframer.get_dataIn_InputPort(0)
    );
    ComCcsds::frameAccumulator.set_dataReturnOut_OutputPort(
        0,
        ComCcsds::comStub.get_dataReturnIn_InputPort(0)
    );
    ComCcsds::spacePacketDeframer.set_dataOut_OutputPort(
        0,
        ComCcsds::fprimeRouter.get_dataIn_InputPort(0)
    );
    ComCcsds::spacePacketDeframer.set_dataReturnOut_OutputPort(
        0,
        ComCcsds::tcDeframer.get_dataReturnIn_InputPort(0)
    );
    ComCcsds::spacePacketDeframer.set_validateApidSeqCount_OutputPort(
        0,
        ComCcsds::apidManager.get_validateApidSeqCountIn_InputPort(0)
    );
    ComCcsds::tcDeframer.set_dataOut_OutputPort(
        0,
        ComCcsds::spacePacketDeframer.get_dataIn_InputPort(0)
    );
    ComCcsds::tcDeframer.set_dataReturnOut_OutputPort(
        0,
        ComCcsds::frameAccumulator.get_dataReturnIn_InputPort(0)
    );
  }

  void regCommands() {
    // Nothing to do
  }

  void readParameters() {
    // Nothing to do
  }

  void loadParameters() {
    // Nothing to do
  }

  void startTasks(const TopologyState& state) {
    ComCcsds::comQueue.start(
      static_cast<FwTaskPriorityType>(Priorities::ComCcsds_comQueue),
      static_cast<Os::Task::ParamType>(StackSizes::ComCcsds_comQueue),
      Os::Task::TASK_DEFAULT, // Default CPU
      static_cast<Os::Task::ParamType>(TaskIds::ComCcsds_comQueue)
    );
  }

  void stopTasks(const TopologyState& state) {
    ComCcsds::comQueue.exit();
  }

  void freeThreads(const TopologyState& state) {
    (void) ComCcsds::comQueue.ActiveComponentBase::join();
  }

  void tearDownComponents(const TopologyState& state) {
    ComCcsds::comQueue.cleanup();
    ComCcsds::commsBufferManager.cleanup();
    ComCcsds::frameAccumulator.cleanup();
  }

  // ----------------------------------------------------------------------
  // Setup and teardown functions
  // ----------------------------------------------------------------------

  void setup(const TopologyState& state) {
    initComponents(state);
    configComponents(state);
    setBaseIds();
    connectComponents();
    regCommands();
    readParameters();
    loadParameters();
    startTasks(state);
  }

  void teardown(const TopologyState& state) {
    stopTasks(state);
    freeThreads(state);
    tearDownComponents(state);
  }

}
