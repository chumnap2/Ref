// ======================================================================
// \title  FrameHeaderSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for FrameHeader struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Svc/FprimeProtocol/FrameHeaderSerializableAc.hpp"

namespace Svc {

  namespace FprimeProtocol {

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    FrameHeader ::
      FrameHeader() :
        Serializable(),
        m_startWord(3735928559),
        m_lengthField(0)
    {

    }

    FrameHeader ::
      FrameHeader(
          Svc::FprimeProtocol::TokenType startWord,
          Svc::FprimeProtocol::TokenType lengthField
      ) :
        Serializable(),
        m_startWord(startWord),
        m_lengthField(lengthField)
    {

    }

    FrameHeader ::
      FrameHeader(const FrameHeader& obj) :
        Serializable(),
        m_startWord(obj.m_startWord),
        m_lengthField(obj.m_lengthField)
    {

    }

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    FrameHeader& FrameHeader ::
      operator=(const FrameHeader& obj)
    {
      if (this == &obj) {
        return *this;
      }

      set(obj.m_startWord, obj.m_lengthField);
      return *this;
    }

    bool FrameHeader ::
      operator==(const FrameHeader& obj) const
    {
      if (this == &obj) { return true; }
      return (
        (this->m_startWord == obj.m_startWord) &&
        (this->m_lengthField == obj.m_lengthField)
      );
    }

    bool FrameHeader ::
      operator!=(const FrameHeader& obj) const
    {
      return !(*this == obj);
    }

#ifdef BUILD_UT

    std::ostream& operator<<(std::ostream& os, const FrameHeader& obj) {
      Fw::String s;
      obj.toString(s);
      os << s.toChar();
      return os;
    }

#endif

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    Fw::SerializeStatus FrameHeader ::
      serializeTo(Fw::SerializeBufferBase& buffer) const
    {
      Fw::SerializeStatus status;

      status = buffer.serializeFrom(this->m_startWord);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
      status = buffer.serializeFrom(this->m_lengthField);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }

      return status;
    }

    Fw::SerializeStatus FrameHeader ::
      deserializeFrom(Fw::SerializeBufferBase& buffer)
    {
      Fw::SerializeStatus status;

      status = buffer.deserializeTo(this->m_startWord);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }
      status = buffer.deserializeTo(this->m_lengthField);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }

      return status;
    }

    FwSizeType FrameHeader ::
      serializedSize() const
    {
      FwSizeType size = 0;
      size += sizeof(Svc::FprimeProtocol::TokenType);
      size += sizeof(Svc::FprimeProtocol::TokenType);
      return size;
    }

#if FW_SERIALIZABLE_TO_STRING

    void FrameHeader ::
      toString(Fw::StringBase& sb) const
    {
      Fw::String tmp;
      sb = "( ";

      // Format startWord
      sb += "startWord = ";
      tmp.format("%" PRIu32 "", this->m_startWord);
      sb += tmp;
      sb += ", ";

      // Format lengthField
      sb += "lengthField = ";
      tmp.format("%" PRIu32 "", this->m_lengthField);
      sb += tmp;
      sb += " )";
    }

#endif

    // ----------------------------------------------------------------------
    // Setter functions
    // ----------------------------------------------------------------------

    void FrameHeader ::
      set(
          Svc::FprimeProtocol::TokenType startWord,
          Svc::FprimeProtocol::TokenType lengthField
      )
    {
      this->m_startWord = startWord;
      this->m_lengthField = lengthField;
    }

    void FrameHeader ::
      set_startWord(Svc::FprimeProtocol::TokenType startWord)
    {
      this->m_startWord = startWord;
    }

    void FrameHeader ::
      set_lengthField(Svc::FprimeProtocol::TokenType lengthField)
    {
      this->m_lengthField = lengthField;
    }

  }

}
