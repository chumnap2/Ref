// ======================================================================
// \title  FrameHeaderSerializableAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for FrameHeader struct
// ======================================================================

#ifndef Svc_FprimeProtocol_FrameHeaderSerializableAc_HPP
#define Svc_FprimeProtocol_FrameHeaderSerializableAc_HPP

#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"
#include "Svc/FprimeProtocol/TokenTypeAliasAc.hpp"

namespace Svc {

  namespace FprimeProtocol {

    //! Describes the frame header format for the F Prime communications protocol
    class FrameHeader :
      public Fw::Serializable
    {

      public:

        // ----------------------------------------------------------------------
        // Constants
        // ----------------------------------------------------------------------

        enum {
          //! The size of the serial representation
          SERIALIZED_SIZE =
            sizeof(Svc::FprimeProtocol::TokenType) +
            sizeof(Svc::FprimeProtocol::TokenType)
        };

      public:

        // ----------------------------------------------------------------------
        // Constructors
        // ----------------------------------------------------------------------

        //! Constructor (default value)
        FrameHeader();

        //! Member constructor
        FrameHeader(
            Svc::FprimeProtocol::TokenType startWord,
            Svc::FprimeProtocol::TokenType lengthField
        );

        //! Copy constructor
        FrameHeader(
            const FrameHeader& obj //!< The source object
        );

      public:

        // ----------------------------------------------------------------------
        // Operators
        // ----------------------------------------------------------------------

        //! Copy assignment operator
        FrameHeader& operator=(
            const FrameHeader& obj //!< The source object
        );

        //! Equality operator
        bool operator==(
            const FrameHeader& obj //!< The other object
        ) const;

        //! Inequality operator
        bool operator!=(
            const FrameHeader& obj //!< The other object
        ) const;

#ifdef BUILD_UT

        //! Ostream operator
        friend std::ostream& operator<<(
            std::ostream& os, //!< The ostream
            const FrameHeader& obj //!< The object
        );

#endif

      public:

        // ----------------------------------------------------------------------
        // Member functions
        // ----------------------------------------------------------------------

        //! Serialization
        Fw::SerializeStatus serializeTo(
            Fw::SerializeBufferBase& buffer //!< The serial buffer
        ) const;

        //! Deserialization
        Fw::SerializeStatus deserializeFrom(
            Fw::SerializeBufferBase& buffer //!< The serial buffer
        );

        //! Get the dynamic serialized size of the struct
        FwSizeType serializedSize() const;

#if FW_SERIALIZABLE_TO_STRING

        //! Convert struct to string
        void toString(
            Fw::StringBase& sb //!< The StringBase object to hold the result
        ) const;

#endif

        // ----------------------------------------------------------------------
        // Getter functions
        // ----------------------------------------------------------------------

        //! Get member startWord
        Svc::FprimeProtocol::TokenType get_startWord() const
        {
          return this->m_startWord;
        }

        //! Get member lengthField
        Svc::FprimeProtocol::TokenType get_lengthField() const
        {
          return this->m_lengthField;
        }

        // ----------------------------------------------------------------------
        // Setter functions
        // ----------------------------------------------------------------------

        //! Set all members
        void set(
            Svc::FprimeProtocol::TokenType startWord,
            Svc::FprimeProtocol::TokenType lengthField
        );

        //! Set member startWord
        void set_startWord(Svc::FprimeProtocol::TokenType startWord);

        //! Set member lengthField
        void set_lengthField(Svc::FprimeProtocol::TokenType lengthField);

      protected:

        // ----------------------------------------------------------------------
        // Member variables
        // ----------------------------------------------------------------------

        Svc::FprimeProtocol::TokenType m_startWord;
        Svc::FprimeProtocol::TokenType m_lengthField;

    };

  }

}

#endif
