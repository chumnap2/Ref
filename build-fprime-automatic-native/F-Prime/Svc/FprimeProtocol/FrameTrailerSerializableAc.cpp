// ======================================================================
// \title  FrameTrailerSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for FrameTrailer struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Svc/FprimeProtocol/FrameTrailerSerializableAc.hpp"

namespace Svc {

  namespace FprimeProtocol {

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    FrameTrailer ::
      FrameTrailer() :
        Serializable(),
        m_crcField(0)
    {

    }

    FrameTrailer ::
      FrameTrailer(U32 crcField) :
        Serializable(),
        m_crcField(crcField)
    {

    }

    FrameTrailer ::
      FrameTrailer(const FrameTrailer& obj) :
        Serializable(),
        m_crcField(obj.m_crcField)
    {

    }

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    FrameTrailer& FrameTrailer ::
      operator=(const FrameTrailer& obj)
    {
      if (this == &obj) {
        return *this;
      }

      set(obj.m_crcField);
      return *this;
    }

    bool FrameTrailer ::
      operator==(const FrameTrailer& obj) const
    {
      return (this->m_crcField == obj.m_crcField);
    }

    bool FrameTrailer ::
      operator!=(const FrameTrailer& obj) const
    {
      return !(*this == obj);
    }

#ifdef BUILD_UT

    std::ostream& operator<<(std::ostream& os, const FrameTrailer& obj) {
      Fw::String s;
      obj.toString(s);
      os << s.toChar();
      return os;
    }

#endif

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    Fw::SerializeStatus FrameTrailer ::
      serializeTo(Fw::SerializeBufferBase& buffer) const
    {
      Fw::SerializeStatus status;

      status = buffer.serializeFrom(this->m_crcField);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }

      return status;
    }

    Fw::SerializeStatus FrameTrailer ::
      deserializeFrom(Fw::SerializeBufferBase& buffer)
    {
      Fw::SerializeStatus status;

      status = buffer.deserializeTo(this->m_crcField);
      if (status != Fw::FW_SERIALIZE_OK) {
        return status;
      }

      return status;
    }

    FwSizeType FrameTrailer ::
      serializedSize() const
    {
      FwSizeType size = 0;
      size += sizeof(U32);
      return size;
    }

#if FW_SERIALIZABLE_TO_STRING

    void FrameTrailer ::
      toString(Fw::StringBase& sb) const
    {
      Fw::String tmp;
      sb = "( ";

      // Format crcField
      sb += "crcField = ";
      tmp.format("%" PRIu32 "", this->m_crcField);
      sb += tmp;
      sb += " )";
    }

#endif

    // ----------------------------------------------------------------------
    // Setter functions
    // ----------------------------------------------------------------------

    void FrameTrailer ::
      set(U32 crcField)
    {
      this->m_crcField = crcField;
    }

    void FrameTrailer ::
      set_crcField(U32 crcField)
    {
      this->m_crcField = crcField;
    }

  }

}
