// ======================================================================
// \title  FprimeRouterComponentAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for FprimeRouter component base class
// ======================================================================

#ifndef Svc_FprimeRouterComponentAc_HPP
#define Svc_FprimeRouterComponentAc_HPP

#include <atomic>

#include "Fw/Buffer/BufferGetPortAc.hpp"
#include "Fw/Buffer/BufferSendPortAc.hpp"
#include "Fw/Cmd/CmdResponsePortAc.hpp"
#include "Fw/Com/ComPortAc.hpp"
#include "Fw/Comp/ActiveComponentBase.hpp"
#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Log/LogPortAc.hpp"
#include "Fw/Log/LogString.hpp"
#if FW_ENABLE_TEXT_LOGGING == 1
#include "Fw/Log/LogTextPortAc.hpp"
#endif
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Port/OutputSerializePort.hpp"
#include "Fw/Time/TimePortAc.hpp"
#include "Svc/Ports/CommsPorts/ComDataWithContextPortAc.hpp"

namespace Svc {

  //! \class FprimeRouterComponentBase
  //! \brief Auto-generated base for FprimeRouter component
  //!
  //! Routes packets deframed by the Deframer to the rest of the system
  class FprimeRouterComponentBase :
    public Fw::PassiveComponentBase
  {

      // ----------------------------------------------------------------------
      // Friend classes
      // ----------------------------------------------------------------------

      //! Friend class tester to support autocoded test harness
      friend class FprimeRouterTesterBase;
      //! Friend class tester implementation to support white-box testing
      friend class FprimeRouterTester;

    protected:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      //! Enumerations for numbers of typed input ports
      enum {
        NUM_CMDRESPONSEIN_INPUT_PORTS = 1,
        NUM_DATAIN_INPUT_PORTS = 1,
        NUM_FILEBUFFERRETURNIN_INPUT_PORTS = 1,
      };

      //! Enumerations for numbers of special output ports
      enum {
        NUM_LOGOUT_OUTPUT_PORTS = 1,
        NUM_LOGTEXTOUT_OUTPUT_PORTS = 1,
        NUM_TIMECALLER_OUTPUT_PORTS = 1,
      };

      //! Enumerations for numbers of typed output ports
      enum {
        NUM_BUFFERALLOCATE_OUTPUT_PORTS = 1,
        NUM_BUFFERDEALLOCATE_OUTPUT_PORTS = 1,
        NUM_COMMANDOUT_OUTPUT_PORTS = 1,
        NUM_DATARETURNOUT_OUTPUT_PORTS = 1,
        NUM_FILEOUT_OUTPUT_PORTS = 1,
        NUM_UNKNOWNDATAOUT_OUTPUT_PORTS = 1,
      };

      //! Event IDs
      enum {
        EVENTID_SERIALIZATIONERROR = 0x0, //!< An error occurred while serializing a com buffer
        EVENTID_DESERIALIZATIONERROR = 0x1, //!< An error occurred while deserializing a packet
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize FprimeRouterComponentBase object
      void init(
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for typed input ports
      // ----------------------------------------------------------------------

      //! Get typed input port at index
      //!
      //! \return cmdResponseIn[portNum]
      Fw::InputCmdResponsePort* get_cmdResponseIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return dataIn[portNum]
      Svc::InputComDataWithContextPort* get_dataIn_InputPort(
          FwIndexType portNum //!< The port number
      );

      //! Get typed input port at index
      //!
      //! \return fileBufferReturnIn[portNum]
      Fw::InputBufferSendPort* get_fileBufferReturnIn_InputPort(
          FwIndexType portNum //!< The port number
      );

    public:

      // ----------------------------------------------------------------------
      // Connect input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to logOut[portNum]
      void set_logOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogPort* port //!< The input port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to logTextOut[portNum]
      void set_logTextOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputLogTextPort* port //!< The input port
      );

#endif

      //! Connect port to timeCaller[portNum]
      void set_timeCaller_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputTimePort* port //!< The input port
      );

    public:

      // ----------------------------------------------------------------------
      // Connect typed input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to bufferAllocate[portNum]
      void set_bufferAllocate_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputBufferGetPort* port //!< The input port
      );

      //! Connect port to bufferDeallocate[portNum]
      void set_bufferDeallocate_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputBufferSendPort* port //!< The input port
      );

      //! Connect port to commandOut[portNum]
      void set_commandOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputComPort* port //!< The input port
      );

      //! Connect port to dataReturnOut[portNum]
      void set_dataReturnOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Svc::InputComDataWithContextPort* port //!< The input port
      );

      //! Connect port to fileOut[portNum]
      void set_fileOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputBufferSendPort* port //!< The input port
      );

      //! Connect port to unknownDataOut[portNum]
      void set_unknownDataOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Svc::InputComDataWithContextPort* port //!< The input port
      );

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to special output ports
      // ----------------------------------------------------------------------

      //! Connect port to logOut[portNum]
      void set_logOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Connect port to logTextOut[portNum]
      void set_logTextOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

      //! Connect port to timeCaller[portNum]
      void set_timeCaller_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

#if FW_PORT_SERIALIZATION

    public:

      // ----------------------------------------------------------------------
      // Connect serial input ports to typed output ports
      // ----------------------------------------------------------------------

      //! Connect port to bufferDeallocate[portNum]
      void set_bufferDeallocate_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to commandOut[portNum]
      void set_commandOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to dataReturnOut[portNum]
      void set_dataReturnOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to fileOut[portNum]
      void set_fileOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

      //! Connect port to unknownDataOut[portNum]
      void set_unknownDataOut_OutputPort(
          FwIndexType portNum, //!< The port number
          Fw::InputSerializePort* port //!< The port
      );

#endif

    protected:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct FprimeRouterComponentBase object
      FprimeRouterComponentBase(
          const char* compName = "" //!< The component name
      );

      //! Destroy FprimeRouterComponentBase object
      virtual ~FprimeRouterComponentBase();

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed input ports
      // ----------------------------------------------------------------------

      //! Get the number of cmdResponseIn input ports
      //!
      //! \return The number of cmdResponseIn input ports
      FwIndexType getNum_cmdResponseIn_InputPorts() const;

      //! Get the number of dataIn input ports
      //!
      //! \return The number of dataIn input ports
      FwIndexType getNum_dataIn_InputPorts() const;

      //! Get the number of fileBufferReturnIn input ports
      //!
      //! \return The number of fileBufferReturnIn input ports
      FwIndexType getNum_fileBufferReturnIn_InputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of special output ports
      // ----------------------------------------------------------------------

      //! Get the number of logOut output ports
      //!
      //! \return The number of logOut output ports
      FwIndexType getNum_logOut_OutputPorts() const;

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get the number of logTextOut output ports
      //!
      //! \return The number of logTextOut output ports
      FwIndexType getNum_logTextOut_OutputPorts() const;

#endif

      //! Get the number of timeCaller output ports
      //!
      //! \return The number of timeCaller output ports
      FwIndexType getNum_timeCaller_OutputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Getters for numbers of typed output ports
      // ----------------------------------------------------------------------

      //! Get the number of bufferAllocate output ports
      //!
      //! \return The number of bufferAllocate output ports
      FwIndexType getNum_bufferAllocate_OutputPorts() const;

      //! Get the number of bufferDeallocate output ports
      //!
      //! \return The number of bufferDeallocate output ports
      FwIndexType getNum_bufferDeallocate_OutputPorts() const;

      //! Get the number of commandOut output ports
      //!
      //! \return The number of commandOut output ports
      FwIndexType getNum_commandOut_OutputPorts() const;

      //! Get the number of dataReturnOut output ports
      //!
      //! \return The number of dataReturnOut output ports
      FwIndexType getNum_dataReturnOut_OutputPorts() const;

      //! Get the number of fileOut output ports
      //!
      //! \return The number of fileOut output ports
      FwIndexType getNum_fileOut_OutputPorts() const;

      //! Get the number of unknownDataOut output ports
      //!
      //! \return The number of unknownDataOut output ports
      FwIndexType getNum_unknownDataOut_OutputPorts() const;

    protected:

      // ----------------------------------------------------------------------
      // Connection status queries for special output ports
      // ----------------------------------------------------------------------

      //! Check whether port logOut is connected
      //!
      //! \return Whether port logOut is connected
      bool isConnected_logOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Check whether port logTextOut is connected
      //!
      //! \return Whether port logTextOut is connected
      bool isConnected_logTextOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

#endif

      //! Check whether port timeCaller is connected
      //!
      //! \return Whether port timeCaller is connected
      bool isConnected_timeCaller_OutputPort(
          FwIndexType portNum //!< The port number
      );

    protected:

      // ----------------------------------------------------------------------
      // Connection status queries for typed output ports
      // ----------------------------------------------------------------------

      //! Check whether port bufferAllocate is connected
      //!
      //! \return Whether port bufferAllocate is connected
      bool isConnected_bufferAllocate_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port bufferDeallocate is connected
      //!
      //! \return Whether port bufferDeallocate is connected
      bool isConnected_bufferDeallocate_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port commandOut is connected
      //!
      //! \return Whether port commandOut is connected
      bool isConnected_commandOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port dataReturnOut is connected
      //!
      //! \return Whether port dataReturnOut is connected
      bool isConnected_dataReturnOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port fileOut is connected
      //!
      //! \return Whether port fileOut is connected
      bool isConnected_fileOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port unknownDataOut is connected
      //!
      //! \return Whether port unknownDataOut is connected
      bool isConnected_unknownDataOut_OutputPort(
          FwIndexType portNum //!< The port number
      );

    protected:

      // ----------------------------------------------------------------------
      // Handlers to implement for typed input ports
      // ----------------------------------------------------------------------

      //! Handler for input port cmdResponseIn
      virtual void cmdResponseIn_handler(
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          const Fw::CmdResponse& response //!< The command response argument
      ) = 0;

      //! Handler for input port dataIn
      virtual void dataIn_handler(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      ) = 0;

      //! Handler for input port fileBufferReturnIn
      virtual void fileBufferReturnIn_handler(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      ) = 0;

    protected:

      // ----------------------------------------------------------------------
      // Port handler base-class functions for typed input ports
      //
      // Call these functions directly to bypass the corresponding ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for input port cmdResponseIn
      void cmdResponseIn_handlerBase(
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          const Fw::CmdResponse& response //!< The command response argument
      );

      //! Handler base-class function for input port dataIn
      void dataIn_handlerBase(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      );

      //! Handler base-class function for input port fileBufferReturnIn
      void fileBufferReturnIn_handlerBase(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

    protected:

      // ----------------------------------------------------------------------
      // Invocation functions for typed output ports
      // ----------------------------------------------------------------------

      //! Invoke output port bufferAllocate
      Fw::Buffer bufferAllocate_out(
          FwIndexType portNum, //!< The port number
          FwSizeType size //!< The requested size
      );

      //! Invoke output port bufferDeallocate
      void bufferDeallocate_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

      //! Invoke output port commandOut
      void commandOut_out(
          FwIndexType portNum, //!< The port number
          Fw::ComBuffer& data, //!< Buffer containing packet data
          U32 context //!< Call context value; meaning chosen by user
      );

      //! Invoke output port dataReturnOut
      void dataReturnOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      );

      //! Invoke output port fileOut
      void fileOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

      //! Invoke output port unknownDataOut
      void unknownDataOut_out(
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      );

    protected:

      // ----------------------------------------------------------------------
      // Event logging functions
      // ----------------------------------------------------------------------

      //! Log event SerializationError
      //!
      //! An error occurred while serializing a com buffer
      void log_WARNING_HI_SerializationError(
          U32 status //!< The status of the operation
      ) const;

      //! Log event DeserializationError
      //!
      //! An error occurred while deserializing a packet
      void log_WARNING_HI_DeserializationError(
          U32 status //!< The status of the operation
      ) const;

    protected:

      // ----------------------------------------------------------------------
      // Time
      // ----------------------------------------------------------------------

      //! Get the time
      //!
      //! \\return The current time
      Fw::Time getTime() const;

    private:

      // ----------------------------------------------------------------------
      // Calls for messages received on typed input ports
      // ----------------------------------------------------------------------

      //! Callback for port cmdResponseIn
      static void m_p_cmdResponseIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          const Fw::CmdResponse& response //!< The command response argument
      );

      //! Callback for port dataIn
      static void m_p_dataIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::Buffer& data,
          const ComCfg::FrameContext& context
      );

      //! Callback for port fileBufferReturnIn
      static void m_p_fileBufferReturnIn_in(
          Fw::PassiveComponentBase* callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::Buffer& fwBuffer //!< The buffer
      );

    private:

      // ----------------------------------------------------------------------
      // Typed input ports
      // ----------------------------------------------------------------------

      //! Input port cmdResponseIn
      Fw::InputCmdResponsePort m_cmdResponseIn_InputPort[NUM_CMDRESPONSEIN_INPUT_PORTS];

      //! Input port dataIn
      Svc::InputComDataWithContextPort m_dataIn_InputPort[NUM_DATAIN_INPUT_PORTS];

      //! Input port fileBufferReturnIn
      Fw::InputBufferSendPort m_fileBufferReturnIn_InputPort[NUM_FILEBUFFERRETURNIN_INPUT_PORTS];

    private:

      // ----------------------------------------------------------------------
      // Special output ports
      // ----------------------------------------------------------------------

      //! Output port logOut
      Fw::OutputLogPort m_logOut_OutputPort[NUM_LOGOUT_OUTPUT_PORTS];

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Output port logTextOut
      Fw::OutputLogTextPort m_logTextOut_OutputPort[NUM_LOGTEXTOUT_OUTPUT_PORTS];

#endif

      //! Output port timeCaller
      Fw::OutputTimePort m_timeCaller_OutputPort[NUM_TIMECALLER_OUTPUT_PORTS];

    private:

      // ----------------------------------------------------------------------
      // Typed output ports
      // ----------------------------------------------------------------------

      //! Output port bufferAllocate
      Fw::OutputBufferGetPort m_bufferAllocate_OutputPort[NUM_BUFFERALLOCATE_OUTPUT_PORTS];

      //! Output port bufferDeallocate
      Fw::OutputBufferSendPort m_bufferDeallocate_OutputPort[NUM_BUFFERDEALLOCATE_OUTPUT_PORTS];

      //! Output port commandOut
      Fw::OutputComPort m_commandOut_OutputPort[NUM_COMMANDOUT_OUTPUT_PORTS];

      //! Output port dataReturnOut
      Svc::OutputComDataWithContextPort m_dataReturnOut_OutputPort[NUM_DATARETURNOUT_OUTPUT_PORTS];

      //! Output port fileOut
      Fw::OutputBufferSendPort m_fileOut_OutputPort[NUM_FILEOUT_OUTPUT_PORTS];

      //! Output port unknownDataOut
      Svc::OutputComDataWithContextPort m_unknownDataOut_OutputPort[NUM_UNKNOWNDATAOUT_OUTPUT_PORTS];

  };

}

#endif
