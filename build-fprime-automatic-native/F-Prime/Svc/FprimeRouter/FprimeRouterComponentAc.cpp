// ======================================================================
// \title  FprimeRouterComponentAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for FprimeRouter component base class
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"
#if FW_ENABLE_TEXT_LOGGING
#include "Fw/Types/String.hpp"
#endif
#include "Svc/FprimeRouter/FprimeRouterComponentAc.hpp"

namespace Svc {

  // ----------------------------------------------------------------------
  // Component initialization
  // ----------------------------------------------------------------------

  void FprimeRouterComponentBase ::
    init(FwEnumStoreType instance)
  {
    // Initialize base class
    Fw::PassiveComponentBase::init(instance);

    // Connect input port cmdResponseIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_cmdResponseIn_InputPorts());
      port++
    ) {
      this->m_cmdResponseIn_InputPort[port].init();
      this->m_cmdResponseIn_InputPort[port].addCallComp(
        this,
        m_p_cmdResponseIn_in
      );
      this->m_cmdResponseIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_cmdResponseIn_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_cmdResponseIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port dataIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_dataIn_InputPorts());
      port++
    ) {
      this->m_dataIn_InputPort[port].init();
      this->m_dataIn_InputPort[port].addCallComp(
        this,
        m_p_dataIn_in
      );
      this->m_dataIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_dataIn_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_dataIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect input port fileBufferReturnIn
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_fileBufferReturnIn_InputPorts());
      port++
    ) {
      this->m_fileBufferReturnIn_InputPort[port].init();
      this->m_fileBufferReturnIn_InputPort[port].addCallComp(
        this,
        m_p_fileBufferReturnIn_in
      );
      this->m_fileBufferReturnIn_InputPort[port].setPortNum(port);

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_fileBufferReturnIn_InputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_fileBufferReturnIn_InputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port logOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_logOut_OutputPorts());
      port++
    ) {
      this->m_logOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_logOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_logOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

#if FW_ENABLE_TEXT_LOGGING == 1
    // Connect output port logTextOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_logTextOut_OutputPorts());
      port++
    ) {
      this->m_logTextOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_logTextOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_logTextOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }
#endif

    // Connect output port timeCaller
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_timeCaller_OutputPorts());
      port++
    ) {
      this->m_timeCaller_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_timeCaller_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_timeCaller_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port bufferAllocate
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_bufferAllocate_OutputPorts());
      port++
    ) {
      this->m_bufferAllocate_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_bufferAllocate_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_bufferAllocate_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port bufferDeallocate
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_bufferDeallocate_OutputPorts());
      port++
    ) {
      this->m_bufferDeallocate_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_bufferDeallocate_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_bufferDeallocate_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port commandOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_commandOut_OutputPorts());
      port++
    ) {
      this->m_commandOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_commandOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_commandOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port dataReturnOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_dataReturnOut_OutputPorts());
      port++
    ) {
      this->m_dataReturnOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_dataReturnOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_dataReturnOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port fileOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_fileOut_OutputPorts());
      port++
    ) {
      this->m_fileOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_fileOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_fileOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }

    // Connect output port unknownDataOut
    for (
      FwIndexType port = 0;
      port < static_cast<FwIndexType>(this->getNum_unknownDataOut_OutputPorts());
      port++
    ) {
      this->m_unknownDataOut_OutputPort[port].init();

#if FW_OBJECT_NAMES == 1
      Fw::ObjectName portName;
      portName.format(
        "%s_unknownDataOut_OutputPort[%" PRI_FwIndexType "]",
        this->m_objName.toChar(),
        port
      );
      this->m_unknownDataOut_OutputPort[port].setObjName(portName.toChar());
#endif
    }
  }

  // ----------------------------------------------------------------------
  // Getters for typed input ports
  // ----------------------------------------------------------------------

  Fw::InputCmdResponsePort* FprimeRouterComponentBase ::
    get_cmdResponseIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_cmdResponseIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_cmdResponseIn_InputPort[portNum];
  }

  Svc::InputComDataWithContextPort* FprimeRouterComponentBase ::
    get_dataIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_dataIn_InputPort[portNum];
  }

  Fw::InputBufferSendPort* FprimeRouterComponentBase ::
    get_fileBufferReturnIn_InputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_fileBufferReturnIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return &this->m_fileBufferReturnIn_InputPort[portNum];
  }

  // ----------------------------------------------------------------------
  // Connect input ports to special output ports
  // ----------------------------------------------------------------------

  void FprimeRouterComponentBase ::
    set_logOut_OutputPort(
        FwIndexType portNum,
        Fw::InputLogPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void FprimeRouterComponentBase ::
    set_logTextOut_OutputPort(
        FwIndexType portNum,
        Fw::InputLogTextPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logTextOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logTextOut_OutputPort[portNum].addCallPort(port);
  }

#endif

  void FprimeRouterComponentBase ::
    set_timeCaller_OutputPort(
        FwIndexType portNum,
        Fw::InputTimePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_timeCaller_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].addCallPort(port);
  }

  // ----------------------------------------------------------------------
  // Connect typed input ports to typed output ports
  // ----------------------------------------------------------------------

  void FprimeRouterComponentBase ::
    set_bufferAllocate_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferGetPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferAllocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_bufferAllocate_OutputPort[portNum].addCallPort(port);
  }

  void FprimeRouterComponentBase ::
    set_bufferDeallocate_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferDeallocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_bufferDeallocate_OutputPort[portNum].addCallPort(port);
  }

  void FprimeRouterComponentBase ::
    set_commandOut_OutputPort(
        FwIndexType portNum,
        Fw::InputComPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_commandOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_commandOut_OutputPort[portNum].addCallPort(port);
  }

  void FprimeRouterComponentBase ::
    set_dataReturnOut_OutputPort(
        FwIndexType portNum,
        Svc::InputComDataWithContextPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_dataReturnOut_OutputPort[portNum].addCallPort(port);
  }

  void FprimeRouterComponentBase ::
    set_fileOut_OutputPort(
        FwIndexType portNum,
        Fw::InputBufferSendPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_fileOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_fileOut_OutputPort[portNum].addCallPort(port);
  }

  void FprimeRouterComponentBase ::
    set_unknownDataOut_OutputPort(
        FwIndexType portNum,
        Svc::InputComDataWithContextPort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_unknownDataOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_unknownDataOut_OutputPort[portNum].addCallPort(port);
  }

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to special output ports
  // ----------------------------------------------------------------------

  void FprimeRouterComponentBase ::
    set_logOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logOut_OutputPort[portNum].registerSerialPort(port);
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  void FprimeRouterComponentBase ::
    set_logTextOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logTextOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_logTextOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  void FprimeRouterComponentBase ::
    set_timeCaller_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_timeCaller_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_timeCaller_OutputPort[portNum].registerSerialPort(port);
  }

#endif

#if FW_PORT_SERIALIZATION

  // ----------------------------------------------------------------------
  // Connect serial input ports to typed output ports
  // ----------------------------------------------------------------------

  void FprimeRouterComponentBase ::
    set_bufferDeallocate_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferDeallocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_bufferDeallocate_OutputPort[portNum].registerSerialPort(port);
  }

  void FprimeRouterComponentBase ::
    set_commandOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_commandOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_commandOut_OutputPort[portNum].registerSerialPort(port);
  }

  void FprimeRouterComponentBase ::
    set_dataReturnOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_dataReturnOut_OutputPort[portNum].registerSerialPort(port);
  }

  void FprimeRouterComponentBase ::
    set_fileOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_fileOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_fileOut_OutputPort[portNum].registerSerialPort(port);
  }

  void FprimeRouterComponentBase ::
    set_unknownDataOut_OutputPort(
        FwIndexType portNum,
        Fw::InputSerializePort* port
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_unknownDataOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    this->m_unknownDataOut_OutputPort[portNum].registerSerialPort(port);
  }

#endif

  // ----------------------------------------------------------------------
  // Component construction and destruction
  // ----------------------------------------------------------------------

  FprimeRouterComponentBase ::
    FprimeRouterComponentBase(const char* compName) :
      Fw::PassiveComponentBase(compName)
  {

  }

  FprimeRouterComponentBase ::
    ~FprimeRouterComponentBase()
  {

  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed input ports
  // ----------------------------------------------------------------------

  FwIndexType FprimeRouterComponentBase ::
    getNum_cmdResponseIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_cmdResponseIn_InputPort));
  }

  FwIndexType FprimeRouterComponentBase ::
    getNum_dataIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_dataIn_InputPort));
  }

  FwIndexType FprimeRouterComponentBase ::
    getNum_fileBufferReturnIn_InputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_fileBufferReturnIn_InputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of special output ports
  // ----------------------------------------------------------------------

  FwIndexType FprimeRouterComponentBase ::
    getNum_logOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_logOut_OutputPort));
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  FwIndexType FprimeRouterComponentBase ::
    getNum_logTextOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_logTextOut_OutputPort));
  }

#endif

  FwIndexType FprimeRouterComponentBase ::
    getNum_timeCaller_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_timeCaller_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Getters for numbers of typed output ports
  // ----------------------------------------------------------------------

  FwIndexType FprimeRouterComponentBase ::
    getNum_bufferAllocate_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_bufferAllocate_OutputPort));
  }

  FwIndexType FprimeRouterComponentBase ::
    getNum_bufferDeallocate_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_bufferDeallocate_OutputPort));
  }

  FwIndexType FprimeRouterComponentBase ::
    getNum_commandOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_commandOut_OutputPort));
  }

  FwIndexType FprimeRouterComponentBase ::
    getNum_dataReturnOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_dataReturnOut_OutputPort));
  }

  FwIndexType FprimeRouterComponentBase ::
    getNum_fileOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_fileOut_OutputPort));
  }

  FwIndexType FprimeRouterComponentBase ::
    getNum_unknownDataOut_OutputPorts() const
  {
    return static_cast<FwIndexType>(FW_NUM_ARRAY_ELEMENTS(this->m_unknownDataOut_OutputPort));
  }

  // ----------------------------------------------------------------------
  // Connection status queries for special output ports
  // ----------------------------------------------------------------------

  bool FprimeRouterComponentBase ::
    isConnected_logOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_logOut_OutputPort[portNum].isConnected();
  }

#if FW_ENABLE_TEXT_LOGGING == 1

  bool FprimeRouterComponentBase ::
    isConnected_logTextOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_logTextOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_logTextOut_OutputPort[portNum].isConnected();
  }

#endif

  bool FprimeRouterComponentBase ::
    isConnected_timeCaller_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_timeCaller_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_timeCaller_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Connection status queries for typed output ports
  // ----------------------------------------------------------------------

  bool FprimeRouterComponentBase ::
    isConnected_bufferAllocate_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferAllocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_bufferAllocate_OutputPort[portNum].isConnected();
  }

  bool FprimeRouterComponentBase ::
    isConnected_bufferDeallocate_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferDeallocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_bufferDeallocate_OutputPort[portNum].isConnected();
  }

  bool FprimeRouterComponentBase ::
    isConnected_commandOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_commandOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_commandOut_OutputPort[portNum].isConnected();
  }

  bool FprimeRouterComponentBase ::
    isConnected_dataReturnOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_dataReturnOut_OutputPort[portNum].isConnected();
  }

  bool FprimeRouterComponentBase ::
    isConnected_fileOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_fileOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_fileOut_OutputPort[portNum].isConnected();
  }

  bool FprimeRouterComponentBase ::
    isConnected_unknownDataOut_OutputPort(FwIndexType portNum)
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_unknownDataOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    return this->m_unknownDataOut_OutputPort[portNum].isConnected();
  }

  // ----------------------------------------------------------------------
  // Port handler base-class functions for typed input ports
  //
  // Call these functions directly to bypass the corresponding ports
  // ----------------------------------------------------------------------

  void FprimeRouterComponentBase ::
    cmdResponseIn_handlerBase(
        FwIndexType portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        const Fw::CmdResponse& response
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_cmdResponseIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->cmdResponseIn_handler(
      portNum,
      opCode,
      cmdSeq,
      response
    );
  }

  void FprimeRouterComponentBase ::
    dataIn_handlerBase(
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->dataIn_handler(
      portNum,
      data,
      context
    );
  }

  void FprimeRouterComponentBase ::
    fileBufferReturnIn_handlerBase(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    // Make sure port number is valid
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_fileBufferReturnIn_InputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    // Call handler function
    this->fileBufferReturnIn_handler(
      portNum,
      fwBuffer
    );
  }

  // ----------------------------------------------------------------------
  // Invocation functions for typed output ports
  // ----------------------------------------------------------------------

  Fw::Buffer FprimeRouterComponentBase ::
    bufferAllocate_out(
        FwIndexType portNum,
        FwSizeType size
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferAllocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_bufferAllocate_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    return this->m_bufferAllocate_OutputPort[portNum].invoke(
      size
    );
  }

  void FprimeRouterComponentBase ::
    bufferDeallocate_out(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_bufferDeallocate_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_bufferDeallocate_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_bufferDeallocate_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  void FprimeRouterComponentBase ::
    commandOut_out(
        FwIndexType portNum,
        Fw::ComBuffer& data,
        U32 context
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_commandOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_commandOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_commandOut_OutputPort[portNum].invoke(
      data,
      context
    );
  }

  void FprimeRouterComponentBase ::
    dataReturnOut_out(
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_dataReturnOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_dataReturnOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_dataReturnOut_OutputPort[portNum].invoke(
      data,
      context
    );
  }

  void FprimeRouterComponentBase ::
    fileOut_out(
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_fileOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_fileOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_fileOut_OutputPort[portNum].invoke(
      fwBuffer
    );
  }

  void FprimeRouterComponentBase ::
    unknownDataOut_out(
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    FW_ASSERT(
      (0 <= portNum) && (portNum < this->getNum_unknownDataOut_OutputPorts()),
      static_cast<FwAssertArgType>(portNum)
    );

    FW_ASSERT(
      this->m_unknownDataOut_OutputPort[portNum].isConnected(),
      static_cast<FwAssertArgType>(portNum)
    );
    this->m_unknownDataOut_OutputPort[portNum].invoke(
      data,
      context
    );
  }

  // ----------------------------------------------------------------------
  // Event logging functions
  // ----------------------------------------------------------------------

  void FprimeRouterComponentBase ::
    log_WARNING_HI_SerializationError(U32 status) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_SERIALIZATIONERROR;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(status);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Serializing com buffer failed with status %" PRIu32 "";
#else
      const char* _formatString =
        "%s: Serializing com buffer failed with status %" PRIu32 "";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "SerializationError ",
        status
      );

      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logString
      );
    }
#endif
  }

  void FprimeRouterComponentBase ::
    log_WARNING_HI_DeserializationError(U32 status) const
  {
    // Get the time
    Fw::Time _logTime;
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      this->m_timeCaller_OutputPort[0].invoke(_logTime);
    }

    FwEventIdType _id = static_cast<FwEventIdType>(0);

    _id = this->getIdBase() + EVENTID_DESERIALIZATIONERROR;

    // Emit the event on the log port
    if (this->m_logOut_OutputPort[0].isConnected()) {
      Fw::LogBuffer _logBuff;
      Fw::SerializeStatus _status = Fw::FW_SERIALIZE_OK;

#if FW_AMPCS_COMPATIBLE
      // Serialize the number of arguments
      _status = _logBuff.serializeFrom(static_cast<U8>(1));
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif

#if FW_AMPCS_COMPATIBLE
      // Serialize the argument size
      _status = _logBuff.serializeFrom(
        static_cast<U8>(sizeof(U32))
      );
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );
#endif
      _status = _logBuff.serializeFrom(status);
      FW_ASSERT(
        _status == Fw::FW_SERIALIZE_OK,
        static_cast<FwAssertArgType>(_status)
      );

      this->m_logOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logBuff
      );
    }

    // Emit the event on the text log port
#if FW_ENABLE_TEXT_LOGGING
    if (this->m_logTextOut_OutputPort[0].isConnected()) {
#if FW_OBJECT_NAMES == 1
      const char* _formatString =
        "(%s) %s: Deserializing packet type failed with status %" PRIu32 "";
#else
      const char* _formatString =
        "%s: Deserializing packet type failed with status %" PRIu32 "";
#endif

      Fw::TextLogString _logString;
      _logString.format(
        _formatString,
#if FW_OBJECT_NAMES == 1
        this->m_objName.toChar(),
#endif
        "DeserializationError ",
        status
      );

      this->m_logTextOut_OutputPort[0].invoke(
        _id,
        _logTime,
        Fw::LogSeverity::WARNING_HI,
        _logString
      );
    }
#endif
  }

  // ----------------------------------------------------------------------
  // Time
  // ----------------------------------------------------------------------

  Fw::Time FprimeRouterComponentBase ::
    getTime() const
  {
    if (this->m_timeCaller_OutputPort[0].isConnected()) {
      Fw::Time _time;
      this->m_timeCaller_OutputPort[0].invoke(_time);
      return _time;
    }
    else {
      return Fw::Time(TimeBase::TB_NONE, 0, 0);
    }
  }

  // ----------------------------------------------------------------------
  // Calls for messages received on typed input ports
  // ----------------------------------------------------------------------

  void FprimeRouterComponentBase ::
    m_p_cmdResponseIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        FwOpcodeType opCode,
        U32 cmdSeq,
        const Fw::CmdResponse& response
    )
  {
    FW_ASSERT(callComp);
    FprimeRouterComponentBase* compPtr = static_cast<FprimeRouterComponentBase*>(callComp);
    compPtr->cmdResponseIn_handlerBase(
      portNum,
      opCode,
      cmdSeq,
      response
    );
  }

  void FprimeRouterComponentBase ::
    m_p_dataIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& data,
        const ComCfg::FrameContext& context
    )
  {
    FW_ASSERT(callComp);
    FprimeRouterComponentBase* compPtr = static_cast<FprimeRouterComponentBase*>(callComp);
    compPtr->dataIn_handlerBase(
      portNum,
      data,
      context
    );
  }

  void FprimeRouterComponentBase ::
    m_p_fileBufferReturnIn_in(
        Fw::PassiveComponentBase* callComp,
        FwIndexType portNum,
        Fw::Buffer& fwBuffer
    )
  {
    FW_ASSERT(callComp);
    FprimeRouterComponentBase* compPtr = static_cast<FprimeRouterComponentBase*>(callComp);
    compPtr->fileBufferReturnIn_handlerBase(
      portNum,
      fwBuffer
    );
  }

}
