// ======================================================================
// \title  FppConstantsAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for FPP constants
// ======================================================================

#ifndef default_config_FppConstantsAc_HPP
#define default_config_FppConstantsAc_HPP

#include "Fw/FPrimeBasicTypes.hpp"

//! Number of rate group member output ports for ActiveRateGroup
enum FppConstant_ActiveRateGroupOutputPorts {
  ActiveRateGroupOutputPorts = 10
};

//! Number of rate group member output ports for PassiveRateGroup
enum FppConstant_PassiveRateGroupOutputPorts {
  PassiveRateGroupOutputPorts = 10
};

//! Used to drive rate groups
enum FppConstant_RateGroupDriverRateGroupPorts {
  RateGroupDriverRateGroupPorts = 3
};

//! Used for command and registration ports
enum FppConstant_CmdDispatcherComponentCommandPorts {
  CmdDispatcherComponentCommandPorts = 30
};

//! Used for uplink/sequencer buffer/response ports
enum FppConstant_CmdDispatcherSequencePorts {
  CmdDispatcherSequencePorts = 5
};

//! Used for dispatching sequences to command sequencers
enum FppConstant_SeqDispatcherSequencerPorts {
  SeqDispatcherSequencerPorts = 2
};

//! Used for sizing the command splitter input arrays
enum FppConstant_CmdSplitterPorts {
  CmdSplitterPorts = 5
};

//! Number of static memory allocations
enum FppConstant_StaticMemoryAllocations {
  StaticMemoryAllocations = 4
};

//! Used to ping active components
enum FppConstant_HealthPingPorts {
  HealthPingPorts = 25
};

//! Used for broadcasting completed file downlinks
enum FppConstant_FileDownCompletePorts {
  FileDownCompletePorts = 1
};

//! Used for number of Fw::Com type ports supported by Svc::ComQueue
enum FppConstant_ComQueueComPorts {
  ComQueueComPorts = 2
};

//! Used for number of Fw::Buffer type ports supported by Svc::ComQueue
enum FppConstant_ComQueueBufferPorts {
  ComQueueBufferPorts = 1
};

//! Used for maximum number of connected buffer repeater consumers
enum FppConstant_BufferRepeaterOutputPorts {
  BufferRepeaterOutputPorts = 10
};

//! Size of port array for DpManager
enum FppConstant_DpManagerNumPorts {
  DpManagerNumPorts = 5
};

//! Size of processing port array for DpWriter
enum FppConstant_DpWriterNumProcPorts {
  DpWriterNumProcPorts = 5
};

//! The size of a file name string
enum FppConstant_FileNameStringSize {
  FileNameStringSize = 200
};

//! The size of an assert text string
enum FppConstant_FwAssertTextSize {
  FwAssertTextSize = 256
};

//! The size of a file name in an AssertFatalAdapter event
//! Note: File names in assertion failures are also truncated by
//! the constants FW_ASSERT_TEXT_SIZE and FW_LOG_STRING_MAX_SIZE, set
//! in FpConfig.h.
enum FppConstant_AssertFatalAdapterEventFileSize {
  AssertFatalAdapterEventFileSize = 200
};

enum FppConstant_GenericHubInputPorts {
  GenericHubInputPorts = 10
};

enum FppConstant_GenericHubOutputPorts {
  GenericHubOutputPorts = 10
};

enum FppConstant_GenericHubInputBuffers {
  GenericHubInputBuffers = 10
};

enum FppConstant_GenericHubOutputBuffers {
  GenericHubOutputBuffers = 10
};

namespace Fw {

  namespace DpCfg {

    //! The size in bytes of the user-configurable data in the container
    //! packet header
    enum FppConstant_CONTAINER_USER_DATA_SIZE {
      CONTAINER_USER_DATA_SIZE = 32
    };

  }

}

namespace ComCfg {

  enum FppConstant_SpacecraftId {
    SpacecraftId = 68
  };

  enum FppConstant_TmFrameFixedSize {
    TmFrameFixedSize = 1024
  };

}

namespace Svc {

  namespace Fpy {

    //! The maximum number of arguments a sequence can have
    enum FppConstant_MAX_SEQUENCE_ARG_COUNT {
      MAX_SEQUENCE_ARG_COUNT = 16
    };

    //! The maximum number of statements a sequence can have
    enum FppConstant_MAX_SEQUENCE_STATEMENT_COUNT {
      MAX_SEQUENCE_STATEMENT_COUNT = 1024
    };

    //! The maximum number of serializable registers a sequence can have
    enum FppConstant_NUM_SERIALIZABLE_REGISTERS {
      NUM_SERIALIZABLE_REGISTERS = 16
    };

    //! The maximum size a serializable register's buffer can be
    enum FppConstant_MAX_SERIALIZABLE_REGISTER_SIZE {
      MAX_SERIALIZABLE_REGISTER_SIZE = 504
    };

    //! The number of registers available to a sequence
    enum FppConstant_NUM_REGISTERS {
      NUM_REGISTERS = 128
    };

  }

}

#endif
