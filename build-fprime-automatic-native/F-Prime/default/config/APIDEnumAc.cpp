// ======================================================================
// \title  APIDEnumAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for APID enum
// ======================================================================

#include <cstring>
#include <limits>

#include "Fw/Types/Assert.hpp"
#include "default/config/APIDEnumAc.hpp"

namespace ComCfg {

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  APID& APID ::
    operator=(const APID& obj)
  {
    this->e = obj.e;
    return *this;
  }

  APID& APID ::
    operator=(T e1)
  {
    this->e = e1;
    return *this;
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const APID& obj) {
    Fw::String s;
    obj.toString(s);
    os << s;
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  bool APID ::
    isValid() const
  {
    return ((e >= FW_PACKET_COMMAND) && (e <= FW_PACKET_IDLE))
      || ((e >= FW_PACKET_HAND) && (e <= FW_PACKET_UNKNOWN))
      || ((e >= SPP_IDLE_PACKET) && (e <= INVALID_UNINITIALIZED));
  }

  Fw::SerializeStatus APID ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    const Fw::SerializeStatus status = buffer.serializeFrom(
        static_cast<SerialType>(this->e)
    );
    return status;
  }

  Fw::SerializeStatus APID ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    SerialType es;
    Fw::SerializeStatus status = buffer.deserializeTo(es);
    if (status == Fw::FW_SERIALIZE_OK) {
      this->e = static_cast<T>(es);
      if (!this->isValid()) {
        status = Fw::FW_DESERIALIZE_FORMAT_ERROR;
      }
    }
    return status;
  }

#if FW_SERIALIZABLE_TO_STRING

  void APID ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String s;
    switch (e) {
      case FW_PACKET_COMMAND:
        s = "FW_PACKET_COMMAND";
        break;
      case FW_PACKET_TELEM:
        s = "FW_PACKET_TELEM";
        break;
      case FW_PACKET_LOG:
        s = "FW_PACKET_LOG";
        break;
      case FW_PACKET_FILE:
        s = "FW_PACKET_FILE";
        break;
      case FW_PACKET_PACKETIZED_TLM:
        s = "FW_PACKET_PACKETIZED_TLM";
        break;
      case FW_PACKET_DP:
        s = "FW_PACKET_DP";
        break;
      case FW_PACKET_IDLE:
        s = "FW_PACKET_IDLE";
        break;
      case FW_PACKET_HAND:
        s = "FW_PACKET_HAND";
        break;
      case FW_PACKET_UNKNOWN:
        s = "FW_PACKET_UNKNOWN";
        break;
      case SPP_IDLE_PACKET:
        s = "SPP_IDLE_PACKET";
        break;
      case INVALID_UNINITIALIZED:
        s = "INVALID_UNINITIALIZED";
        break;
      default:
        s = "[invalid]";
        break;
    }
    sb.format("%s (%" PRIu16 ")", s.toChar(), e);
  }

#elif FW_ENABLE_TEXT_LOGGING

  void APID ::
    toString(Fw::StringBase& sb) const
  {
    sb.format("%" PRIu16 "", e);
  }

#endif

}
