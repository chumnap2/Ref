// ======================================================================
// \title  FrameContextSerializableAc.cpp
// \author Generated by fpp-to-cpp
// \brief  cpp file for FrameContext struct
// ======================================================================

#include "Fw/Types/Assert.hpp"
#include "default/config/FrameContextSerializableAc.hpp"

namespace ComCfg {

  // ----------------------------------------------------------------------
  // Constructors
  // ----------------------------------------------------------------------

  FrameContext ::
    FrameContext() :
      Serializable(),
      m_comQueueIndex(0),
      m_apid(ComCfg::APID::FW_PACKET_UNKNOWN),
      m_sequenceCount(0),
      m_vcId(1)
  {

  }

  FrameContext ::
    FrameContext(
        FwIndexType comQueueIndex,
        ComCfg::APID::T apid,
        U16 sequenceCount,
        U8 vcId
    ) :
      Serializable(),
      m_comQueueIndex(comQueueIndex),
      m_apid(apid),
      m_sequenceCount(sequenceCount),
      m_vcId(vcId)
  {

  }

  FrameContext ::
    FrameContext(const FrameContext& obj) :
      Serializable(),
      m_comQueueIndex(obj.m_comQueueIndex),
      m_apid(obj.m_apid),
      m_sequenceCount(obj.m_sequenceCount),
      m_vcId(obj.m_vcId)
  {

  }

  // ----------------------------------------------------------------------
  // Operators
  // ----------------------------------------------------------------------

  FrameContext& FrameContext ::
    operator=(const FrameContext& obj)
  {
    if (this == &obj) {
      return *this;
    }

    set(obj.m_comQueueIndex, obj.m_apid, obj.m_sequenceCount, obj.m_vcId);
    return *this;
  }

  bool FrameContext ::
    operator==(const FrameContext& obj) const
  {
    if (this == &obj) { return true; }
    return (
      (this->m_comQueueIndex == obj.m_comQueueIndex) &&
      (this->m_apid == obj.m_apid) &&
      (this->m_sequenceCount == obj.m_sequenceCount) &&
      (this->m_vcId == obj.m_vcId)
    );
  }

  bool FrameContext ::
    operator!=(const FrameContext& obj) const
  {
    return !(*this == obj);
  }

#ifdef BUILD_UT

  std::ostream& operator<<(std::ostream& os, const FrameContext& obj) {
    Fw::String s;
    obj.toString(s);
    os << s.toChar();
    return os;
  }

#endif

  // ----------------------------------------------------------------------
  // Member functions
  // ----------------------------------------------------------------------

  Fw::SerializeStatus FrameContext ::
    serializeTo(Fw::SerializeBufferBase& buffer) const
  {
    Fw::SerializeStatus status;

    status = buffer.serializeFrom(this->m_comQueueIndex);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_apid);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_sequenceCount);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.serializeFrom(this->m_vcId);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  Fw::SerializeStatus FrameContext ::
    deserializeFrom(Fw::SerializeBufferBase& buffer)
  {
    Fw::SerializeStatus status;

    status = buffer.deserializeTo(this->m_comQueueIndex);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_apid);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_sequenceCount);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }
    status = buffer.deserializeTo(this->m_vcId);
    if (status != Fw::FW_SERIALIZE_OK) {
      return status;
    }

    return status;
  }

  FwSizeType FrameContext ::
    serializedSize() const
  {
    FwSizeType size = 0;
    size += sizeof(FwIndexType);
    size += ComCfg::APID::SERIALIZED_SIZE;
    size += sizeof(U16);
    size += sizeof(U8);
    return size;
  }

#if FW_SERIALIZABLE_TO_STRING

  void FrameContext ::
    toString(Fw::StringBase& sb) const
  {
    Fw::String tmp;
    sb = "( ";

    // Format comQueueIndex
    sb += "comQueueIndex = ";
    tmp.format("%" PRIi16 "", this->m_comQueueIndex);
    sb += tmp;
    sb += ", ";

    // Format apid
    sb += "apid = ";
    this->m_apid.toString(tmp);
    sb += tmp;
    sb += ", ";

    // Format sequenceCount
    sb += "sequenceCount = ";
    tmp.format("%" PRIu16 "", this->m_sequenceCount);
    sb += tmp;
    sb += ", ";

    // Format vcId
    sb += "vcId = ";
    tmp.format("%" PRIu8 "", this->m_vcId);
    sb += tmp;
    sb += " )";
  }

#endif

  // ----------------------------------------------------------------------
  // Setter functions
  // ----------------------------------------------------------------------

  void FrameContext ::
    set(
        FwIndexType comQueueIndex,
        ComCfg::APID::T apid,
        U16 sequenceCount,
        U8 vcId
    )
  {
    this->m_comQueueIndex = comQueueIndex;
    this->m_apid = apid;
    this->m_sequenceCount = sequenceCount;
    this->m_vcId = vcId;
  }

  void FrameContext ::
    set_comQueueIndex(FwIndexType comQueueIndex)
  {
    this->m_comQueueIndex = comQueueIndex;
  }

  void FrameContext ::
    set_apid(ComCfg::APID::T apid)
  {
    this->m_apid = apid;
  }

  void FrameContext ::
    set_sequenceCount(U16 sequenceCount)
  {
    this->m_sequenceCount = sequenceCount;
  }

  void FrameContext ::
    set_vcId(U8 vcId)
  {
    this->m_vcId = vcId;
  }

}
