// ======================================================================
// \title  TimeBaseEnumAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for TimeBase enum
// ======================================================================

#ifndef TimeBaseEnumAc_HPP
#define TimeBaseEnumAc_HPP

#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"

//! Define enumeration for Time base types
class TimeBase :
  public Fw::Serializable
{

  public:

    // ----------------------------------------------------------------------
    // Types
    // ----------------------------------------------------------------------

    //! The serial representation type
    typedef U16 SerialType;

    //! The raw enum type
    enum T {
      //! No time base has been established (Required)
      TB_NONE = 0,
      //! Indicates time is processor cycle time. Not tied to external time
      TB_PROC_TIME = 1,
      //! Time as reported on workstation where software is running. For testing. (Required)
      TB_WORKSTATION_TIME = 2,
      //! Don't care value for sequences. If FwTimeBaseStoreType is changed, value should be changed (Required)
      TB_DONT_CARE = 65535,
    };

    //! For backwards compatibility
    typedef T t;

  public:

    // ----------------------------------------------------------------------
    // Constants
    // ----------------------------------------------------------------------

    enum {
      //! The size of the serial representation
      SERIALIZED_SIZE = sizeof(SerialType),
      //! The number of enumerated constants
      NUM_CONSTANTS = 4,
    };

  public:

    // ----------------------------------------------------------------------
    // Constructors
    // ----------------------------------------------------------------------

    //! Constructor (default value of TB_NONE)
    TimeBase()
    {
      this->e = TB_NONE;
    }

    //! Constructor (user-provided value)
    TimeBase(
        const T e1 //!< The raw enum value
    )
    {
      this->e = e1;
    }

    //! Copy constructor
    TimeBase(
        const TimeBase& obj //!< The source object
    )
    {
      this->e = obj.e;
    }

  public:

    // ----------------------------------------------------------------------
    // Operators
    // ----------------------------------------------------------------------

    //! Copy assignment operator (object)
    TimeBase& operator=(
        const TimeBase& obj //!< The source object
    );

    //! Copy assignment operator (raw enum)
    TimeBase& operator=(
        T e1 //!< The enum value
    );

    //! Conversion operator
    operator T() const
    {
      return this->e;
    }

    //! Equality operator
    bool operator==(T e1) const
    {
      return this->e == e1;
    }

    //! Inequality operator
    bool operator!=(T e1) const
    {
      return !(*this == e1);
    }

#ifdef BUILD_UT

    //! Ostream operator
    friend std::ostream& operator<<(
        std::ostream& os, //!< The ostream
        const TimeBase& obj //!< The object
    );

#endif

  public:

    // ----------------------------------------------------------------------
    // Member functions
    // ----------------------------------------------------------------------

    //! Check raw enum value for validity
    bool isValid() const;

    //! Serialize raw enum value to SerialType
    Fw::SerializeStatus serializeTo(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    ) const;

    //! Deserialize raw enum value from SerialType
    Fw::SerializeStatus deserializeFrom(
        Fw::SerializeBufferBase& buffer //!< The serial buffer
    );

#if FW_SERIALIZABLE_TO_STRING

    //! Convert enum to string
    void toString(
        Fw::StringBase& sb //!< The StringBase object to hold the result
    ) const;

#endif

  public:

    // ----------------------------------------------------------------------
    // Member variables
    // ----------------------------------------------------------------------

    //! The raw enum value
    T e;

};

#endif
